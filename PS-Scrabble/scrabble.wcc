' New Features:

' To Do Before Public Beta Release:
'     Bug: In Game editor, not enough room for Date Finished as 10/10/1999
'     Bug: Finished games shouldn't be listed in your active games list
'     Bug: Hard to delete a game
'     Bug: In 2 player games, doesn't clear game out of lobby if someone concedes when it's not their turn
'     Bug: Make sure games end okay, display scores, best words all that jazz at the end of online/offline games - With offline games, email everyone else with the Final Game Stats
'     Bug: ? marks don't stay on the tile after the turn in multinode games - Maybe instead of 2 bytes for each tile, make 1 byte - upper case being no ? and lower case being ?
'     Bug: All AutoUpdate errors
'     Bug: Fix all scoring/premium options, fix ASOR in VerifyPlay function - Fix end of game scoring, deduct left over tiles, follow official end of game rules 
'-------------------------------------------------------------------------------------------

' IBBS Network Blueprints
'    When InitMultinode is called, if cf.IBBSEnable then logon to server, keep one socket open for system messages (Called System Socket)
'    Intercept WriteChannel to also write to the socket
'    Intercept message processing loops with ReadMsg to check system socket as well
'    When EnterLobby is called, request a list of IBBSGames from System Socket
'    When joining a IBBSGame, open another socket called Game Socket, keep open while the game is played

'    - The server will act just like a normal Wildcat! socket, if it receives data on the system socket, it echos it back to
'      everyone else logged on to the server
'    - If receives data on a Game Socket, it echos it back to everyone in that Game ID
'    - Linked list for everyone logged on, linked list of linked list heads for each game going on (Better way for this???)


' Wish List:
' Ability to direction/whisper to spectating players
' Sysop definable chat actions
' Ability to see the next set of tiles after you play your hand in an offline game
' Ability to turn offline game into multinode game
' Log off offline game (Who played what words for what points, when, etc)
' Mode to support "Challenging" so it doesn't always look up words in the dictionary
' Tournament mode (Setup a BBS wide tourn., anyone can "sign up" through the game, people can spectate each match)
' Real time InterBBS
' GUI/HTML/ActiveX client
' Template to modify all email text
' Game ops (With Sysop like access)

#include "cmdline.wch"
#include "msgutil.wch"
#include "dateutil.wch"
#include "pagemsg.wch"
#include "windows.wch"
#include "winsock.wch"
#include "dispfile.wch"
#include "timeutil.wch"
#include "scrabble.wch"


' *************************
' General Constants In Game
' *************************

const NUM_TILES = 100
const SCRABBLE_VERSION = "0.931"
const PRODUCT_ID = 1
const DATE_EXPIRES = "3/31/2000"
const TERM_25LINE = false
const MAXLINE_LENGTH = 24
const SOCKET_BUFFER = 3700 'bytes (For some reason it croaks if I up the socket to 3800+, any other way of contiguous data struct?)

' *************************
' Control Message Constants
' *************************

const SCRABBLE_ENTER            = 1  'Player enters the game
const SCRABBLE_ENTERACK         = 2  'Ack. player entering
const SCRABBLE_LEAVE            = 3  'Player leaves the game
const SCRABBLE_UPDATE           = 4  'Update Activity of player
const SCRABBLE_CHALLENGE        = 5  'Player challenges another player to new multinode game
const SCRABBLE_ACCEPTCHALLENGE  = 6  'Player accepts challenge to multinode game
const SCRABBLE_REFUSECHALLENGE  = 7  'Player does not accept challenge to multinode game
const SCRABBLE_NEWGAMENOTIFY    = 8  'Notifies all players that a new game is opening up
const SCRABBLE_GAMESTART        = 9  'Notifies that information has changed in an online game being played
const SCRABBLE_RESUMENOTIFY     = 10 'Notifies players of an old game that the game will be continuing
const SCRABBLE_YOURTURN         = 11 'Notifies player that it is her/her turn in a non-multinode game
const SCRABBLE_KICKOUT          = 12 'Tells that player they've been kicked out of the game lobby by the host (Msg Code)
const SCRABBLE_REFRESHGAMEDATA  = 13 'Tells nodes to call RefreshOnlineGames

' *************************
' System Page Result Consts
' *************************

const RESULT_NOTIFIEDENTER      = 1  'Notified player that a player has entered the game
const RESULT_NOTIFIEDLEAVE      = 2  'Notified player that a player has left the game
const RESULT_NOTIFIEDCHALLENGE  = 3  'Notified player that another player has challenged them to a game
const RESULT_ACCEPTEDCHALLENGE  = 4  'Player accepted challenge to multinode game
const RESULT_REFUSEDCHALLENGE   = 5  'Player did not accept challenge to multinode game
const RESULT_NOTIFIEDNEWGAME    = 6  'Notified player that a new multinode game is opening up
const RESULT_NOTIFIEDYOURTURN   = 7  'Notified player that it is their turn in an offline game
const RESULT_NOTIFIEDGAMEUPDATE = 8  'Information on an existing multinode game has been updated
const RESULT_NOTIFIEDGAMESTART  = 9  'Notified player that the game is now starting
const RESULT_MUSTREFRESH        = 10 'The screen must be redrawn
const RESULT_KICKOUT            = 11 'Tells that player they've been kicked out of the game lobby by the host (Result Code)

' *************************
' Game Play Activity Consts
' *************************
                                                                     
const ONLINEGAME_TILEUPDATE     = 1  'Array of tiles left has been changed
const ONLINEGAME_NOTIFYTURN     = 2  'Notify player that it's their turn
const ONLINEGAME_PLAYERLEFT     = 3  'A player has dropped carrier
const ONLINEGAME_SCOREUPDATE    = 4  'The score of a player has been changed
const ONLINEGAME_TILEPLACED     = 5  'A tile has been placed on the board
const ONLINEGAME_CHATMSG        = 6  'Received chat message
const ONLINEGAME_PASSTURN       = 7  'A player has passed their turn
const ONLINEGAME_SHUFFLEPASS    = 8  'A player has traded in some tiles to pass their turn
const ONLINEGAME_CONCEDE        = 9  'A player has conceded and left the game
const ONLINEGAME_GAMEENDED      = 10 'The game has finished
const ONLINEGAME_BADWORD        = 11 'Player formed an invalid word (Undo play)
const ONLINEGAME_BADMOVE        = 12 'Player made an illegal move (Undo play)
const ONLINEGAME_BADMOVELIMIT   = 13 'Player made max illegal moves and is passing
const ONLINEGAME_OUTOFTIME      = 14 'Player ran out of time and conceded
const ONLINEGAME_GAMEUPDATE     = 15 'Updates a player in the game
const ONLINEGAME_DROPCARRIER    = 16 'Player has dropped carrier, and will pass their turn until they rejoin
const ONLINEGAME_GAMEOVER       = 17 'Tells everyone the game has ended
const ONLINEGAME_GAMESAVED      = 18 'Host has converted the game to offline play, ending online game play
const ONLINEGAME_REJOIN         = 19 'A player who had previously dropped has now reentered the game
const ONLINEGAME_SPECTATE_ENTER = 20 'A spectator has entered the game
const ONLINEGAME_SPECTATE_LEAVE = 21 'A spectator has left the game

' *************************
' Help Context ID Constants
' *************************

const HELP_GENERAL                   = 1  'General Game info and about the program
const HELP_USERINTERFACE             = 2  'Help on General User Interface, terminal requirements, global commands, etc
const HELP_MAINMENU                  = 3  'Main Menu Help Section
const HELP_SCORESMENU                = 4  'Scores Menu Help Section
const HELP_MULTIPLAYERMENU           = 5  'Multiplayer Help Section
const HELP_DURINGPLAY                = 6  'In Game Help Section
const HELP_MULTINODEGAMES            = 7  'Interaction commands during Multinode games
const HELP_HOWTOPLAY                 = 8  'How to play the game of Scrabble
const HELP_IBBSSETTINGS              = 9  'Help for InterBBS Network Settings
const SYSOPHELP_CONFIGMANAGER        = 10 'Help on Config manager
const SYSOPHELP_USEREDITOR           = 11 'Help on User Account Editor
const SYSOPHELP_GAMEEDITOR           = 12 'Help on Scrabble Game Editor
const SYSOPHELP_TILEEDITOR           = 13 'Help with Tile Editor in Game Editor
const SYSOPHELP_PLAYERSINGAMEEDITOR  = 14 'Help with Game Editor (Players)
const SYSOPHELP_GAMEBOARDEDITOR      = 15 'Help with Game Board Editor
const SYSOPHELP_AUTOUPDATECONFIG     = 16 'Help with AutoUpdate Config
const SYSOPHELP_SCRABBLEMANUAL       = 17 'Complete Scrabble Manual

' *************************
' Sysop Board Editor Consts
' *************************

const VIEW_BOARDTHUMBNAIL       = FALSE 'View thumbnail of board
const VIEW_PLAYERSLIST          = TRUE  'View list of players and scores

' *************************
' UI Logic Constants
' *************************

const MOMENTUM_OFF              = 0
const MOMENTUM_UP               = 1
const MOMENTUM_DOWN             = 2
const MOMENTUM_LEFT             = 3
const MOMENTUM_RIGHT            = 4
const CTRL_R                    = 18
const CTRL_T                    = 20
const CTRL_W                    = 23

' *************************
' Auto Update Type Defs
' *************************

type TProtocolHeader
   VersionDateTime as string * 20
   PatchSize as integer
end type

type TPacket
   DataPacket(SOCKET_BUFFER) as byte
end type

' *************************
' Internal Game Type Defs
' *************************

type TPlayer
   ID               as integer
   PlayerName       as string * 30
   LastPlayed       as DateTime
   Score            as short
   TilesInHand(7)   as string * 1
   VoteStartASAP    as boolean
   EmailOnTurn      as boolean
   BestWord         as string * 15
   BestScore        as byte
end type

type TBoardRow
   Row(15)          as string * 2
end type

type TGame
   GameNumber       as integer
   OpenGame         as boolean
   BeingPlayed      as boolean
   WhosTurn         as byte
   PlayNumber       as integer
   Player(4)        as TPlayer
   NumPlayers       as byte
   DateComplete     as DateTime
   DateStarted      as DateTime
   Completed        as boolean
   Tiles(NUM_TILES) as string * 1
   TilesLeft        as byte
   TotalScore       as short
   Col(15)          as TBoardRow
   Padding(500)     as byte
end type

type TGameShort
   GameNumber       as integer
   BeingPlayed      as boolean
   WhosTurn         as byte
   Player(4)        as TPlayer
   NumPlayers       as byte
   Tiles(NUM_TILES) as string * 1
   TilesLeft        as byte
end type

type TTilePlaced
   XCor as byte
   YCor as byte
   Letter as string * 1
   Wildcard as boolean
   HandPos as byte
   UserID as integer
end type

type TPlay
   TilesPlaced(7) as TTilePlaced
   LettersPlaced as byte
end type

type TConfigFile
   MaxActiveGames as integer
   MaxGamesPerPlayer as integer
   MaxIncorrectWords as integer
   MaxDaysIdle as integer
   ShowIntro as boolean
   ShowStatus as boolean
   AllowMultinode as boolean
   KeepFinishedGames as integer
   LastUser as string * 30
   TimesRun as integer
   AnsiHighScores as string * 60
   AnsiStatus as string * 60
   HtmlScores as string * 60
   RegCode as string * 255
   GameVersion as string * 20
   VersionCheckFreq as byte '1) Sysop Entry Only  2) Every Time  3) Once a Day  4) Once a Week  5) Manual
   BackupCodeBaseFile as string * 50 'File to backup .WCX while upgrading
   NotifySysopOfUpgrades as byte '1) Always  2) Major Updates Only  3) Never
   CodeBasePath as string * 100 'Path to Scrabble.wcx (Null means autodetect)
   ShowUpgradeProgress as byte '1) Full Status  2) Percent Only  3) Byte Count Only  4) None
   LastDateChecked as DateTime ' Last time we checked for a new version
   LastRan as DateTime 'Last time Scrabble was run (For daily maint stuff)
   EnableIBBS as boolean
   IBBSServer as string * 50
   IBBSPort as word
   Padding(439) as byte
end type

type TPlayerRecord
   ID as integer
   PlayerName as string * 30
   GamesPlayed as integer
   GamesWon as integer
   HighestScore as short
   TotalScores as integer
   NotifyEmail as string * 49
   DisableEmail as boolean
   DisableMomentum as boolean
   HighestScoringPlay as integer
   Padding(445) as byte
end type

type THighScore
   PlayerName as string * 30
   Score as short
end type

type THighGamesWon
   PlayerName as string * 30
   Games as Integer
end type

type THighWord
   PlayerName as string * 30
   Word as string * 15
   Points as byte
end type

type THighScoreFile
   TopScores(10) as THighScore
   TopGamesWon(10) as THighGamesWon
   TopWords(10) as THighWord
end type

type TOnlineGame
   GameNumber as short
   Player(4) as TPlayer
   Status as byte //0 = Waiting For Players   1 = In Progress   2 = New Host   3 = All Users Have Quit   4 = Game over
   TellOthers as boolean
end type

type TPlayerOnline
   PlayerName as string * 30
   Id as integer
   InGame as boolean
   GameStruct as TOnlineGame
   Activity as string * 50
   IsChallenging as boolean
end type

type TGameControl
  PlayerName as string * 30
  GamePlaying as integer
  PlayerRecNum as integer
end type

type TChatMsg
   Sender as string * 30
   ChatMsg as string * 240
   Private as boolean
   WhisperTo as byte
   DirectedTo as byte
end type

type TChallengeInfo
   FromNode as integer
   From as string * 30
   ToPlayer as integer
   WhichGame as TOnlineGame
end type

type TScrabbleNode
   NodeActive as boolean
   NodeIndex as integer
   WhichPlayer as TPlayerOnline
end type

type TWinMsgItem
   ID as short
   MsgText as string * 255
   WhenPushed as DateTime
end type

declare sub memcpy dll "msvcrt" (dest as integer, src as integer, size as integer)
declare function memcmp dll "msvcrt" (cmp1 as integer, cmp2 as integer, size as integer) as integer
declare function GetMakewild dll "wcsrv" (mw as TMakewild) as boolean
declare function stricmp dll "msvcrt" alias "_stricmp" (cmp1 as integer, cmp2 as integer) as integer
'declare function MessageBoxA dll "user32.dll" (hWnd as integer, lpText as integer, lpCaption as integer, uType as byte) as integer

declare function ProcessGameControlMsg(msg as TChannelMessage) as byte
declare function ServerConnect(DispResolve as boolean) as boolean
declare function GetNextChunk(result as TPacket) as integer
declare function DoAutoUpdate as boolean
declare function NotifyPlayerOfTurn(whichUser as integer, WhichGame as TGame) as boolean
declare function BadAts(CheckBadAts as string) as boolean
declare function DispHelpMain
declare function HelpSection(Key as byte)
declare function SelectPlayer as string
declare function Pause
declare function UpdateActivity(NewOur as TPlayerOnline)
declare function NotifyGame(WhichGame as TOnlineGame)
declare function ChangeActivity(NewActivity as string)
declare function GetPath as string
declare function Regged as boolean
declare function OpenSpot(WhichGame as TGame, Col as byte, Row as byte) as boolean
declare function InPlay(WhichPlay as TPlay, XCor as byte, YCor as byte) as boolean
declare function ClearHelpWindow as boolean
declare function ClearLobbyWindow
declare function OkayPos(WhichGame as TGame, WhichPlay as TPlay, Col as byte, Row as byte) as boolean
declare function ClearBox as boolean
declare function NumInput(DefaultInput as integer) as string
declare function WildcardInHand(WhichPlayer as TPlayer) as byte
declare function WriteGame(GameToWrite as TGame) as boolean
declare function CountGames as integer
declare function InGame(WhichGame as TGame) as boolean
declare function UpdateGame(GameToWrite as TGame) as boolean
declare function CheckJoined(GameToCheck as TGame) as boolean
declare function GetFirstOpenGame(WhichGame as TGame) as boolean
declare function GetLastOpenGame(WhichGame as TGame) as boolean
declare function GetPrevOpenGame(WhichGame as TGame) as boolean
declare function GetNextOpenGame(WhichGame as TGame) as boolean
declare function CountOpenGames as integer
declare function CountActiveGames as integer
declare function RefreshGame(WhichGame as TGame) as boolean
declare function ReadConfig
declare function WriteConfig as boolean
declare function GetCurrentActiveGames as string
declare function GetGamesNeedingPlayers as string
declare function GetGamesPlaying as string
declare function GetYourTurnInGames as string
declare function GetGame(WhichGame as integer, GameStruct as TGame) as boolean
declare function GetTopScore(WhichPlace as byte, TopScoreStruct as THighScore) as boolean
declare function GetTopGamesWon(WhichPlace as byte, TopScoreStruct as THighGamesWon) as boolean
declare function GetTopWord(WhichPlace as byte, TopScoreStruct as THighWord) as boolean
declare function UpdateTopScores(TopScoreStruct as THighScore) as byte
declare function UpdateTopGamesWon(TopScoreStruct as THighGamesWon) as byte
declare function UpdateTopWord(TopScoreStruct as THighWord) as byte
declare function GetPlayerInfo(WhichPlayer as TPlayerRecord) as boolean
declare function UpdatePlayerInfo(WhichPlayer as TPlayerRecord) as boolean
declare function UpdatePlayerRecordByOffset(RecordLookup as integer, EditPlayer as TPlayerRecord) as boolean
declare function WriteScoresFile as boolean
declare function WriteHtmlScoresFile as boolean
declare function WriteStatusFile as boolean
declare function GetLetterValue(WhichLetter as string) as byte
declare function GetPlaceValue(WhichPlay as TPlay, byval Row as byte, byval Col as byte) as byte
declare function GetPlaceValueIgnore(byval Row as byte, byval Col as byte) as byte
declare function HighCol(WhichPlay as TPlay) as byte
declare function LowCol(WhichPlay as TPlay) as byte
declare function HighRow(WhichPlay as TPlay) as byte
declare function LowRow(WhichPlay as TPlay) as byte
declare function NearByVert(WhichGame as TGame, WhichTile as TTilePlaced) as boolean
declare function NearByHoriz(WhichGame as TGame, WhichTile as TTilePlaced) as boolean
declare function CheckWildcards(LostForWildcards as byte, WhichPlay as TPlay, XCor as byte, YCor as byte)
declare function VerifyPlay(WhichGame as TGame, WhichPlay as TPlay, ScoreIncrease as byte, WhichPlayer as byte) as boolean
declare function PickTile(WhichGame as TGame) as string
declare function RefillHand(WhichGame as TGame, WhichPlayer as byte) as boolean
declare function TallyVotes(WhichGame as TGame) as boolean
declare function DispHandInfo(WhichGame as TGame, ShowTiles as boolean, ShowTime as boolean) as boolean
declare function GetVoteLetter(WhichLetter as boolean) as string
declare function ControlMessage(byval msg as integer)
declare function InitDefaultTileArray as boolean
declare function RefreshNodeData as boolean
declare function InitMultinode
declare function EmptyHand(WhichPlayer as TPlayer) as boolean
declare function GameOver(WhichGame as TGame)
declare function DiscardTiles(GamePlay as TGame, OurPlayerNum as byte) as boolean
declare function PlayHand as boolean
declare function PlayerEditor(CurGame as TGame)
declare function GameEditor
declare function GetTileString(MaxLen as byte, DefaultInput as string = "") as string
declare function SysopMenu
declare function CreateNewGame(NewGame as TGame) as boolean
declare function JoinGame as boolean
declare function ShowIntro as boolean
declare function ShowBoard as boolean
declare function RedrawBoard as boolean
declare function ShowGameStatus(Force as boolean) as boolean
declare function CheckGameInProgress as boolean
declare function WinnersBulletin as boolean
declare function GetGameFromHost(byval GameChannel as integer, GamePlay as TGame) as boolean
declare function ProcessGamePlayMsg(msg as TChannelMessage, GamePlay as TGame) as boolean
declare function ConvertLongGameToShort(GamePlay as TGame, GamePlayShort as TGameShort)
declare function ConvertShortGameToLong(GamePlay as TGame, GamePlayShort as TGameShort)
declare function HilightWhosTurn(GamePlay as TGame)
declare function ReturnTiles(GamePlay as TGame, WhichPlayer as TPlayer)
declare function SendChatMsg(GamePlay as TGame, GameChannel as integer, UseMomentum as boolean, FirstChar as integer = 0) as boolean
declare function MultinodeGame(WhichGame as TOnlineGame, Rejoining as boolean = false)
declare function GetOnlineGameStatus(Status as byte) as string
declare function CountPlayersInOnlineGame(WhichGame as TOnlineGame) as byte
declare function LobbyGameMonitor(WhichGame as TOnlineGame)
declare function DrawOnlineGame(WhichGame as TOnlineGame, WhichPos as byte)
declare function DispLightBar(DisplayIt as boolean, WhichGame as byte, LeftCornerGameNum as short = 1)
declare function EnterLobby
declare function ChallengePlayer
declare function ShowWhosPlaying
declare function MultiplayerMenu as boolean
declare function ScoresMenu as boolean
declare function PlayMenu as boolean
declare function WriteBulletins as boolean
declare function RemoveUsFromNodeFile as boolean
declare function AutoUpdateSettings
declare function InputPlayerName(OurGame as TGame, FirstKey as byte) as string
declare function PageAnotherNode as string
declare function ReportBug
declare function EmailSysopOfAutoUpdate
declare function TrimName(byval NameToTrim as string, TrimLen as byte) as string
declare function CheckSpelling(WhichWord as string) as boolean
declare function ViewGamesInProgress
declare function GetFreeGameNumber as integer
declare function PlayerSettings
declare function LookupIPOfHost(HostName as string) as string
declare function QuitGame
declare function HTTPEncode(UnencodedString as string) as string
declare function SendRegEmail(RegCodeString as string, DidItWork as boolean)
declare function Replace(ReplaceString as string, ReplaceWhat as string, WithWhat as string) as string
declare function LookupWord(pwz as string) as boolean
declare function OnlinePage
declare function TileEditor(CurGame as TGame)
declare function EditPlayerInGame(CurGame as TGame, WhichPlayer as byte)
declare function EditGameBoard(CurGame as TGame)
declare function ConvertOnlineGameToOfflineGame(WhichGame as TGame, GameNum as integer) as boolean
declare function AdvanceMomentum(Momentum as byte, XPos as byte, YPos as byte)
declare function CheckTimeLeft
declare function ShowTimeLeft
declare function UserAccountEditor(UserID as integer)
declare function CheckIfExists(UserToCheck as string) as boolean
declare function UpdateMsgBuffer(MsgText as string = "") as boolean
declare function ATTrim(TrimMsg as string) as string
declare function WhoIsOnline
declare function CheckMultinodeTimeLeft(GamePlay as TGame, OurPlayerNum as byte, GameChannel as integer)
declare function CheckForIdlePlayers
declare function EmailIdlePlayer(GameData as TGame, Days as integer)
declare function CheckAtGameLimit(UserID as integer) as boolean
declare function StillChallenging(NodeID as integer) as boolean
declare function RefreshOnlineGames as integer
declare function WriteOnlineGame(GameData as TOnlineGame) as boolean
declare function GetFirstOpenOnlineGameNumber as integer
declare function GetOnlinePlayerCount as integer
declare function TryToKillGameData
declare function DoorwayMode(Status as boolean)
declare function SpectateGame(WhichGame as TOnlineGame)
declare function DetectProtocol as integer
declare function PLocate(y as byte, x as byte)
declare function IBBSSettings

dim DefaultTileArray(NUM_TILES) as string * 1
dim cf as TConfigFile

dim msg as TChannelMessage
dim GameControl as integer = OpenChannel("Scrabble.Control")
dim SystemPageChannel as integer = OpenChannel("System.Page")
dim Our as TPlayerOnline
dim PlayersOnline() as TPlayerOnline
dim OnlineGames() as TOnlineGame
dim WinMsgBuffer() as TWinMsgItem

dim UpdateSock as TSocket = INVALID_SOCKET
dim ServerSocket as short

//***********************************************************************
//**                                                                   **
//**    Interface Related Functions                                    **
//**                                                                   **
//***********************************************************************

function ProcessGameControlMsg(msg as TChannelMessage) as byte
   select case msg.Channel
      case SystemPageChannel
         if msg.UserData = 0 then
            dim pagemsg as TPageMessage absolute msg.Data
            if our.InGame then
               print chr(7);
               UpdateMsgBuffer("@08@(@0F@" + UpperLower(pagemsg.From) + "@08@) @0F@" + pagemsg.Message(1))
               if pagemsg.Message(2) <> "" then UpdateMsgBuffer("@0F@  " + pagemsg.Message(2))
               if pagemsg.Message(3) <> "" then UpdateMsgBuffer("@0F@  " + pagemsg.Message(3))
            else
               ClearHelpWindow
               PLocate 20,1
               print chr(7);
               if ucase(pagemsg.From) <> "NODEIFY" then
                  SubText(1) = UpperLower(pagemsg.From)
                  print "@09@==> System Page From @0B@@SUB1@@08@ :@08@ (@07@Press @0F@\@07@ To Respond@08@)@0F@"
               end if
               dim i as integer
               for i = 1 to 3
                  if pagemsg.Message(i) <> "" then
                     print pagemsg.Message(i)
                  end if
               next
            end if
         end if
      case GameControl
         dim pmsg as TPlayerOnline absolute msg.Data
         dim FindOnlinePlayer as short
         select case msg.UserData
            case SCRABBLE_ENTER
               if ucase(pmsg.PlayerName) <> ucase(user.info.name) then
                  ClearHelpWindow
                  PLocate 20, 1 : print "@09@==> ";UpperLower(pmsg.PlayerName);" has just @0F@-ENTERED-@09@ the game."
                  ProcessGameControlMsg = RESULT_NOTIFIEDENTER
                  dim CheckForDupes as integer
                  dim DupeFound as boolean = false
                  'print "Debug: Looping from 0 to "; high(PlayersOnline) - 1
                  for CheckForDupes = 0 to high(PlayersOnline) - 1
                     'print "Debug: CheckForDupes: "; CheckForDupes
                     'print "PlayersOnline(CheckForDupes).ID is ";PlayersOnline(CheckForDupes).ID
                     'print "pmsg.ID is ";pmsg.ID
                     if PlayersOnline(CheckForDupes).ID = pmsg.ID then
                        DupeFound=true
                        exit for
                     end if
                  next
                  'print "Debug: DupeFound is ";DupeFound

                  if not DupeFound then
                     redim PlayersOnline(high(PlayersOnline) + 1)
                     PlayersOnline(high(PlayersOnline) - 1) = pmsg
                  end if
               end if
            case SCRABBLE_LEAVE
               if ucase(pmsg.PlayerName) <> ucase(user.info.name) then
                  ClearHelpWindow
                  PLocate 20, 1 : print "@09@==> ";UpperLower(pmsg.PlayerName);" has just @0F@-LEFT-@09@ the game."
                  ProcessGameControlMsg = RESULT_NOTIFIEDLEAVE
                  for FindOnlinePlayer = 0 to high(PlayersOnline) - 1
                     if ucase(PlayersOnline(FindOnlinePlayer).PlayerName) = ucase(pmsg.PlayerName) then
                        dim DeleteArray as short
                        for DeleteArray = FindOnlinePlayer to high(PlayersOnline) - 1
                           PlayersOnline(DeleteArray) = PlayersOnline(DeleteArray + 1)
                        next
                        redim PlayersOnline(high(PlayersOnline) - 1)
                        exit for
                      end if
                  next
               end if
            case SCRABBLE_UPDATE
               for FindOnlinePlayer = 0 to high(PlayersOnline) - 1
                  if ucase(PlayersOnline(FindOnlinePlayer).PlayerName) = ucase(pmsg.PlayerName) then
                     PlayersOnline(FindOnlinePlayer) = pmsg
                     exit for
                   end if
               next
            case SCRABBLE_CHALLENGE
               dim WhoChallenged as TChallengeInfo absolute msg.Data
               if WhoChallenged.ToPlayer = user.info.Id then
                  dim FindOurSlot as byte
                  
                  ClearHelpWindow
                  PLocate 20, 1 : print "@09@==> @0B@";WhoChallenged.From;" @03@has just challenged you to a multinode game."
                  PLocate 21, 1
                  
                  If AskYesNo("    Do you wish to accept?", true) then
                     if StillChallenging(WhoChallenged.FromNode) then
                        for FindOurSlot = 0 to 3
                           if trim(WhoChallenged.WhichGame.Player(FindOurSlot).PlayerName) = "" then
                              exit for
                           end if
                        next
                        
                        WhoChallenged.WhichGame.Player(FindOurSlot).ID = user.info.id
                        WhoChallenged.WhichGame.Player(FindOurSlot).PlayerName = UpperLower(user.info.name)
                        WhoChallenged.WhichGame.Player(FindOurSlot).Score = 0
                        if WhoChallenged.WhichGame.Status = 3 then WhoChallenged.WhichGame.Status = 0
                        WriteOnlineGame(WhoChallenged.WhichGame)
            
                        Our.InGame = True
                        Our.GameStruct = WhoChallenged.WhichGame
                        ChangeActivity("Playing In Multinode Game " + str(WhoChallenged.WhichGame.GameNumber))
                        
                        WriteChannel(GameControl, 0, SCRABBLE_ACCEPTCHALLENGE, WhoChallenged, sizeof(WhoChallenged))
                        MultinodeGame(WhoChallenged.WhichGame)
                        ProcessGameControlMsg = RESULT_MUSTREFRESH
                     else
                        ClearHelpWindow
                        PLocate 20, 3
                        print "@0F@The challenger has cancelled their invitation.";
                        PLocate 21, 3
                        pause
                        ClearHelpWindow
                     end if
                  else
                     WriteChannel(GameControl, 0, SCRABBLE_REFUSECHALLENGE, WhoChallenged, sizeof(WhoChallenged))
                     ClearHelpWindow
                  end if            
               end if
            case SCRABBLE_ACCEPTCHALLENGE
               dim WhoAccepted as TChallengeInfo absolute msg.Data
               if WhoAccepted.From = our.PlayerName then
                  ProcessGameControlMsg = RESULT_ACCEPTEDCHALLENGE
               end if
            case SCRABBLE_REFUSECHALLENGE
               dim WhoRefused as TChallengeInfo absolute msg.Data
               if WhoRefused.From = our.PlayerName then
                  ProcessGameControlMsg = RESULT_REFUSEDCHALLENGE
               end if
            case SCRABBLE_NEWGAMENOTIFY
               dim GameNotify as TOnlineGame absolute msg.Data
               if GameNotify.Player(0).Id <> user.info.Id and GameNotify.TellOthers then
                  ProcessGameControlMsg = RESULT_NOTIFIEDNEWGAME
                  ClearHelpWindow
                  PLocate 20, 1 : print "@09@==> ";UpperLower(GameNotify.Player(0).PlayerName);" is requesting players for a @0B@Multinode Game@09@!"
               end if
            case SCRABBLE_GAMESTART
               dim GameUpdate as TOnlineGame absolute msg.Data
               dim FindGameToUpdate as short
               
               if our.InGame and our.GameStruct.GameNumber = GameUpdate.GameNumber then
                  ProcessGameControlMsg = RESULT_NOTIFIEDGAMESTART
               end if
            case SCRABBLE_RESUMENOTIFY
            case SCRABBLE_YOURTURN
               dim TurnNotify as TGameShort absolute msg.Data
               if TurnNotify.Player(TurnNotify.WhosTurn).Id = user.info.Id then
                  ProcessGameControlMsg = RESULT_NOTIFIEDYOURTURN
                  ClearHelpWindow
                  PLocate 20, 1 : print "@03@==> It is now your turn in @0B@Game ";TurnNotify.GameNumber;"@03@."
               end if
            case SCRABBLE_KICKOUT
               dim UserIDToKick as TPlayer absolute msg.Data
               if UserIDToKick.ID = user.info.id then
                  ProcessGameControlMsg = RESULT_KICKOUT
               end if
            case SCRABBLE_REFRESHGAMEDATA
               ProcessGameControlMsg = RefreshOnlineGames
         end select
   end select
end function

function ServerConnect(DispResolve as boolean) as boolean
   ServerConnect=true   
   dim wsadata as TWSAData
   dim PiscesIP as string = LookupIPOfHost("autoupdate.piscessoft.com")
   if DispResolve then
      PLocate 25, 1 : Print pad("@1F@  Resolved @1B@autoupdate.piscessoft.com @18@[@17@" + PiscesIP + "@18@]...", 88);"@0F@";
      sleep(1000)
   end if
   if WSAStartup(0x0101, wsadata) <> 0 then
      print "@0C@Failed!"
      print "   @08@- @03@WSAStartup failed @08@- @03@Error in InitAutoUpdateSubSystem @08@: @0F@"; GetLastError
      print
      Pause
      ServerConnect=false
      exit function
   end if
   UpdateSock = socket(AF_INET, SOCK_STREAM, 0)
   if UpdateSock <> INVALID_SOCKET then
      dim UpdateSockAddr as TSockAddr
      UpdateSockAddr.sin_family = PF_INET
      UpdateSockAddr.sin_port = htons(80)
      UpdateSockAddr.sin_addr.S_addr = Inet_addr(PiscesIP)
      if ws_connect(UpdateSock, UpdateSockAddr, sizeof(UpdateSockAddr)) <> 0 then
         PLocate 25, 1 : Print pad("@1F@  ws_connect failed - Error in InitAutoUpdateSubSystem : Could not connect to server@18@...", 88);"@0F@";
         Pause
         closesocket(UpdateSock)
         WSACleanup
         ServerConnect=false
         exit function
      end if
   end if
end function

function GetNextChunk(result as TPacket) as integer
   dim start as datetime
   GetCurrentDateTime(start)
   GetNextChunk = 0
   clear result

   dim t as TPacket
   dim readfds as TFDSet
   readfds.fd_count = 1
   readfds.fd_array(0) = UpdateSock
   dim tv as TTimeVal
   tv.tv_sec = 5
   tv.tv_usec = 0
   
   dim TempTrapper as integer = ws_select(0, readfds, null, null, tv)
   
   if TempTrapper = 1 then
      dim n as integer = recv(UpdateSock, @t, SOCKET_BUFFER, 0)
      if n <= 0 then
         GetNextChunk = n
         exit function
      end if
   
      dim wi as integer
      memcpy(@result.DataPacket, @t.DataPacket, sizeof(result.DataPacket))
      sleep(0)
      GetNextChunk = n
   end if
end function

function DoAutoUpdate as boolean
   dim mw as TMakewild
   GetMakewild(mw)

   PLocate 25, 1 : Print pad("@1F@  Checking for newer version off AutoUpdate Server@18@...", 88);"@0F@";
   sleep(1000)
   ServerConnect(true)
   dim SysopName as string = mw.SysopName
   dim BBSName as string = mw.BBSName
   dim GetUpdateFile as string = "GET HTTP://autoupdate.piscessoft.com/AUTOUPDATE.ASP?SysopName=" + HTTPEncode(SysopName) + "&BBSName=" + HTTPEncode(BBSName) + "&"
   GetUpdateFile = GetUpdateFile + "RegString=" + mw.RegString + "&ProductID=" + str(PRODUCT_ID) + "&Version=" + SCRABBLE_VERSION
   GetUpdateFile = GetUpdateFile + "&TimesRan=" + str(cf.TimesRun) + "&Regged=" + str(abs(Regged)) + chr(13) + chr(10)
   
   dim GetUpdatePacket as string = "GET HTTP://autoupdate.piscessoft.com/GUPBase/SCRABBLE.GUP" + chr(13) + chr(10)
   dim CurrentPacket as TPacket
   clear CurrentPacket
   ws_send(UpdateSock, @GetUpdateFile, len(GetUpdateFile), 0)
   sleep(1000)
   
   if GetNextChunk(CurrentPacket) then
      dim GrabData as string * SOCKET_BUFFER
      dim VersionString as string * 20
      dim RegCodeString as string
      dim FileSize as integer
      memcpy(@GrabData, @CurrentPacket.DataPacket, sizeof(CurrentPacket.DataPacket))
      VersionString = mid(GrabData, InStr(GrabData, "CurrentVersion:") + 15, 10)
      RegCodeString = trim(mid(GrabData, InStr(GrabData, "RegCode:") + 8, 50))
      FileSize = val(mid(GrabData, InStr(GrabData, "FileSize:") + 9, 10))
      if InStr(RegCodeString, "NULL") = 0 and not Regged then
         cf.RegCode = RegCodeString
         WriteConfig
         if Regged then
            PLocate 25, 1 : Print pad("@1F@  Registration Code Received, Thank You For Registering!@18@...", 88);"@0F@";
         else
            PLocate 25, 1 : Print pad("@1F@  AutoRegistration Failed - Please contact support@piscessoft.com@18@...", 88);"@0F@";
         end if
         SendRegEmail(RegCodeString, Regged)
         sleep(2000)
      end if
      if trim(VersionString) = trim(cf.GameVersion) then
         PLocate 25, 1 : Print pad("@1F@  There are no newer versions available@18@...", 88);"@0F@";
         sleep(2000)
      else
         'Setup socket stream to retrieve game update packet data
         closesocket(UpdateSock)
         WSACleanup
         sleep(500)
         
         ServerConnect(false)
         ws_send(UpdateSock, @GetUpdatePacket, len(GetUpdatePacket), 0)
         sleep(1000)
         PLocate 25, 1 : Print pad("@1F@  Upgrading Game.  Bytes received: 0           (00% Complete)", 84);
         
         dim CodeBasePath as string
         if trim(cf.CodeBasePath) = "" then
            dim k as integer
            if RegOpenKeyEx(0x80000002, "SOFTWARE\MSI\Wildcat", 0, KEY_READ, @k) = ERROR_SUCCESS then
               dim value as string * 255
               dim n as integer = sizeof(value)
               dim vtype as integer
               if RegQueryValueEx(k, "ServerDirectory", 0, @vtype, @value, @n) = ERROR_SUCCESS then
                  CodeBasePath = value
               end if
               RegCloseKey(k)
            end if
            
            if trim(CodeBasePath) = "" then
               CodeBasePath = "c:\wc5\scrabble.wcx"
            else
               CodeBasePath = CodeBasePath + "\scrabble.wcx"
            end if
         else
            CodeBasePath = cf.CodeBasePath
         end if
         
         if trim(cf.BackupCodeBaseFile) <> "" then
            if Exists(cf.BackupCodeBaseFile) then kill cf.BackupCodeBaseFile 'Remove old backup file
            name CodeBasePath as cf.BackupCodeBaseFile 'Create new backup file (If errors, we'll abort AutoUpdate)
         else
            kill CodeBasePath
         end if
         
         dim FileStream as integer = open CodeBasePath for binary
         dim BytesRecv as integer = 0
         dim BytesInPacket as integer = 0
         dim AutoUpdateComplete as boolean = false
         
         clear CurrentPacket
         
         if FileStream > 0 then
            BytesInPacket = GetNextChunk(CurrentPacket)
            do while BytesInPacket > 0
               dim DumpPacket as integer = 0
               for DumpPacket = 0 to BytesInPacket
                  put #FileStream, BytesRecv + DumpPacket + 1, CurrentPacket.DataPacket(DumpPacket)
               next
               BytesRecv = BytesRecv + BytesInPacket
               PLocate 25, 36 : print FormatNumber(BytesRecv);
               PLocate 25, 49 + abs(int((BytesRecv / FileSize) * 100) < 10): print int((BytesRecv / FileSize) * 100);
               clear CurrentPacket
               BytesInPacket = GetNextChunk(CurrentPacket)
               Sleep(100) 'Give the poor little CPU back some time
            loop
            close #FileStream
            AutoUpdateComplete=true
         else
            'File locked
            PLocate 25, 1 : Print pad("@1F@  Could not write to file@18@...", 88);"@0F@";
         end if
         
         color 15, 0
         
         cf.GameVersion = trim(VersionString)
         GetCurrentDateTime(cf.LastDateChecked)
         WriteConfig
      end if
   else
      'Could not get version information from AutoUpdate server (Abort)
      PLocate 25, 1 : Print pad("@1F@  Could not get version information from server@18@...", 88);"@0F@";
   end if
   
   closesocket(UpdateSock)
   WSACleanup
   
   if AutoUpdateComplete then
      select case cf.NotifySysopOfUpgrades
         case 1 'Always
            EmailSysopOfAutoUpdate
         case 2 'Major Updates Only
            'Once GUP Protocol in place, decide whether this update is significant enough to waste the busy sysop's time
            EmailSysopOfAutoUpdate
      end select
      
      PLocate 25, 1 : Print pad("@1F@  AutoUpdate Process Complete, PSScrabble must be restarted@18@...", 88);"@0F@";
      sleep(2000)
      end
   end if
   exit function
   
   catch ERR_FILERENAME:
      PLocate 25, 1 : Print pad("@1F@  Could not backup codebase, AutoUpdate aborted!@18@...", 88);"@0F@";
      sleep(2000)
end function

function NotifyPlayerOfTurn(whichUser as integer, WhichGame as TGame) as boolean
   'First Check if they're in the game, send them an InGame msg
   dim FindOnlinePlayer as integer
   for FindOnlinePlayer = 0 to high(PlayersOnline) - 1
      if PlayersOnline(FindOnlinePlayer).Id = whichUser then
         dim TempShortGame as TGameShort
         ConvertLongGameToShort(WhichGame, TempShortGame)
         WriteChannel(GameControl, 0, SCRABBLE_YOURTURN, TempShortGame, sizeof(TempShortGame))
         exit function
      end if
   next
   'If not, check if they're online, send them a system page
   dim count as integer
   count = GetNodeCount
   dim n as integer = 1
   do while n <= count
      dim ni as TNodeInfo
      GetNodeInfo(n, ni)
      if ni.user.id = whichUser then
         dim pmsg as TPageMessage
         clear pmsg
      
         pmsg.From = "Pisces Software PSScrabble"
         pmsg.Message(1) = "It is now your turn in PSScrabble!  Game Number " + str(WhichGame.GameNumber) + "."
         WriteChannel(OpenChannel("System.Page"), ni.ConnectionId, 0, pmsg, sizeof(pmsg))
         exit function
      end if
      inc(n)
   loop
   'If not, send them an email
   dim UserEmail as TMsgHeader
   dim FindPlayerRecord as integer = 1
   dim TempPlayerRecord as TPlayerRecord
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   if PlayerFile > 0 then
      do while not eof(PlayerFile)
         get #PlayerFile, FindPlayerRecord, TempPlayerRecord
         if TempPlayerRecord.id = WhichGame.Player(WhichGame.WhosTurn).ID then
            if not TempPlayerRecord.DisableEmail then
               dim FEmailMsg as integer = open "wc:\temp\ScrabTurn.Msg" for output
               if FEmailMsg > 0 then
                  print #FEmailMsg, "Dear ";UpperLower(WhichGame.Player(WhichGame.WhosTurn).PlayerName);","
                  print #FEmailMsg, ""
                  print #FEmailMsg, "It is now your turn in PSScrabble!  Game number "; str(WhichGame.GameNumber); ".  Thanks!"
                  print #FEmailMsg, ""
                  print #FEmailMsg, "                Sincerely,"
                  print #FEmailMsg, "                      Pisces Software PSScrabble"
                  
                  close #FEmailMsg
                  
                  UserEmail.From.Name = "PSScrabble"
                  if trim(TempPlayerRecord.NotifyEmail) <> "" and InStr(TempPlayerRecord.NotifyEmail, "@") > 0 and not Exists(GetPath + "NO_EMAILNOTIFY.$$$") and (Makewild.InstalledComponents and WILDCAT_COMPONENT_ICP) > 0 then
                     UserEmail.To.Name = trim(TempPlayerRecord.NotifyEmail)
                  else
                     UserEmail.To.Name = ucase(WhichGame.Player(WhichGame.WhosTurn).PlayerName)
                     UserEmail.To.Id = WhichGame.Player(WhichGame.WhosTurn).ID
                  end if
                  UserEmail.Subject = "Your Turn In Game " + str(WhichGame.GameNumber)
                  UserEmail.Conference = 0
                  dim now as DateTime
                  GetCurrentDateTime(now)
                  UserEmail.Private = True
               
                  AddMessage(UserEmail, "wc:\temp\ScrabTurn.Msg")
            
                  del "wc:\temp\ScrabTurn.Msg"
               end if
            end if
         end if
         inc(FindPlayerRecord)
      loop
      close #PlayerFile
   end if
end function

function BadAts(CheckBadAts as string) as boolean
   dim BadWord as string
   dim TempBadAts as boolean = false
   
   if instr(CheckBadAts, "@CLS@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@PAUSE@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@NOPAUSE@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@00@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@BELL@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@LOGOFF@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@NOSTOP@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@STOP@") > 0 then TempBadAts = true
   if instr(CheckBadAts, "@HANGUP@") > 0 then TempBadAts = true
   if instr(CheckBadAts, chr(27)) > 0 then TempBadAts = true   
   
   if TempBadAts then
      ClearHelpWindow
      PLocate 20, 1
      Print "@0C@Your message was not sent due to illegal screen control codes."
   end if
   
   if not TempBadAts then
      dim CussFilter as integer = open "wc:\data\BadWords.Dat" for input
      if CussFilter > 0 then
         do while not eof(CussFilter)
            input #CussFilter, BadWord
            if instr(ucase(CheckBadAts), ucase(trim(BadWord))) > 0 then 
               TempBadAts = true
               exit do
            end if
         loop
         
         close #CussFilter
      end if
      if TempBadAts then
         ClearHelpWindow
         PLocate 20, 1
         Print "@0C@Your message was not sent due to inappropriate language."
      end if
   end if
   
   if TempBadAts then
      BadAts = true
   else
      BadAts = false
   end if
end function

function DispHelpMain
   dim SideCounter as byte
   dim MaxY as byte
   cls
   PLocate 2,1
   print "@0F@";CenterText("PSScrabble Online Help System");
   PLocate 3,1
   print "@03@";chr(218);string(76, 196);chr(191);
   for SideCounter = 4 to 18
      PLocate SideCounter, 1
      print chr(179);
      PLocate SideCounter, 78
      print chr(179);
   next
   PLocate 19,1
   print "@03@";chr(192);string(76, 196);chr(217)
   PLocate 4,3 : print "   @0F@W@07@elcome to the PSScrabble Online Help System@08@.@07@  Please use the arrow";
   PLocate 5,3 : print "keys to select a Help Topic to view@08@,@07@ and press enter@08@.@07@  You can press @0F@ESC@07@";
   PLocate 6,3 : print "or @0F@Q@07@ to leave the help system and return to the game@08@.@0F@"
    
   PLocate 8, 3      : print "General";             'Help Menu, allow use to choose the subject they want help on
   PLocate 8, 25     : print "User Interface";      'Help on General User Interface, terminal requirements, global commands, etc
   PLocate 8, 45     : print "Main Menu";           'Main Menu Help Section
   PLocate 8, 66     : print "Scores Menu";         'Scores Menu Help Section
   PLocate 10, 3     : print "Multiplayer Menu";    'Multiplayer Help Section
   PLocate 10, 25    : print "During Play";         'In Game Help Section
   PLocate 10, 45    : print "Multinode Games";     'Interaction commands during Multinode games
   PLocate 10, 66    : print "Game Rules";          'How to play the game of Scrabble
   if GetObjectFlags(OBJECTID_MASTER_SYSOP) > 0 then
      PLocate 12, 3  : print "Config Manager";      'Help on Config manager
      PLocate 12, 25 : print "User Account Editor"; 'Help on User Account Editor
      PLocate 12, 45 : print "Game Editor";         'Help on Scrabble Game Editor
      PLocate 12, 66 : print "Tile Editor";         'Help with Tile Editor in Game Editor
      PLocate 14, 3  : print "Players Editor";      'Help with Game Editor (Players)
      PLocate 14, 25 : print "Board Editor";        'Help with Game Board Editor
      PLocate 14, 45 : print "AutoUpdate Config";   'Help with AutoUpdate Config
      PLocate 14, 66 : print "Manual";              'Complete Scrabble Manual
      MaxY = 4
   else
      MaxY = 2
   end if
    
   dim CurX as byte = 1
   dim CurY as byte = 1
   dim KeyInp as integer
    
   do while KeyInp <> 27 and asc(ucase(chr(KeyInp))) <> asc("Q")
      select case CurY
         case 1
            select case CurX
               case 1
                  PLocate 8, 3
                  print "@1F@General@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@General player instructions@08@,@0F@ including Player@08@/@0F@Game Settings@08@.";
               case 2
                  PLocate 8, 25
                  print "@1F@User Interface@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@User Interface related help topics@08@.";
               case 3
                  PLocate 8, 45
                  print "@1F@Main Menu@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Play Menu options@08@.";
               case 4
                  PLocate 8, 66
                  print "@1F@Scores Menu@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Scores Menu options@08@.";
            end select
         case 2
            select case CurX
               case 1
                  PLocate 10, 3
                  print "@1F@Multiplayer Menu@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Multiplayer Menu options@08@.";
               case 2
                  PLocate 10, 25
                  print "@1F@During Play@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on playing your hand in a game@08@.";
               case 3
                  PLocate 10, 45
                  print "@1F@Multinode Games@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Multinode Game specific options@08@.";
               case 4
                  PLocate 10, 66
                  print "@1F@Game Rules@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Scrabble rules and how to play@08@.";
            end select
         case 3
            select case CurX
               case 1
                  PLocate 12, 3
                  print "@1F@Config Manager@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Sysop Configuration Manager options@08@.";
               case 2
                  PLocate 12, 25
                  print "@1F@User Account Editor@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on User Account Editor options@08@.";
               case 3
                  PLocate 12, 45
                  print "@1F@Game Editor@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Game Editor options@08@.";
               case 4
                  PLocate 12, 66
                  print "@1F@Tile Editor@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Tile Editor options@08@.";
            end select
         case 4
            select case CurX
               case 1
                  PLocate 14, 3
                  print "@1F@Players Editor@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Edit Players In Game options@08@.";
               case 2
                  PLocate 14, 25
                  print "@1F@Board Editor@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on Board Editor options@08@.";
               case 3
                  PLocate 14, 45
                  print "@1F@AutoUpdate Config@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@Help on AutoUpdate Config options@08@.";
               case 4
                  PLocate 14, 66
                  print "@1F@Manual@07@";
                  PLocate 20, 4 : print space(76);
                  PLocate 20, 4
                  print "@0F@PSScrabble Sysop Manual@08@.";
            end select
      end select
      do
         KeyInp = readkey(100)
         CheckTimeLeft
      loop while KeyInp = 0
      
      if KeyInp=KEY_UP or KeyInp=KEY_DOWN or KeyInp=KEY_RIGHT or KeyInp=KEY_LEFT then
         select case CurY
            case 1
               select case CurX
                  case 1 : PLocate 8, 3 : print "@0F@General";
                  case 2 : PLocate 8, 25 : print "@0F@User Interface";
                  case 3 : PLocate 8, 45 : print "@0F@Main Menu";
                  case 4 : PLocate 8, 66 : print "@0F@Scores Menu";
               end select
            case 2
               select case CurX
                  case 1 : PLocate 10, 3 : print "@0F@Multiplayer Menu";
                  case 2 : PLocate 10, 25 : print "@0F@During Play";
                  case 3 : PLocate 10, 45 : print "@0F@Multinode Games";
                  case 4 : PLocate 10, 66 : print "@0F@Game Rules";
               end select
            case 3
               select case CurX
                  case 1 : PLocate 12, 3 : print "@0F@Config Manager";
                  case 2 : PLocate 12, 25 : print "@0F@User Account Editor";
                  case 3 : PLocate 12, 45 : print "@0F@Game Editor";
                  case 4 : PLocate 12, 66 : print "@0F@Tile Editor";
               end select
            case 4
               select case CurX
                  case 1 : PLocate 14, 3 : print "@0F@Players Editor";
                  case 2 : PLocate 14, 25 : print "@0F@Board Editor";
                  case 3 : PLocate 14, 45 : print "@0F@AutoUpdate Config";
                  case 4 : PLocate 14, 66 : print "@0F@Manual";
               end select
         end select
      end if
      
      select case KeyInp
         case KEY_UP
            if CurY > 1 then dec(CurY) else CurY = MaxY
         case KEY_DOWN
            if CurY < MaxY then inc(CurY) else CurY = 1
         case KEY_RIGHT
            if CurX < 4 then inc(CurX) else CurX = 1
         case KEY_LEFT
            if CurX > 1 then dec(CurX) else CurX = 4
         case CTRL_T
            ShowTimeLeft
            PLocate 20, 1
            print space(80);
         case 13, CTRL_R, CTRL_W
            if KeyInp = CTRL_W then WhoIsOnline
            if KeyInp = 13 then
               select case CurY
                  case 1
                     select case CurX
                        case 1 : HelpSection(HELP_GENERAL)
                        case 2 : HelpSection(HELP_USERINTERFACE)
                        case 3 : HelpSection(HELP_MAINMENU)
                        case 4 : HelpSection(HELP_SCORESMENU)
                     end select
                  case 2
                     select case CurX
                        case 1 : HelpSection(HELP_MULTIPLAYERMENU)
                        case 2 : HelpSection(HELP_DURINGPLAY)
                        case 3 : HelpSection(HELP_MULTINODEGAMES)
                        case 4 : HelpSection(HELP_HOWTOPLAY)
                     end select
                  case 3
                     select case CurX
                        case 1 : HelpSection(SYSOPHELP_CONFIGMANAGER)
                        case 2 : HelpSection(SYSOPHELP_USEREDITOR)
                        case 3 : HelpSection(SYSOPHELP_GAMEEDITOR)
                        case 4 : HelpSection(SYSOPHELP_TILEEDITOR)
                     end select
                  case 4
                     select case CurX
                        case 1 : HelpSection(SYSOPHELP_PLAYERSINGAMEEDITOR)
                        case 2 : HelpSection(SYSOPHELP_GAMEBOARDEDITOR)
                        case 3 : HelpSection(SYSOPHELP_AUTOUPDATECONFIG)
                        case 4 : HelpSection(SYSOPHELP_SCRABBLEMANUAL)
                     end select
               end select
            end if
         
            cls
            PLocate 2,1
            print "@0F@";CenterText("PSScrabble Online Help System");
            PLocate 3,1
            print "@03@";chr(218);string(76, 196);chr(191);
            for SideCounter = 4 to 18
               PLocate SideCounter, 1
               print chr(179);
               PLocate SideCounter, 78
               print chr(179);
            next
            PLocate 19,1
            print "@03@";chr(192);string(76, 196);chr(217)
            PLocate 4,3 : print "   @0F@W@07@elcome to the PSScrabble Online Help System@08@.@07@  Please use the arrow";
            PLocate 5,3 : print "keys to select a Help Topic to view@08@,@07@ and press enter@08@.@07@  You can press @0F@ESC@07@";
            PLocate 6,3 : print "or @0F@Q@07@ to leave the help system and return to the game@08@.@0F@"
             
            PLocate 8, 3      : print "General";             'Help Menu, allow use to choose the subject they want help on
            PLocate 8, 25     : print "User Interface";      'Help on General User Interface, terminal requirements, global commands, etc
            PLocate 8, 45     : print "Main Menu";           'Main Menu Help Section
            PLocate 8, 66     : print "Scores Menu";         'Scores Menu Help Section
            PLocate 10, 3     : print "Multiplayer Menu";    'Multiplayer Help Section
            PLocate 10, 25    : print "During Play";         'In Game Help Section
            PLocate 10, 45    : print "Multinode Games";     'Interaction commands during Multinode games
            PLocate 10, 66    : print "Game Rules";          'How to play the game of Scrabble
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) > 0 then
               PLocate 12, 3  : print "Config Manager";      'Help on Config manager
               PLocate 12, 25 : print "User Account Editor"; 'Help on User Account Editor
               PLocate 12, 45 : print "Game Editor";         'Help on Scrabble Game Editor
               PLocate 12, 66 : print "Tile Editor";         'Help with Tile Editor in Game Editor
               PLocate 14, 3  : print "Players Editor";      'Help with Game Editor (Players)
               PLocate 14, 25 : print "Board Editor";        'Help with Game Board Editor
               PLocate 14, 45 : print "AutoUpdate Config";   'Help with AutoUpdate Config
               PLocate 14, 66 : print "Manual";              'Complete Scrabble Manual
               MaxY = 4
            else
               MaxY = 2
            end if
      end select
   loop
end function

function HelpSection(Key as byte)
   select case Key
      case HELP_GENERAL
         Cls
         print "@0F@PSScrabble General Game Information"
         print
         print "W@07@elcome to PSScrabble by Pisces Software.  If you're looking for help"
         print "with PSScrabble's rich array of features, you've come to the right place."
         print "Please read through this General Help section to become familiar with the"
         print "game and how to navigate through the program options."
         print
         print "When you enter @0F@PSScrabble@07@ for the first time, you will be setup with a"
         print "User Account.  This account will keep track of your player statistics,"
         print "such as the number of games you've won and lost, your best score, your"
         print "best word, your total score, and even what E-Mail address to use to send"
         print "you turn notifications and End of Game statistics."
         print
         print "The first menu you see when you enter the game is called the @0F@Play Menu@07@. "
         print "Here, you can get to any of PSScrabble's game features.  You can also"
         print "press the @0F@!@07@ key to see your User Account settings.  From the User Account"
         print "Settings Menu, you have two options:"
         print
         print "  @03@[ @0F@A@03@]  @0F@E-Mail On Turn @08@: @0F@Yes"
         print "  @03@[ @0F@B@03@]  @0F@E-Mail Address @08@: @0F@Local"
         print "  @03@[ @0F@C@03@]  @0F@Tile Placement Momentum @08@: @0F@Yes"
         print
         Pause
         Cls
         print "@0F@Option A@07@ will allow you to choose if you would like to be e-mailed when "
         print "it's your turn in a game.  If this is set to @0F@Yes@07@ (Default), you will be "
         print "e-mailed."
         print
         print "@0F@Option B@07@ allows you to choose the actual E-Mail address that will be used"
         print "to contact you.  If this is set to Local, it means you will be E-mailed"
         print "locally on the BBS, not over the Internet.  Please note, you can only"
         print "change this option is the BBS is capable of sending Internet E-Mail, and"
         print "the sysop has allowed you to use this feature.  If you enter a blank value"
         print "for option B, your E-Mail Address will be set to Local."
         print
         print "@0F@Option C@07@ allows you to toggle Tile Placement Momentum on and off.  If this"
         print "feature is on, when you place a tile on the game board, the cursor will advance"
         print "in the direction it was last moved.  This is helpful for placing all tiles in"
         print "a word without pressing any arrow keys.  This option can also be toggled on and"
         print "off in a multinode game by typing @0F@-MOMENTUM@07@ on the chat input prompt."
         print
         Pause
         Cls
         print "@0F@Game Terminal Requirements@08@:@0F@"
         print
         print "PSScrabble@07@ is an extremely ANSI intensive game.  If your terminal program"
         print "does not fully comply with the PC ANSI standard, you may not see the screen"
         print "correctly.  If you are using Windows, we recommend getting a fully ANSI"
         print "compliant terminal program, such as Qmodem Pro, ZOC, CRT or NetTerm.  The"
         print "game will also work perfectly with the free Wildcat! Navigator Clients"
         print "(Ask your Sysop for information on this).  We do not recommend using"
         print "non-color terminal programs, such as TELNET.EXE (Which comes with Windows"
         print "95 and later)."
         print
         print "@07@Much of the game interface depends on using arrow keys to navigate through"
         print "menu options.  Most terminal programs support this, however you may have"
         print "to enable an option called Doorway Mode.  Please consult your terminal"
         print "program's help documentation for information on how to active this mode."
         print "If your terminal program does not support this, you can also use the"
         print "keys 4, 6, 8, 2 on your numeric keypad to use the left arrow, right arrow,"
         print "up arrow and down arrow respectively.  Please note you will need to turn"
         print "on Num Lock to use these keys."
         print
         Pause
         Cls
         print "@0F@Other Notes@08@:@07@"
         print
         print "We suggest reading the Help Section titled User Interface to learn how to"
         print "navigate through game options and use global commands.  If you are"
         print "unfamiliar with how to play the game of Scrabble(r), please read the Help"
         print "Section titled Game Rules."
         print
         print "Once again, welcome to the game and we hope you have fun!  If you have any"
         print "problems with the game, or wish to share your comments, please use the"
         print "Report A Bug feature on the Play Menu."
         print
         print "Thank you for playing and have fun!"
         print
         Pause
         Cls
         print "@0F@PSScrabble Game Settings"
         print Bar(24,0,8)
         print
         print "  @07@Maximum Active Games     @08@: @0F@";
         if cf.MaxActiveGames = 0 then
            print "Unlimited"
         else
            print cf.MaxActiveGames
         end if
         print "  @07@Maximum Games Per Player @08@: @0F@";
         if cf.MaxGamesPerPlayer = 0 then
            print "Unlimited"
         else
            print cf.MaxGamesPerPlayer
         end if
         print
         print "  @07@Maximum Incorrect Words Before Losing Turn @08@: @0F@";
         if cf.MaxIncorrectWords = 0 then
            print "Unlimited"
         else
            print cf.MaxIncorrectWords
         end if
         print "  @07@Maximum Idle Days Before Losing Turn       @08@: @0F@";
         if cf.MaxDaysIdle = 0 then
            print "Unlimited"
         else
            print cf.MaxDaysIdle
         end if
         print
         print "  @07@Days To Keep Finished Games @08@: @0F@";cf.KeepFinishedGames
         print
         Pause
      case HELP_USERINTERFACE
         Cls
         print "@0F@T@07@he @0F@PSScrabble User Interface@07@ is hopefully one of the most intuitive user"
         print "interfaces you'll find on Bulletin Board Systems.  Basically, all of"
         print "@0F@PSScrabble's@07@ features are tied together with lightbar driven menus.  All"
         print "options in these menus have highlighted accelerator keys that will allow"
         print "you to jump directly to that option.  You can press the accelerator key,"
         print "or use the up and down arrow keys to select an option with the blue bar"
         print "and press enter."
         print
         print "The section of the screen below the game board and menus is called the"
         print "@0F@Help Window@07@.  Any sort of system notifications or important information"
         print "will be displayed here.  This includes system pages, turn notifications,"
         print "new online game notifications, or information on players entering or leaving"
         print "the game.  It will also display possible menu options.  During a multinode"
         print "game, this will become the Chat Window for chatting with other players in"
         print "an online game."
         print
         print "The first two lines of the screen is the @0F@Game Board Key@07@.  This information"
         print "never changes.  It informs you which tiles on the game board have which"
         print "premium values.  It also indicates the point value of every letter tile"
         print "in the bag.  Letters that aren't listed are worth 1 point."
         print
         Pause
         Cls
         print "@07@From almost anywhere in the game, you can use @0F@Global Commands@07@.  Below is"
         print " a list of all Global Commands and what they do:"
         print
         print "     @0A@\ @08@- @0F@Pages another node on the BBS"
         print "@0A@CTRL+W @08@- @0F@Displays who is online the BBS"
         print "@0A@CTRL+R @08@- @0F@Refreshes the screen"
         print "@0A@CTRL+T @08@- @0F@Displays your time left online"
         print "   @0A@ESC @08@- @0F@Returns to the previous menu"
         print
         print "@07@The @0F@Play Hand@07@ menu and @0F@Join@08@/@0F@New Game@07@ menu are called @0F@Game Selection Menus@07@"
         print "and allow you to scroll through games with the right and left arrow keys."
         print
         print "In the @0F@Play Hand@07@ menu, you can scroll through games where it is your turn"
         print "in.  When you've selected a game you wish to play your hand in, press @0F@ENTER@07@."
         print
         print "In the @0F@Join@08@/@0F@New Game@07@ menu, you can scroll through the games that have open"
         print "spots for new players.  When you've selected a game you wish to join, press"
         print "@0F@ENTER@07@.  You can also press @0F@N@07@ to create a new game for others to join."
         print
         print "When you press @0F@N@07@ to start a new game, you'll be allowed to vote to start the"
         print "game @0F@As Soon As Possible@07@ (ASAP), or wait for more players.  As soon as the"
         print
         Pause
         Cls
         print "@07@majority of the players signed up to play in a game have voted to start, the"
         print "game will begin.  You can also change your vote by pressing @0F@ENTER@07@ on a game"
         print "you're signed up to play in."
         print
         print "When you use @0F@\@07@ to page a user on another node, you will be asked for the name"
         print "of the user on that node.  You cannot enter a node number.  As you type in the"
         print "user name, the program will ""AutoComplete"" a list of possible matches for you."
         print "When you see the name of the user you would like to page, simply press enter."
         print
         print "The @0F@Screen Refresh@07@ command, @0F@Time Left Display@07@ command and @0F@Who's Online@07@"
         print "command all use CTRL keys.  Hold down the @0F@CTRL@07@ key on your keyboard while"
         print "pressing the letter key.  Then let go of both keys.  These commands work"
         print "in any lightbar driven game menu, game selection menu, or while you're"
         print "playing your hand in an offline game or multinode game."
         print
         Pause
      case HELP_MAINMENU
         Cls
         print "@0F@PSScrabble Main Menu Help"
         print
         print "@0F@Play Hand @08@-"
         print
         print "   @07@The Play Hand option will let you scroll through a list of games where"
         print "   it is currently your turn.  Once you select Play Hand, simply use the right"
         print "   and left arrow keys to select which game you wish to play your hand in, and"
         print "   press the @0F@ENTER@07@ key.  If it isn't your turn in any games, you will"
         print "   get a message saying @08@- @0F@No Games To Play @08@-@07@."
         print
         print "@0F@Join/New Game @08@-"
         print
         print "   @07@The Join/New Game option will allow you to scroll thought a list of"
         print "   games that are currently waiting for more players before they can begin,"
         print "   or allow you to create a new game that others may join.  If there are"
         print "   currently games waiting for players, you will be able to select the one"
         print "   you wish to join by using the right and left arrow keys.  Once you find"
         print "   a game you wish to join, simply press the @0F@ENTER@07@ key.  At this"
         print "   point, you will vote whether you wish the game to start as soon as"
         print "   possible,or wait for more players.  If over half of the players vote"
         print
         Pause
         Cls
         print "   @0F@PSScrabble Main Menu Help @08@(@07@Continued@08@)"
         print
         print "   @07@to start as soon as possible, the game will begin.  The game will"
         print "   also begin automatically if there are 4 players in the game.  If you"
         print "   wish to create a @0F@New Game@07@, simply press the @0F@N@07@ key.  You"
         print "   will then be able to vote whether you wish the game to start as soon as"
         print "   possible, or wait for more players."
         print
         print "@0F@Scores/Status @08@-"
         print
         print "   @07@The Scores/Status menu will allow you to view information on what games"
         print "   are currently being played, find games that need playres, find games"
         print "   awaiting you to play your turn, and view top ten high score lists.  You"
         print "   will also be able to view a game that is currently in progress, just"
         print "   like you were playing in the game."
         print
         print "@0F@Multiplayer Menu @08@-"
         print
         print "   @07@The multiplayer menu is one of the most powerful features on a multinode"
         print "   bulletin board.  It allows you to play in real time against PSScrabble"
         print "   players on other nodes.  The core of the Multiplayer Menu is the Lobby."
         print "   The Lobby is basically a room that you enter to find other players"
         print
         Pause
         Cls
         print "   @0F@PSScrabble Main Menu Help @08@(@07@Continued@08@)"
         print
         print "   @07@interested in starting a game with you, or up to 3 other people.  When"
         print "   you enter the Lobby, you will be shown a list of current realtime games"
         print "   that are currently in progress, or waiting to start.  Each game will"
         print "   display the players in the game, and the current status of the game."
         print "   You can use the Right and Left arrow keys to select a game you wish"
         print "   to join.  You can also press the @0F@N@07@ key to start a new Multinode"
         print "   game.  If you start your own multinode game, you will become the @0F@Game"
         print "   Host@07@.  This means you will have the power to decide how many"
         print "   players can be in the game, who plays, and when the game starts."
         print "   When you have joined or created a multinode game, you will be shown the"
         print "   @0F@PSScrabble Multinode Game Control@07@.  This will display the game"
         print "   status, the current players in the game.  You will then be able to"
         print "   page other users on the BBS to ask them to join, or quit the game"
         print "   and return to the lobby.  The Game Host is able to kick users out"
         print "   of the game.  Once the Game Host decides to start the game, the"
         print "   game will begin.  If the Game Host leaves the game before the game"
         print "   has started, the second player will automatically become Game Host."
         print "      There are also several other options in the Multiplayer Menu.  You"
         print "   can find out more about them by selecting the Multiplayer Menu, and"
         print "   pressing the @0F@?@07@ key for help."
         Print
         Pause
         Cls
         print "   @0F@PSScrabble Main Menu Help @08@(@07@Continued@08@)"
         print
         print "@0F@Quit To BBS @08@-"
         print
         print "   @07@This option will exit PSScrabble and return you to the BBS.  Other"
         print "   players currently in the game will be notified that you have left."
         print
         Pause
      case HELP_SCORESMENU
         Cls
         print "@0F@Scores@08@/@0F@Status Menu@08@:"
         print
         print "@0F@T@07@he @0F@Scores@08@/@0F@Status Menu@07@ will allow you to check on offline game status, who's"
         print "playing in what games, and highest overall scores.  It will also allow you"
         print "to have a look at the game board of a game in the database."
         print
         print "Here are the options in the @0F@Scores@08@/@0F@Status Menu@07@ and what they do:"
         print
         print "@0F@Game Status @08@-@07@ Displays the game numbers of all currently active games (Games"
         print " that are under way and being played), game numbers of all games needing"
         print " players to start, game numbers for every game you are currently playing or"
         print " signed up to play in, and game numbers for all games which it is currently"
         print " your turn in."
         print
         print "@0F@Check Game In Progress @08@-@07@ Displays all active games and who is playing in"
         print " them.  Next to each player name will be that player's current score in the"
         print " game.  The highlighted name indicates whose turn it is in the game."
         print
         print "@0F@Winners Bulletin @08@-@07@ This displays the top ten players in three different"
         print " categories.  The first category is Top Scores.  This is the top ten"
         print " highest scores in all online or offline games either completed, or currently"
         print
         Pause
         Cls
         print " @07@under way.  The second category is Most Games Won.  This is the top ten"
         print " players who have won the most completed games.  The third category is the"
         print " top scoring words.  This is a list of the top ten highest scoring words"
         print " played in an online game or offline game.  The value of the word includes"
         print " any premium tiles used while placing that word."
         print
         print "@0F@View Game In Progress @08@-@07@ This allows you to actually see the game board of"
         print " all games currently in the database.  You will be able to see who is playing,"
         print " their scores, the number of tiles left in the bag, the Date the game was"
         print " started, and if the game is currently under way.  You can use the Right and"
         print " Left arrow keys to scroll through the list of games, or press J to jump"
         print " directly to a game number."
         print
         print "@0F@Quit To Main Menu @08@-@07@ This option will return you to the Play Menu."
         print
         Pause
      case HELP_MULTIPLAYERMENU
         Cls
         print "@0F@Multiplayer Menu@08@:"
         print
         print "@0F@T@07@he @0F@Multiplayer Menu@07@ provides different options for Interactive Multinode"
         print "Play.  It is the starting point to initialize a multinode game with another"
         print "node, or interact with other game players."
         print
         print "Here are the options in the @0F@Multiplayer Menu@08@:"
         print
         print "@0F@Enter Lobby @08@-@07@ The Lobby is a list of currently active online games.  Online"
         print " games, as opposed to offline games, take place in real time while all the"
         print " players of that game are currently online.  This allows users to interact"
         print " while they play, by chatting and seeing tiles appear on the game board as"
         print " they are placed by other players.  Once you enter the Lobby, a list of"
         print " currently active online games will appear.  There will be a blank box on"
         print " the screen if there are none.  You can then use the arrow keys to select"
         print " a multinode game you wish to join.  If the game is currently underway, you"
         print " will not be able to join, but just be able to become a ""spectator"" and"
         print " watch the game.  When you join a game waiting for players, the Multinode"
         print " Game Control will appear.  It will display the other players signed up to"
         print " play, let you leave the game, or page another node.  The player who starts"
         print
         Pause
         Cls
         print " @07@the game is known as the Game Host, and will be the one who decides when"
         print " the game will start.  The host is also able to remove players from the"
         print " game.  Once in the lobby, you can also press N to create a new Multinode"
         print " game.  You will then become the host of that game and it will appear in"
         print " the Lobby for other players to see.  A notice will be sent to other"
         print " players in the game telling them that you have created a new multinode"
         print " game and are requesting players.  If the host leaves the game before it"
         print " starts, the next player on the list will then become the new game host,"
         print " and acquire host powers.  If the host reenters the game, they are not"
         print " given their position as host back."
         print
         print "@0F@Challenge Player To Game @08@-@07@ This option will allow you to directly challenge"
         print " a player on another node for a one-on-one real time game.  Unlike games"
         print " created from the lobby, this is a two-player game and is directed at another"
         print " player specifically.  When you select this option, you will be presented"
         print " with a list of players currently in the game.  You can then type in a"
         print " player name to challenge that player.  You will then wait for that player"
         print " to either accept to reject your challenge.  You can also press ESC at any"
         print " time to abort the challenge and return to the multiplayer menu."
         print
         Pause
         Cls
         print "@0F@Who's In Game Now? @08@-@07@ This option will display a list of users on other"
         print " nodes that are currently in the game."
         print
         print "@0F@Quit To Main Menu @08@-@07@ This option will return you to the Play Menu."
         Pause
      case HELP_DURINGPLAY
         Cls
         print "@0F@During Play Help@08@:"
         print
         print "@0F@T@07@he @0F@Play Hand@07@ screen is the center of game play.  The same basic interface"
         print "applies to both offline and online games, and has several options."
         print
         print "At the top of the screen, you will see the @0F@Game Board Key@07@.  The top line"
         print "defines what color squares on the board have what premium values.  Just"
         print "below that, you will see the point values for all the letter tiles that"
         print "have a value over one point.  This will help you decide what letters to"
         print "try to use, and where to place them."
         print
         print "The main area of the screen contains two sections.  The left section"
         print "displays game information.  At the top of this section is a list of"
         print "players in the game, and their points.  Below that is the Tiles Left"
         print "display.  This shows how many tiles are left in the bag.  When this"
         print "number reaches zero, the game will end.  Below that is the Date Started."
         print "It shows the date this game was started.  At the bottom of the left section"
         print "are your tiles in hand.  These are the tiles you can place on the game"
         print "board.  When you place a tile, it will disappear from your hand, and appear"
         print "on the game board."
         print
         Pause
         Cls
         print "@07@The right section is the game board.  It will show an overhead view of the"
         print "game board, and the current tiles placed on the board."
         print
         print "To play your turn, use the arrow keys to maneuver the cursor around the"
         print "board.  You can use the @0F@Arrow Keys@07@, or the @0F@Numeric Keys@07@ on your keypad."
         print "You can also use @0F@1@07@, @0F@3@07@, @0F@7@07@ and @0F@9@07@ to move the cursor in diagonal directions."
         print "Pressing @0F@5@07@ will center the cursor to the middle of the game board."
         print
         print "When you place a tile on the game board, your cursor will automatically "
         print "advance to the next square in the direction of your cursor movement.  This"
         print "will help you form an entire word along a straight path without having to"
         print "move the cursor as you place tiles.  For this reason, it is best to move"
         print "the cursor in the direction you plan to place your word in, before you place"
         print "any tiles."
         print
         print "If you accidentally place a tile you want to remove and put back in your"
         print "hand, move the cursor to the desired tile and press the @0F@DEL@07@ key or the"
         print "@0F@SPACE BAR@07@."
         print
         Pause
         Cls
         print "@07@When you are satisfied with your tile placement, press the @0F@ENTER@07@ key to"
         print "end your turn.  Your score will be added and displayed to the left, and"
         print "you will be given the choice to finalize your play and end your turn, or"
         print "undo your play and try again."
         print
         print "To return to the play menu without completing your turn, press the @0F@ESC@0F@ key."
         print "You can also press the @0F@ENTER@07@ key if you have not placed any tiles on the"
         print "game board."
         print
         print "Here is a list of the other game options while playing your hand:"
         print
         print "@0A@! @08@- (@0F@Concede@08@)       : @07@When you concede, you drop out of the game and return your"
         print " tiles to the bag.  Once you do this, you cannot return to the game."
         print
         print "@0A@@ @08@- (@0F@Pass Turn@08@)     : @07@Use this to pass your turn without making a play.  It"
         print " will then become the next player's turn.  You will keep your same tiles "
         print " in hand, and will have to wait until it is your turn again before playing."
         print
         print "@0A@# @08@- (@0F@Shuffle Tiles@08@) : @07@This will shuffle the tiles in your hand into a"
         print " random order.  Use this to help look for possible words to form.  You can"
         print " press the # key as many times as you like."
         print
         Pause
         Cls
         print "@0A@% @08@- (@0F@Discard Tiles@08@) : @07@This feature will allow you to trade in tiles in your"
         print " hand for other tiles in the bag.  You can trade in between one and all of"
         print " your tiles.  When you press the @0F@%@07@ key, you will notice a set of arrows"
         print " highlighting the first tile in your hand.  You can use the @0F@Left@07@ or @0F@Right@07@"
         print " arrow keys to highlight the tile you wish to put back in the bag, and press"
         print " @0F@ENTER@07@ to select that tile.  Select as many tiles as you want to discard, or"
         print " press the @0F@!@07@ key to discard every tile in your hand.  When you are satisfied"
         print " with your selection, press @0F@SPACE BAR@07@.  Trading in any number of tiles will"
         print " cause you to pass your turn.  To exit Discard Tile mode without trading in"
         print " any tiles, press @0F@ESC@07@."
         print
         print "The following Global Commands will work during Play mode:"
         print
         print "@0F@CTRL@08@+@0F@W@08@ - @07@See who's on other nodes"
         print "@0F@CTRL@08@+@0F@R@08@ - @07@Redraw the screen"
         print "@0F@CTRL@08@+@0F@T@08@ - @07@Check your time left online"
         print "@0F@\@08@ - @07@Page another node"
         print
         Pause
      case HELP_MULTINODEGAMES
         Cls
         print "@0F@Multinode Game Play@08@:"
         print
         print "@0F@T@07@he Interface for Multinode games is based on the interface for offline"
         print "games, only everything happens in real time.  There are also a few more"
         print "multinode specific options during game play."
         print
         print "When a multinode game begins, the person who chose the highest tile will"
         print "go first.  This will be announced for everyone to see."
         print
         print "There are a few minor differences with the Game Information Display to the"
         print "left side of the screen in multinode games.  The user's whose turn it is will"
         print "be highlighted with a blue bar.  If this is you, the text will be blinking"
         print "until you press a key.  You will also hear a beep when it is your turn."
         print "Instead of Date Started, you will see Time Started."
         print
         print "When it is not your turn, you will have the option to talk, or to leave the"
         print "game.  You can talk simply by typing.  Press @0F@ESC@07@ to concede and leave the"
         print "game.  You can also use the same global commands available in offline games."
         print
         Pause
         Cls
         print "@07@When it is your turn, you will be able to place tiles just like in an"
         print "offline game.  You will also be able to press the @0F@$@07@ key to chat with other"
         print "players.  When you finish your turn, you will not be able to Undo it like"
         print "with offline games.  This is to keep the game moving fast."
         print
         print "You can press @0F@ENTER@07@ at any time during your turn to display the command help"
         print "in the Help Window."
         print
         print "@0F@Chat Commands@08@:"
         print
         print "@07@When chatting in a multinode game, there are many commands you can use."
         print "They are listed below:"
         print
         print "@0A@$ @08@- @07@Brings up Chat Prompt during your turn."
         print
         print "@0A@> @08@- @07@Directs the chat message to a certain player in the game.  Press the"
         print " @0F@>@07@ key at the beginning of your chat message to get the @0F@SPEAK TO@08@:@07@ prompt."
         print " You can then type either a player name, or a player's number.  The top"
         print " player in the Players List is player number one, and so on.  If you type"
         print " a player's name, you will have to press enter to confirm that player."
         print " Next, type your chat message or chat action you wish to direct at that"
         print " player, and press enter."
         print
         Pause
         Cls
         print "@0A@/ @08@- @07@Whispers to a certain player in the game.  Press the @0F@/@07@ key at the"
         print " beginning of your chat message to get the @0F@WHISPER TO@08@:@07@ prompt.  Just like"
         print " the @0F@SPEAK TO@08@:@07@ prompt, you can enter a player's name or number.  When you"
         print " whisper to another player, only that player will be able to see your"
         print " message.  When a player whispers a message to you, you'll see @03@(@0B@PRIV@03@)@07@ after"
         print " their name."
         print
         print "@0A@// @08@- @07@Pressing the @0F@/@07@ key twice at the beginning of your chat message will"
         print " page another node."
         print
         print "@0A@-MOMENTUM @08@- @07@Toggles Tile Placement Momentum on and off @08@(@07@See @0F@General Help@08@)"
         print
         print "@0F@Chat Actions@08@:"
         print
         print "@07@You can use one of the following words as your chat message to perform"
         print "that action:"
         print
         print "@07@*@0F@SMILE@08@, @07@*@0F@LAUGH@08@, @0F@THINK@08@, @0F@YAWN@08@, @0F@WHISTLE@08@, @0F@SIGH@08@, @0F@THUMB@08@, @07@*@0F@APPLAUD@08@, @0F@JOY@08@, @0F@WISH"
         print
         print "@07@The actions with an asterisks by them indict those actions can be"
         print """directed to"" another player.  To direct an action to another player, use"
         print "the @0F@>@07@ command, enter the player's name or number, and type in the action."
         print
         Pause
         Cls
         print "@07@You can also define your own chat actions by preceding the message with"
         print "the @0F@=@07@ sign.  Such as:"
         print
         print "@0F@=wishes he had a Q."
         print
         print "@07@Would display:"
         print
         print "@0F@<Your Name> wishes he had a Q."
         print
         print "@07@Where @0F@<Your Name>@07@ is, of course, your player name."
         print
         print "You can also use Wildcat! @ color codes to add color to your chat messages."
         print
         print "Chat messages cannot be more than 80 characters, including your name at"
         print "the beginning of the message.  This is to keep each message at one line,"
         print "so the chat window doesn't scroll too fast."
         print
         Pause
      case HELP_HOWTOPLAY
         cls
         print "@0F@I@07@n @0F@PSScrabble@07@, players form interlocking words crossword fashion on"
         print "the board using letter tiles of different values. Each player"
         print "competes for high score by taking advantage of the letter"
         print "values, as well as the premium squares on the board. In a"
         print "2-player game, a good player scores in the 300-400 point"
         print "range."
         print
         print "@0F@SETUP@08@:"
         print
         print "@0F@T@07@he player drawing the letter nearest the beginning of the alphabet"
         print "plays first. A blank tile supersedes all other tiles. The"
         print "exposed letters are then returned to the pool.  Each player then"
         print "receives seven new letters, which are placed on their rack."
         print
         Pause
         Cls
         print
         print "@0F@1@08@. @07@The first player combines two or more of his or her letters to form a"
         print "   word, and places it on the board to read either across or down with one"
         print "   letter on the center square. Diagonal words are not permitted."
         print
         print "@0F@2@08@.@07@ When a player completes a turn, the game will calculate the score and"
         print "   draw as many new letters as played, thus always keeping seven letters"
         print "   in his or her rack."
         print
         print "@0F@3@08@.@07@ Play passes to the next person down. The second player, and then each in"
         print "   turn, adds one or more letters to those already played to form new words."
         print "   All letters played in a turn must be placed in one row across or down the"
         print "   board, to form one complete word. If, at the same time, they touch others"
         print "   letters in adjacent rows, they must form complete words, crossword fashion,"
         print "   with all such letters. The player gets full credit for all words formed or"
         print "   modified on his or her turn."
         print
         Pause
         Cls
         print "@0F@4@08@.@07@ New words may be formed by:"
         print "   @0F@a@08@.@07@	Adding one or more letters to a word or letters already on the"
         print "        board."
         print "   @0F@b@08@.@07@	Placing a word at right angles to a word already on the board."
         print "        The new word must use one of the letters already on the board or"
         print "        must add a letter to it. (See Turns 2, 3 and 4 below.)"
         print "   @0F@c@08@.@07@	Placing a complete word parallel to a word already played so that"
         print "        adjacent letters also form complete words. (See Turn 5 below.)"
         print
         print "@0F@5@08@.@07@ No letter may be shifted after it has been played and the turn completed."
         print
         print "@0F@6@08@.@07@ The two ""Question Mark"" tiles may be used as any letters. It remains"
         print "   that letter for the rest of the game."
         print
         print "@0F@7@08@.@07@ A player may use a turn to exchange all, some, or none of the letters"
         print "   in his or her rack.  The discarded tiles are placed back in the bag."
         print
         print "@0F@8@08@.@07@ All words formed are verified against a built in dictionary.  In"
         print "   registered versions of the game, this will be the Official Scrabble"
         print "   Players Dictionary."
         print
         Pause
         Cls
         print "@0F@9@08@.@07@ ENDING THE GAME: The game ends when all letters have been drawn and one"
         print "   player uses his or her last letter; or when all possible plays have been"
         print "   made."
         print
         print "@0F@SCORING@08@:"
         print
         print "@0F@10@08@.@07@ A tally of each player's score is kept track of at the side of the board."
         print "    The score value of each letter is listed at the top of the screen.  The"
         print "    score value of a blank is zero."
         print
         print "@0F@11@08@.@07@ The score for each turn is the sum of the letter values in each word"
         print "    formed or modified on that turn, plus the additional points obtained"
         print "    from placing letters on Premium Squares."
         print
         print "@0F@12@08@.@07@ Premium Letter Squares: A light blue square doubles the score of a"
         print "    letter placed on it; a dark blue square triples the letter score."
         print
         Pause
         Cls
         print "@0F@13@08@.@07@ Premium Word Squares: The score for an entire word is doubled when"
         print "    one of its letters is placed on a pink square: it is tripled when"
         print "    one of its letters is placed on a red square. Include premiums for"
         print "    double or triple letter values, if any, before doubling or tripling"
         print "    the word score. If a word is formed that covers two premium word"
         print "    squares, the score is doubled and then re-doubled (4 times the letter"
         print "    count), or tripled and then re-tripled (9 times the letter count)."
         print "    NOTE: the center  square is a pink square, which doubles the score"
         print "    for the first word."
         print
         print "@0F@14@08@.@07@ Letter and word premiums count only on the turn in which they are"
         print "    played. On later turns, letters already played on premium squares count at"
         print "    face value."
         print
         print "@0F@15@08@.@07@ When a blank tile is played on a pink or red square, the value of the"
         print "    word is doubled or tripled, even though the blank itself has no score"
         print "    value."
         print
         print "@0F@16@08@.@07@ When two or more words are formed in the same play, each is scored."
         print "    The common letter is counted (with full premium value, if any) for each"
         print "    word. (See Turns 3, 4 and 5 below.)"
         print
         Pause
         Cls
         print "@0F@17@08@.@07@ Any player who plays seven tiles on a turn scores a premium of 50 points"
         print "    after totaling his or her score for the turn."
         print
         print "@0F@18@08@.@07@ UNPLAYED LETTERS: When the game ends, each player's score is reduced"
         print "    by the sum of his or her unplayed letters. In addition, if a player used"
         print "    all letters, the sum of the other players' unplayed letters is added to"
         print "    that player's score."
         print
         print "@0F@HOW TO WIN@08@:"
         print
         print "@0F@T@07@he player with the highest final score wins the game. In case of a tie, the"
         print "player with the highest score before adding or deducting unplayed letters"
         print "wins."
         print
         Pause
         Cls
         print "@0F@EXAMPLES OF WORD FORMATION AND SCORING@08@:"
         print
         print "@0F@I@07@n the following, the words added on five successive turns are shown in"
         print "@0F@WHITE@07@ type. The scores shown are the correct scores if the letter @0F@R@07@ is placed"
         print "on the center square. In Turn 1, count @0F@HORN@07@: in Turn 2, @0F@FARM@07@; in Turn 3,"
         print "@0F@PASTE@07@ and @0F@FARMS@07@; in Turn 4, @0F@MOB@07@, @0F@NOT@07@ and @0F@BE@07@; in Turn 5, @0F@BIT@07@, @0F@PI@07@ and @0F@AT@07@."
         print
         print "@0F@Turn  1   Turn  2   Turn  3   Turn  4   Turn  5"
         print "@07@Score @0F@14  @07@Score @0F@9   @07@Score @0F@25  @07@Score @0F@16  @07@Score @0F@15"
         print Bar(48,0,15)
         print "             @0F@F@07@         F         F         F"
         print "             @0F@A@07@         A         A         A"
         print " @0F@HO@0B@R@0F@N@07@      HO@0F@R@07@N      HORN      HOR@0F@N@07@      HORN"
         print "             @0F@M@07@         M         @0F@MOB@07@       MOB"
         print "                     @0F@PASTE@07@     PAS@0F@TE@07@     @0F@PA@07@STE"
         print "                                        @0F@BIT@07@"
         print Bar(48,0,8)
         print
         Pause
         Cls
      case SYSOPHELP_CONFIGMANAGER
         Cls
         Print "@0F@Config Manager Help@08@:@07@"
         Print
         print "To get to the Config Manager, press @0F@*@07@ from the Play Menu."
         print
         Print "Here are the different options in the Config Manager and what they do:"
         Print
         Print "@03@[ @0F@1@03@]  @0F@Maximum Active Games        @08@: @0F@10"
         Print
         Print "@07@This number defines how many currently active games can exist at one time."
         Print "This does not include games that have ended.  Once this number has been"
         Print "reached, users cannot  create new games until one has ended.  Enter the"
         Print "value @0F@0@07@ for @0F@Unlimited Games@07@."
         Print
         Print "@03@[ @0F@2@03@]  @0F@Maximum Games Per Player    @08@: @0F@2"
         Print
         Print "@07@This number defines how many active games a single player can be involved"
         Print "in at one time.  Once this number has been reaches, that user will not be"
         Print "allowed to create or join a new game.  Enter the value @0F@0@07@ for @0F@Unlimited"
         Print "Games@07@."
         Print
         Pause
         Cls
         Print "@03@[ @0F@3@03@]  @0F@Max. Incorrect Words        @08@: @0F@0"
         Print
         Print "@07@This is the maximum number of invalid moves, or incorrect words, a player"
         Print "can make in an online or offline game before they automatically pass their"
         Print "turn.  Enter the value @0F@0@07@ if you do not wish to limit this."
         Print
         Print "@03@[ @0F@4@03@]  @0F@Days Idle Before Lose Turn  @08@: @0F@14"
         Print
         Print "@07@This is the number of days a player can wait to make their turn in an"
         Print "offline game until they automatically pass their turn.  Enter the value @0F@0@07@"
         Print "for @0F@Unlimited Days@07@."
         Print
         Print "@03@[ @0F@5@03@]  @0F@Show Intro On Startup       @08@: @0F@Yes"
         Print
         Print "@07@If you wish to display the PSScrabble Intro ANSI Screen whenever a user"
         Print "enters the game, select @0F@Yes@07@."
         Print
         Print "@03@[ @0F@6@03@]  @0F@Show Game Status On Startup @08@: @0F@Yes"
         Print
         Print "@07@If you wish to display the Game Status screen whenever a user enters the"
         Print "game, select @0F@Yes@07@."
         Print
         Pause
         Cls
         Print "@03@[ @0F@7@03@]  @0F@Allow Multinode Games       @08@: @0F@Yes"
         Print
         Print "@07@If you wish to allow users to create and participate in multinode,"
         Print "real-time games, select @0F@Yes@07@."
         Print
         Print "@03@[ @0F@8@03@]  @0F@Days To Keep Finished Games @08@: @0F@3"
         Print
         Print "@07@This is the number of days to keep finished games before new games will"
         Print "be able to replace them.  This does not mean the game will be deleted after"
         Print "this number of days, it just means that the game can be overwritten by new"
         Print "ones as they are created."
         Print
         Print "@03@[ @0F@9@03@]  @0F@Last User To Play           @08@: @0F@Joe User"
         Print
         Print "@07@This identifies the last user account on this BBS to use PSScrabble."
         Print
         Print "@03@[ @0F@T@03@]  @0F@Times PSScrabble Was Ran    @08@: @0F@996"
         Print
         Print "@07@This value indicates the number of times PSScrabble was used on this BBS."
         Print
         Pause
         Cls
         Print "@03@[ @0F@A@03@]  @0F@ANSI High Scores Bulletin   @08@: @0F@c:\wc5\bull\bull1.bbs"
         Print
         Print "@07@This is the complete path and filename to create the high scores bulletin."
         Print "If you do not wish to create an ANSI high scores bulletin, leave this value"
         Print "blank."
         Print
         Print "@03@[ @0F@B@03@]  @0F@ANSI Game Status Bulletin   @08@: @0F@c:\wc5\bull\bull2.bbs"
         Print
         Print "@07@This is the complete path and filename to create a game status bulletin."
         Print "If you do not wish to create an ANSI game status bulletin, leave this value"
         Print "blank."
         Print
         Print "@03@[ @0F@C@03@]  @0F@HTML High Scores Bulletin   @08@: @0F@c:\website\scrabble\hs.htm"
         Print
         Print "@07@This is the complete path and filename to create an HTML formatted high"
         Print "scores bulletin.  If you do not wish to create an HTML high scores"
         Print "bulletin, leave this value blank."
         Print
         Pause
         Cls
         Print "@03@[ @0F@R@03@]  @0F@Registration Code           @08@: @0F@Registered"
         Print
         Print "@07@Use this option to enter your Registration Code to enable Registered"
         Print "functions of the game.  You can purchase a registration code from Pisces"
         Print "Software.  Please read the PSScrabble sysop's manual for more information."
         Print
         Print "@03@[ @0F@S@03@]  @0F@Scrabble User Account Editor"
         Print
         Print "@07@Press @0F@S@07@ for the PSScrabble User Account Editor.  This editor will allow the"
         Print "sysop to edit user accounts in the game."
         Print
         Print "@03@[ @0F@G@03@]  @0F@Game Editor"
         Print
         Print "@07@Press @0F@G@07@ for the PSScrabble Game Editor.  This will allow the sysop to edit"
         Print "ongoing offline games."
         Print
         Print "@03@[ @0F@U@03@]  @0F@AutoUpdate Settings"
         Print
         Print "@07@Press @0F@U@07@ for the AutoUpdate Settings menu.  These settings control the built"
         Print "in AutoUpdate mechanism for automatically upgrading to new versions of the"
         Print "game as they are released.  To use AutoUpdate, a fulltime Internet connection"
         Print "is required."
         print
         Pause
      case SYSOPHELP_USEREDITOR
         Cls
         Print "@0F@PSScrabble User Account Editor Help@08@:"
         Print
         Print "@07@Here are the different options in the User Account Editor and what they do:"
         Print
         Print "@03@[ @0F@1@03@]  @0F@Wildcat! User ID            @08@: @0F@123"
         Print
         Print "@07@This number is the player's Wildcat! User ID number on the BBS.  It matches"
         Print "the User ID number in the Wildcat! user database."
         Print
         Print "@03@[ @0F@2@03@]  @0F@Player Name                 @08@: @0F@Joe User"
         Print
         Print "@07@This was the Logon Name the user was using at the time the account was"
         Print "created.  If the user logon name was changed after the account was created,"
         Print "this name will not be updated."
         Print
         Print "@03@[ @0F@3@03@]  @0F@Games Played                @08@: @0F@2"
         Print
         Print "@07@This is the number of games this user has participated in and completed."
         Print
         Pause
         Cls
         Print "@03@[ @0F@4@03@]  @0F@Games Won                   @08@: @0F@1"
         Print
         Print "@07@This is the number of games the user has won, out of the number of games"
         Print "played."
         Print
         Print "@03@[ @0F@5@03@]  @0F@Highest Score In A Game     @08@: @0F@255"
         Print
         Print "@07@This is the highest score the user has ended a game with."
         Print
         Print "@03@[ @0F@6@03@]  @0F@Highest Score In A Play     @08@: @0F@255"
         print
         print "@07@This is the highest score the user has received from a single play."
         print
         Print "@03@[ @0F@7@03@]  @0F@Total Scores                @08@: @0F@440"
         Print
         Print "@07@This is the total number of points this user has received in all games they"
         Print "have played in and completed."
         Print
         Pause
         Cls
         Print "@03@[ @0F@8@03@]  @0F@E-Mail Address              @08@: @0F@Local"
         Print
         Print "@07@This is the E-Mail address used to notify this player of their turn in an"
         Print "offline game.  If this is set to Local, it means the local BBS will be used"
         Print "to mail this user."
         Print
         Print "@03@[ @0F@9@03@]  @0F@Notify By Email             @08@: @0F@Yes"
         Print
         Print "@07@If this is set to Yes, this player will be notified by e-mail when it is"
         Print "their turn in an offline game."
         Print
         Print "@0F@Arrow Keys/Brackets"
         Print
         Print "@07@User the @0F@Arrow Keys@07@ or @0F@[@07@ and @0F@]@07@ brackets to scroll through all user accounts"
         Print "in the database."
         Print
         Print "@0F@S @08@- (@07@Search@08@)"
         Print
         Print "@07@This option will allow you to search for a user by name or Wildcat! User ID."
         Print
         Pause
         Cls
         Print "@0F@A @08@- (@07@Add@08@)"
         Print
         Print "@07@This option will allow you to add a new player to the database.  You can add"
         Print "a user by that user's logon name, or that user's Wildcat! User ID."
         Print
         Print "@0F@D @08@- (@07@Delete@08@/@07@Restore Player@08@)"
         Print
         Print "@07@This will delete a user in the database by marking their user account as"
         Print "deleted.  The account will not actually be deleted until a new account is"
         Print "created that takes the place of this user's record.  Until then, it is"
         Print "possible to undelete this record by pressing the @0F@D@07@ key again."
         print
         Pause
      case SYSOPHELP_GAMEEDITOR
         Cls
         Print "@0F@Game Editor Help@08@:"
         Print
         Print "@07@Here are the different options in the Game Editor and what they do:"
         Print
         Print "@03@[ @0F@1@03@]  @0F@Open Game?                  @08@: @0F@No"
         Print
         Print "@07@If this is set to @0F@Yes@07@, the game is currently waiting for more players"
         Print "before it can begin."
         Print
         Print "@03@[ @0F@2@03@]  @0F@Being Played?               @08@: @0F@No"
         Print
         Print "@07@If this is set to @0F@Yes@07@, the first player has already made the first move."
         Print
         Print "@03@[ @0F@3@03@]  @0F@Who's Turn                  @08@: @0F@1"
         Print
         Print "@07@This signifies the number of the player whose turn it is."
         Print
         Print "@03@[ @0F@4@03@]  @0F@Total Plays So Far          @08@: @0F@26"
         Print
         Print "@07@This is the number of plays that have occurred in the game so far."
         Print
         Pause
         Cls
         Print "@03@[ @0F@5@03@]  @0F@Number Of Players           @08@: @0F@2"
         Print
         Print "@07@This is the number of players who are currently signed up, or playing in"
         Print "the game."
         Print
         Print "@03@[ @0F@6@03@]  @0F@Date Completed              @08@: @0F@5/1/99"
         Print
         Print "@07@This is the date the game was completed.  If it has not yet been completed,"
         Print "this value will be @0F@N/A@07@."
         Print
         Print "@03@[ @0F@7@03@]  @0F@Date Started                @08@: @0F@5/1/99"
         Print
         Print "@07@This is the date the game was started.  If it has not yet been started,"
         Print "this value will be @0F@N/A@07@."
         Print
         Print "@03@[ @0F@8@03@]  @0F@Finished?                   @08@: @0F@Yes"
         Print
         Print "@07@If this is set to @0F@Yes@07@, the game is already finished."
         Print
         Pause
         Cls
         Print "@03@[ @0F@9@03@]  @0F@Number Of Tiles In Bag      @08@: @0F@0"
         Print
         Print "@07@This is the currently number of tiles left in the bag.  When this value"
         Print "reaches @0F@0@07@, the game will end on the next play."
         Print
         Print "@03@[ @0F@A@03@]  @0F@Total Score                 @08@: @0F@813"
         Print
         Print "@07@This is the sum of the scores for all players in the game."
         Print
         Print "@03@[ @0F@B@03@]  @0F@Edit Tiles In Bag"
         Print
         Print "@07@This option will allow you to edit the tiles left in the bag."
         Print
         Print "@03@[ @0F@C@03@]  @0F@Edit Players In Game"
         Print
         Print "@07@This option will allow you to edit the attributes of the different players"
         Print "in the game."
         Print
         Print "@03@[ @0F@D@03@]  @0F@Edit Game Board"
         Print
         Print "@07@This option will allow you to modify the tiles on the game board itself."
         Print
         Pause
         Cls
         Print "@0F@Arrow Keys/Brackets"
         Print
         Print "@07@Use the @0F@Arrow Keys@07@ or @0F@[ or @0F@]@07@ brackets to select a game in the database to"
         Print "edit.  You can also press @0F@J@07@ to jump directly to a game number."
         Print
         Print "@0F@! @08@(@07@Toggle View@08@)"
         Print
         Print "@07@To the right of the game editing options, you will see the game view.  You"
         Print "can toggle this view between the players in the game and their scores, or"
         Print "a thumbnail view of the game board itself."
         print
         Pause
      case SYSOPHELP_TILEEDITOR
         Cls
         Print "@0F@Tile Editor Help@08@:"
         Print
         Print "@07@The tile editor allows you to edit the tiles left in the Tile Bag.  You can"
         Print "remove tiles, change letters of tiles, or add tiles to the bag."
         Print
         Print "To select a tile to modify, use the arrow keys to move the cursor to the"
         Print "desired tile.  To change the letter of that tile, simply type the new letter,"
         Print "or press the @0F@?@07@ key to mark that tile as a Wildcard tile.  To remove"
         Print "a tile, press the @0F@DEL@07@ key or @0F@SPACE BAR@07@."
         Print
         Print "To add a new tile to the bag, move the cursor to a blank tile, and enter"
         Print "a new tile value.  When you are done, you can press @0F@ENTER@07@ to save your "
         Print "changes and exit the tile editor, or press @0F@ESC@07@ to undo changes.  When you"
         Print "leave the tile editor, the bag will be ""compressed"" so blank tiles are at"
         Print "the end."
         Print
         Print "If you modify any tiles, you will be prompted if you want to reset the"
         Print """Number of Tiles In Bag"" count.  If you choose @0F@Yes@07@, the tiles in the bag"
         Print "will be recounted and applied to the @0F@Number Of Tiles In Bag@07@ field for that"
         Print "game."
         print
         Pause
      case SYSOPHELP_PLAYERSINGAMEEDITOR
         Cls
         Print "@0F@Players In Game Editor Help@08@:"
         Print
         Print "@07@When you enter the Players In Game editor, you must first select the number"
         Print "of a player you wish to edit.  Displayed, are each player in the game and"
         Print "their score.  To add a new player to a game, select the first number with a"
         Print "value of @0F@None@07@."
         Print
         Print "When you select a player, you will be shown a menu with the following"
         Print "options:"
         Print
         Print "@03@[ @0F@1@03@]  @0F@Wildcat! ID   @08@:@0F@ 1 @08@(@07@JOE USER@08@)"
         Print
         Print "@07@This is the Wildcat! ID for this player, and their Wildcat! user name in"
         Print "parenthesis."
         Print
         Print "@03@[ @0F@2@03@]  @0F@Last Played   @08@: @0F@5/14/99"
         Print
         Print "@07@This is the date the user has last played his turn in the game."
         Print
         Pause
         Cls
         Print "@03@[ @0F@3@03@]  @0F@Score         @08@: @0F@185"
         Print
         Print "@07@This is the current score the user has in the game."
         Print
         Print "@03@[ @0F@4@03@]  @0F@Tiles In Hand @08@: @0F@TAKUWQ"
         Print
         Print "@07@This is the tiles the user currently has in their hand."
         Print
         Print "@03@[ @0F@5@03@]  @0F@Start Vote    @08@: @0F@Wait For More Players"
         Print
         Print "@07@When a new game is started, each player votes whether to start as soon as"
         Print "possible, or to wait for more players.  This option shows the player's"
         Print "decision."
         Print
         Print "@03@[ @0F@6@03@]  @0F@Best Word     @08@: @0F@PISCES"
         Print
         Print "@07@This is the highest scoring word this player has played in this current"
         Print "game."
         Print
         Pause
         Cls
         Print "@03@[ @0F@7@03@]  @0F@Best Score    @08@: @0F@31"
         Print
         Print "@07@This is the number of points received for the best word in option 6."
         Print
         Print "@03@[ @0F@R@03@]  @0F@Remove User From Game (Concede)"
         Print
         Print "@07@Pressing this will toggle the user's participation in the game.  Pressing"
         Print "@0F@R@07@ will cause the user to concede from the game.  Pressing @0F@R@07@ again will allow"
         Print "the user to rejoin the game."
         Print
         Print "@03@[ @0F@W@03@]  @0F@Wildcat! User Editor"
         Print
         Print "@07@This option will spawn the Wildcat! User Editor and allow you to edit this"
         Print "player's BBS record in the user database."
         Print
         Print "@03@[ @0F@S@03@]  @0F@Scrabble User Account Editor"
         Print
         Print "@07@This option will spawn the PSScrabble Account Editor and allow you to edit"
         Print "this player's PSScrabble Game Account."
         print
         Pause
      case SYSOPHELP_GAMEBOARDEDITOR
         Cls
         Print "@0F@PSScrabble Game Board Editor Help@08@:@07@"
         Print
         Print "The Game Board Editor will allow you to actually modify the tiles on the"
         Print "boards of active games.  When you enter the game editor, you will see a"
         Print "view much like the @0F@View Game In Progress@07@ option in the @0F@Scores Menu@07@."
         Print
         Print "To select a square on the game board to modify, use the @0F@Arrow Keys@07@ to move"
         Print "the cursor to the desired square.  You can then press a @0F@Letter Key@07@ to"
         Print "place a letter on the game board.  You can press @0F@SPACE BAR@07@ or @0F@DEL@07@ to"
         Print "remove a tile from the game board.  Placing or removing tiles on the game"
         Print "board will not affect the tiles in the bag."
         Print
         Print "When you are done editing, press the @0F@ENTER@07@ key to save your changes and"
         Print "exit the Game Board Editor.  To undo your changes, press the @0F@ESC@07@ key."
         print
         Pause
      case SYSOPHELP_AUTOUPDATECONFIG
         Cls
         Print "@0F@AutoUpdate Settings Help@08@:"
         Print
         Print "@07@The AutoUpdate System will allow you to automatically upgrade the game over"
         Print "the Internet.  This menu controls the settings for this feature."
         Print
         Print "@03@[ @0F@1@03@]  @0F@Path To Scrabble.wcx        @08@: @0F@Auto-Detect"
         Print
         Print "@07@This is the full path to the scrabble.wcx file.  This is usually @0F@c:\wc5@07@ on"
         Print "most systems.  Do not end the path in a trailing backslash.  If you enter"
         Print "a blank value, PSScrabble will attempt to automatically detect the path to"
         Print "this file by reading the Windows registry.  This method may be inaccurate"
         Print "if you run your BBS on multiple computers on a network.  When you choose"
         Print "to AutoDetect, it will ask you if you wish to test the feature by looking"
         Print "for the scrabble.wcx.  It will then tell you if it was successful or not."
         Print "If PSScrabble cannot find the path to scrabble.wcx, the AutoUpdate system"
         Print "will not work.  You cannot use Wildcat! wc:\ paths due to the way Wildcat!"
         Print "locks system files."
         Print
         Pause
         Cls
         Print "@03@[ @0F@2@03@]  @0F@Backup File                 @08@: @0F@c:\wc5\Data\ScrabbleWcx.bak"
         Print ""
         Print "@07@This is the complete path and filename to use as a backup file.  Every time"
         Print "PSScrabble upgrades to a new version, the old version will be renamed to"
         Print "the file name in this setting.  Enter a blank value if you don't wish to"
         Print "backup your Scrabble.wcx file when the game upgrades itself.  You cannot use"
         Print "Wildcat! wc:\ paths due to the way Wildcat! locks system files."
         Print
         Print "@03@[ @0F@3@03@]  @0F@Notify Sysop Of Upgrades?   @08@: @0F@Always"
         Print
         Print "@07@This option has three different settings:"
         Print
         Print "   @0F@Never @08@- @07@Never notify the sysop when the game is upgraded."
         Print "   "
         Print "   @0F@Always @08@- @07@Always send the sysop e-mail when the game is upgraded."
         Print "   "
         Print "   @0F@Major Updates Only @08@- @07@Only E-Mail the sysop when the game is upgraded to"
         Print "   a major release.  Major releases are decided by Pisces Software."
         Print
         Pause
         Cls
         Print "@03@[ @0F@4@03@]  @0F@Check For New Versions      @08@: @0F@Once A Day"
         Print
         Print "@07@This option has five different settings:"
         Print ""
         Print "   @0F@Manual @08@- @07@The game will never check for new versions off the Pisces"
         Print "   Software AutoUpdate Server.  To check for new versions and upgrade, the"
         Print "   sysop must manually check using the @0F@!@07@ key."
         Print
         Print "   @0F@Sysop Entry Only @08@- @07@The game will only check for new versions when a"
         Print "   user with Master Sysop level access enters the game."
         Print
         Print "   @0F@Every Time @08@- @07@The program will check for new versions every time someone"
         Print "   enters the game."
         Print
         Print "   @0F@Once A Day @08@- @07@The program will check for new versions every day, provided"
         Print "   a user enters the game each day."
         Print "   "
         Print "   @0F@Once A Week @08@- @07@The program will check for new versions once a week,"
         Print "   provided a user enters the game each week."
         Print
         Pause
         Cls
         Print "@03@[ @0F@5@03@]  @0F@Show Upgrade Progress       @08@: @0F@Full Status"
         Print
         Print "@07@This is the level of progress statistics to show the user while upgrading."
         Print "This option has four settings."
         Print
         Print "   @0F@Full Status @08@- @07@The program will display the bytes received, and the"
         Print "   percent the upgrade is of being complete."
         Print "   "
         Print "   @0F@Percent Only @08@- @07@The program will only display the percent the upgrade is"
         Print "   of being complete."
         Print "   "
         Print "   @0F@Byte Count Only @08@- @07@The program will only display the number of bytes it"
         Print "   has received."
         Print
         Print "   @0F@None @08@- @07@The program will simply say the game is being upgraded, and"
         Print "   nothing else."
         Print
         Print "@03@[ @0F@!@03@]  @0F@Check For New Version Now"
         Print
         Print "@07@Pressing this will check for a new version of PSScrabble off the Pisces"
         Print "Software AutoUpdate Server."
         print
         Pause
      case SYSOPHELP_SCRABBLEMANUAL
         Cls
         if not DisplayFile("wc:\Scrabble.Doc") then
            Print
            Print "  @0F@Scrabble.doc was not found."
            print
            print "  ";
         end if
         Pause
   end select
end function

function SelectPlayer as string
    dim RetInp as string = ""
    dim TotalInput as string = ""
    dim DefaultInput as string = ""
    dim ArrayLooper as integer
    dim col0 as byte
    dim row as byte
    dim col as byte
    
    col0 = (POS - 1)

    row = CSRLIN
    col = POS

    do
        RetInp = chr(ReadKey(100))
        if RetInp = chr(8) then
            if DefaultInput <> "" then
               print string(len(DefaultInput) - len(TotalInput), 32);
               PLocate row,col
            end if
            
            RetInp = ""
            if (col - 1) > col0 then
                TotalInput = LEFT(TotalInput, (len(TotalInput) - 1))
                dec(col)
                PLocate row, col
                print " ";
            end if
            
            if Trim(TotalInput) = "" then DefaultInput = ""
        end if
        if RetInp = chr(9) then
            RetInp = ""
        end if
        PLocate row, col
        if RetInp <> chr(13) then
            if RetInp <> "" then
               print RetInp;
               inc(col)
               TotalInput = TotalInput + RetInp
               RetInp = ""

               if DefaultInput <> "" then
                  if instr(DefaultInput, TotalInput) <> 1 then
                     if len(DefaultInput) - len(TotalInput) >= 0 then
                        print string(len(DefaultInput) - len(TotalInput), 32);
                        PLocate row,col
                     end if
                  end if
               end if
               
               DefaultInput = ""
               for ArrayLooper = 0 to high(PlayersOnline) - 1
                  if instr(ucase(PlayersOnline(ArrayLooper).PlayerName), ucase(TotalInput)) = 1 then
                     if len(TotalInput) >= 1 then
                        print "@0B@";right(PlayersOnline(ArrayLooper).PlayerName, len(PlayersOnline(ArrayLooper).PlayerName) - len(TotalInput));"@0F@";
                        DefaultInput = PlayersOnline(ArrayLooper).PlayerName
                        exit for
                     end if
                  end if
               next
            end if
        else
           for ArrayLooper = 0 to high(PlayersOnline) - 1
              if ucase(PlayersOnline(ArrayLooper).PlayerName) = ucase(TotalInput) then
                 DefaultInput = PlayersOnline(ArrayLooper).PlayerName
                 SelectPlayer = DefaultInput
                 exit function
              end if
           next
          
           if DefaultInput <> "" then 
              print "@0F@";right(DefaultInput, len(DefaultInput) - len(TotalInput));
              SelectPlayer = DefaultInput
              exit function
           end if
          
           if trim(TotalInput) = "" then exit function
          
           if trim(ucase(TotalInput)) = "L"  or trim(ucase(TotalInput)) = "LIST" then
              SelectPlayer = trim(ucase(TotalInput))
              exit function
           end if
        end if
    loop
    SelectPlayer = TotalInput
   print
end function

function Pause
   dim WhichPrompt as byte = int(rnd(-1 * timer) * 3) + 1
   
   select case WhichPrompt
      case 1
         print "@0B@[P@03@ress @0B@A@03@ny @0B@K@03@ey @0B@T@03@o @0B@C@03@ontinue@0B@]";
      case 2
         print "@0F@[P@07@ress @0F@A@07@ny @0F@K@07@ey @0F@T@07@o @0F@C@07@ontinue@0F@]";
      case else
         print "@09@[P@01@ress @09@A@01@ny @09@K@01@ey @09@T@01@o @09@C@01@ontinue@09@]";
   end select
   
   do while chr(ReadKey(100)) = ""
      if ReadChannel(0, msg) then
         ProcessGameControlMsg(msg)
      end if
      CheckTimeLeft
   loop
end function

function UpdateActivity(NewOur as TPlayerOnline)
   WriteChannel(GameControl, 0, SCRABBLE_UPDATE, NewOur, sizeof(NewOur))
end function

function NotifyGame(WhichGame as TOnlineGame)
   WriteChannel(GameControl, 0, SCRABBLE_NEWGAMENOTIFY, WhichGame, sizeof(WhichGame))
end function

function ChangeActivity(NewActivity as string)
   dim FindOnlinePlayer as short
   our.Activity = NewActivity
   
   for FindOnlinePlayer = 0 to high(PlayersOnline) - 1
      if ucase(PlayersOnline(FindOnlinePlayer).PlayerName) = ucase(our.PlayerName) then
         PlayersOnline(FindOnlinePlayer).Activity = our.Activity
         exit for
       end if
   next
   
   UpdateActivity(our)
   RefreshNodeData
end function

function GetPath as string
   if right(trim(ParamStr(1)), 1) <> "\" then
      GetPath = trim(ParamStr(1)) + "\"
   else
      GetPath = trim(ParamStr(1))
   end if
end function

function Regged as boolean
   Regged = true
end function

function OpenSpot(WhichGame as TGame, Col as byte, Row as byte) as boolean
   if asc(WhichGame.Col(Col).Row(Row)) >= 65 and asc(WhichGame.Col(Col).Row(Row)) <= 90  or WhichGame.Col(Col).Row(Row) = "?" then
      OpenSpot = false
   else
      OpenSpot = true
   end if
end function

function InPlay(WhichPlay as TPlay, XCor as byte, YCor as byte) as boolean
   dim PlayFinder as byte
   
   InPlay = false
   if WhichPlay.LettersPlaced = 0 then
      InPlay = false
      exit function
   end if
   
   for PlayFinder = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(PlayFinder).XCor = XCor and WhichPlay.TilesPlaced(PlayFinder).YCor = YCor then
         InPlay = true
         exit for
      end if
   next
end function

function OkayPos(WhichGame as TGame, WhichPlay as TPlay, Col as byte, Row as byte) as boolean
   dim CheckForClearBoardRow as byte
   dim CheckForClearBoardCol as byte
   dim ClearBoard as boolean = true
   OkayPos = false

   for CheckForClearBoardRow = 0 to 14
      for CheckForClearBoardCol = 0 to 14
         if not OpenSpot(WhichGame, CheckForClearBoardCol, CheckForClearBoardRow) then
            if not InPlay(WhichPlay, CheckForClearBoardCol, CheckForClearBoardRow) then
               ClearBoard = false
               exit for
            end if
         end if
      next
      if ClearBoard = false then exit for
   next
   
   if ClearBoard then
      OkayPos = true
      exit function
   end if
   
   if Row - 1 >= 0 then
      if asc(WhichGame.Col(Col).Row(Row - 1)) >= 65 and asc(WhichGame.Col(Col).Row(Row - 1)) <= 90 or WhichGame.Col(Col).Row(Row - 1) = "?" then 
         if not InPlay(WhichPlay, Col, Row - 1) then
            OkayPos = true
            exit function
         end if
      end if
   end if

   if Row + 1 <= 14 then
      if asc(WhichGame.Col(Col).Row(Row + 1)) >= 65 and asc(WhichGame.Col(Col).Row(Row + 1)) <= 90 or WhichGame.Col(Col).Row(Row + 1) = "?" then
         if not InPlay(WhichPlay, Col, Row + 1) then
            OkayPos = true
            exit function
         end if
      end if
   end if

   if Col - 1 >= 0 then
      if asc(WhichGame.Col(Col - 1).Row(Row)) >= 65 and asc(WhichGame.Col(Col - 1).Row(Row)) <= 90 or WhichGame.Col(Col - 1).Row(Row) = "?" then
         if not InPlay(WhichPlay, Col - 1, Row) then
            OkayPos = true
            exit function
         end if
      end if
   end if

   if Col + 1 <= 14 then
      if asc(WhichGame.Col(Col + 1).Row(Row)) >= 65 and asc(WhichGame.Col(Col + 1).Row(Row)) <= 90 or WhichGame.Col(Col + 1).Row(Row) = "?" then
         if not InPlay(WhichPlay, Col + 1, Row) then
            OkayPos = true
            exit function
         end if
      end if
   end if
end function

function ClearHelpWindow as boolean
   PLocate 20, 1  : print string(80, 32);
   PLocate 21, 1  : Print string(80, 32);
   PLocate 22, 1  : Print string(80, 32);
   PLocate 23, 1  : Print string(80, 32);
   PLocate 24, 1  : Print string(80, 32);
   if TERM_25LINE then PLocate 25, 1  : Print string(80, 32);   
end function

function ClearLobbyWindow
   dim SideCounter as byte

   cls
   PLocate 2,1
   print "@0F@";CenterText("PSScrabble Multinode Lobby");
   PLocate 3,1
   print "@03@";chr(218);string(76, 196);chr(191);
   for SideCounter = 4 to 18
      PLocate SideCounter, 1
      print chr(179);
      PLocate SideCounter, 78
      print chr(179);
   next
   if high(OnlineGames) > 0 then PLocate 3, 58 : PLocate 3, 58 : print " @0F@Current Games@08@: @0B@";high(OnlineGames);
   PLocate 19,1
   print "@03@";chr(192);string(76, 196);chr(217)
   PLocate 20,1
   
   if high(OnlineGames) < 0 then
      print "@03@Press @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
   else
      if high(OnlineGames) = 1 then
         print "@03@Press @0B@Enter@03@ to join this game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
      else
         print "@03@Use the @0B@Arrow Keys@03@ to select a game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
      end if
   end if
end function

function ClearBox as boolean
   PLocate 5, 3  : print string(29, 32);
   PLocate 6, 3  : Print string(29, 32);
   PLocate 7, 3  : Print string(29, 32);
   PLocate 8, 3  : Print string(29, 32);
   PLocate 9, 3  : print string(29, 32);
   PLocate 10, 3 : Print string(29, 32);
   PLocate 11, 3 : Print string(29, 32);
   PLocate 12, 3 : Print string(29, 32);
   PLocate 13, 3 : Print string(29, 32);
   PLocate 14, 3 : Print string(29, 32);
   PLocate 15, 3 : Print string(29, 32);
   PLocate 16, 3 : Print string(29, 32);
   PLocate 17, 3 : Print string(29, 32);
   PLocate 18, 3 : Print string(29, 32);
   
   ClearBox = true
end function

function NumInput(DefaultInput as integer) as string
   color 15
   Dim I as string = ""
   Dim inp as string = ""
   dim col0 as byte = (POS - 1)
   dim row as byte, col as byte
   do while I <> chr(13)
      I = ucase(chr(ReadKey(100)))
      row = csrlin
      col = pos
      if I = chr(8) then
         I = ""
         if (col - 1) > col0 then
            inp = left(inp, (len(inp) - 1))
            dec(col)
            PLocate row, col
            print " ";
         end if
      end if
      if I = chr(9) then
         I = ""
      end if
      PLocate row, col
      if I <> chr(13) then
         if I <> "" and trim(str(val(I))) = trim(I) then
            print I;
            inp = inp + I
            I = ""
         end if
      end if
   loop
   if Trim(inp) = "" then
      print FormatNumber(DefaultInput);
      NumInput = Str(DefaultInput)
   else
      NumInput = inp
   end if
   print
end function

function WildcardInHand(WhichPlayer as TPlayer) as byte
   dim HandCounter as byte
   for HandCounter = 0 to 6
      if WhichPlayer.TilesInHand(HandCounter) = "?" then 
         WildcardInHand = HandCounter
         exit function
      end if
   next
   
   WildcardInHand = 7
end function

//***********************************************************************
//**                                                                   **
//**    Database/File Related Functions                                **
//**                                                                   **
//***********************************************************************

function WriteGame(GameToWrite as TGame) as boolean
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile > 0 then
      put #ScrabFile, lof(ScrabFile) + 1, GameToWrite
      WriteGame = true
      close #ScrabFile
   else
      WriteGame = false
   end if
end function

function InGame(WhichGame as TGame) as boolean
   dim Counter as byte
   InGame = false
   for Counter = 0 to 3
      if WhichGame.Player(Counter).Id = user.info.id then
         InGame = True
         exit function
      end if
   next
end function

function CountGames as integer
   dim ScrabFile as integer = Open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile > 0 then
      CountGames = lof(ScrabFile)
   end if
   close #ScrabFile
end function

function UpdateGame(GameToWrite as TGame) as boolean
   dim ScrabFile as integer = Open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile > 0 then
      put #ScrabFile, GameToWrite.GameNumber, GameToWrite
      UpdateGame = true
      close #ScrabFile
   else
      UpdateGame = false
   end if
end function

function CheckJoined(GameToCheck as TGame) as boolean
   dim CheckLooper as byte
   
   CheckJoined = false
   for CheckLooper = 0 to 3
      if GameToCheck.Player(CheckLooper).ID = user.info.id then
         CheckJoined = true
         exit for
      end if
   next
end function

function GetFirstOpenGame(WhichGame as TGame) as boolean
   dim ScrabFile as integer = Open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   
   GetFirstOpenGame = false
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.OpenGame then 
            WhichGame = TempGameStruct
            GetFirstOpenGame = true
            exit do
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
end function

function GetLastOpenGame(WhichGame as TGame) as boolean
   dim ScrabFile as integer = Open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   
   GetLastOpenGame = false
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.OpenGame then 
            WhichGame = TempGameStruct
            GetLastOpenGame = true
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
end function

function GetPrevOpenGame(WhichGame as TGame) as boolean
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer
   
   GetPrevOpenGame = false
   if ScrabFile > 0 then
      if WhichGame.GameNumber > 1 then
         GameCounter = WhichGame.GameNumber - 1
         do while GameCounter >= 1
            Get #ScrabFile, GameCounter, TempGameStruct
            if TempGameStruct.OpenGame then 
               WhichGame = TempGameStruct
               GetPrevOpenGame = true
               exit do
            end if
            dec(GameCounter)
         loop
      end if
   end if
   close #ScrabFile
end function

function GetNextOpenGame(WhichGame as TGame) as boolean
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer
   
   GetNextOpenGame = false
   if ScrabFile > 0 then
      if lof(ScrabFile) > WhichGame.GameNumber then
         GameCounter = WhichGame.GameNumber + 1
         do while not eof(ScrabFile)
            Get #ScrabFile, GameCounter, TempGameStruct
            if TempGameStruct.OpenGame then 
               WhichGame = TempGameStruct
               GetNextOpenGame = true
               exit do
            end if
            inc(GameCounter)
         loop
      end if
   end if
   close #ScrabFile
end function

function CountOpenGames as integer
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.OpenGame then inc(FoundSoFar)
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   CountOpenGames = FoundSoFar
end function

function CountActiveGames as integer
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.BeingPlayed then inc(FoundSoFar)
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   CountActiveGames = FoundSoFar
end function

function RefreshGame(WhichGame as TGame) as boolean
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = WhichGame.GameNumber
   
   RefreshGame = false
   if ScrabFile > 0 then
      Get #ScrabFile, GameCounter, WhichGame
      RefreshGame = true
   end if
   close #ScrabFile
end function

function ReadConfig
   dim ConfigFound as boolean
   
   WriteActivityLogEntry("Running Door PSScrabble")
   SetNodeActivity("PSScrabble")
   
   if trim(ParamStr(1)) = "" then
      cls
      Print "@0B@Error In Configuration"
      print
      print "@0F@You must specify a path as the first parameter to run PSScrabble.  This"
      print "path will be used to store PSScrabble game files.  You can define this path"
      print "in wcMenu by editing the option that runs PSScrabble, and specifying this"
      print "path in the @0B@Parameters@0F@ field.  This program will now exit."
      print Bar(35,0,9)
      print
      Pause
      end
   end if

   dim i as integer = open GetPath + "scrabble.cfg" for random len = len(TConfigFile)
   if i <= 0 then
      cls
      Print "@0B@Error In Configuration"
      print
      print "@0F@The path you entered in the command line appears to be invalid.  Make"
      print "sure the directory exists, and the drive letter is correct, then try"
      print "again."
      print
      print "If the BBS runs on multiple computers, you may have to use a UNC path"
      print "to refer to the PSScrabble directory on the network."
      print Bar(35,0,9)
      print
      Pause
      end
   end if
   
   get #i, 1, cf
   if lof(i) > 0 then 
      ConfigFound = true
   end if
   close #i
   
   if not ConfigFound then
      cls
      Print "@0B@PSScrabble First Time Setup"
      print
      print "@0F@Welcome to PSScrabble.  A configuration file was not found, therefore"
      print "we assume this is the first time you have ran this program.  A config file"
      print "(\wc5\data\scrabble.cfg) is now being generated using the default values."
      print "You may change these values by using the Configuration option off the"
      print "Play Menu.  If you are happy with this program, please consider"
      print "registering it.  Otherwise, please remove this program after 30 days."
      print "Thank you."
      print Bar(35,0,9)
      print
      Pause
    
      cf.MaxActiveGames = 10
      cf.MaxGamesPerPlayer = 2
      cf.MaxIncorrectWords = 0
      cf.MaxDaysIdle = 14
      cf.ShowIntro = true
      cf.ShowStatus = true
      cf.AllowMultinode = true
      cf.KeepFinishedGames = 3
      cf.LastUser = "No One Yet!"
      cf.TimesRun = 0
      cf.AnsiHighScores = ""
      cf.AnsiStatus = ""
      cf.RegCode = "UNREGISTERED"
      cf.GameVersion = "00/00/0000 00:00:00"
      cf.VersionCheckFreq = 3 'Once a day
      cf.BackupCodeBaseFile = "wc:\Data\ScrabbleWcx.Bak"
      cf.NotifySysopOfUpgrades = 1 'Always
      cf.CodeBasePath = ""
      cf.ShowUpgradeProgress = 1 'Full status
      GetCurrentDateTime(cf.LastRan)
      GetCurrentDateTime(cf.LastDateChecked)
      cf.EnableIBBS = false
      cf.IBBSServer = "gamenet.piscessoft.com"
      cf.IBBSPort = 99

      dim k as integer = open GetPath + "scrabble.cfg" for random len=sizeof(TConfigFile)
      if k > 0 then
         put #k, 1, cf
         close #k
      end if
   end if
   
   dim LookupPlayer as TPlayerRecord
   if not GetPlayerInfo(LookupPlayer) then
      cls
      Print "@0B@Welcome New Player!"
      print
      print "@0F@Welcome to PSScrabble.  According to our records, this is the first time"
      print "you've played on this system.  We have setup an account that will keep"
      print "track of the games you've played, how many games you've won and lost,"
      print "and other information.  If you need help at @0B@ANY MENU@0F@, you can press @0B@?@0F@."
      if not Regged then
         print "If you are happy with this program, please ask your sysop to support"
         print "the shareware system and register it."
      end if
      print "Thank you."
      print Bar(35,0,9)
      print
      Pause
   end if
   
   GetCurrentDateTime(cf.LastRan)
   WriteConfig
end function

function WriteConfig as boolean
   dim i as integer = open GetPath + "scrabble.cfg" for random len=sizeof(TConfigFile)
   if i > 0 then
      WriteConfig = true
      put #i, 1, cf
      close #i
   else
      WriteConfig = false
   end if
end function

function GetCurrentActiveGames as string
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as string = ""
   dim StartingPos as byte = pos
   dim NumberFound as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.BeingPlayed then
            inc(NumberFound)
            if NumberFound mod 15 = 0 then
               print
               PLocate CsrLin, StartingPos
            end if
            print str(GameCounter) + " ";
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   if NumberFound = 0 then Print "None"
   GetCurrentActiveGames = ""
end function

function GetGamesNeedingPlayers as string
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as string = ""
   dim StartingPos as byte = pos
   dim NumberFound as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.OpenGame then
            inc(NumberFound)
            if NumberFound mod 15 = 0 then
               print
               PLocate CsrLin, StartingPos
            end if
            print str(GameCounter) + " ";
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   if NumberFound = 0 then Print "None"
   GetGamesNeedingPlayers = ""
end function

function GetGamesPlaying as string
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as string = ""
   dim LookForPlayer as byte
   dim StartingPos as byte = pos
   dim NumberFound as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.NumPlayers - 1 >= 0 then
            for LookForPlayer = 0 to TempGameStruct.NumPlayers - 1
               if TempGameStruct.Player(LookForPlayer).ID = user.info.id then
                  inc(NumberFound)
                  if NumberFound mod 15 = 0 then
                     print
                     PLocate CsrLin, StartingPos
                  end if
                  print str(GameCounter) + " ";
                  exit for
               end if
            next
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   if NumberFound = 0 then print "None"
   GetGamesPlaying = ""
end function

function GetYourTurnInGames as string
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim TempGameStruct as TGame
   dim GameCounter as integer = 1
   dim FoundSoFar as string = ""
   dim StartingPos as byte = pos
   dim NumberFound as integer = 0
   
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.Player(TempGameStruct.WhosTurn).ID = user.info.id then 
            if TempGameStruct.BeingPlayed then
               inc(NumberFound)
               if NumberFound mod 15 = 0 then
                  print
                  PLocate CsrLin, StartingPos
               end if
               print str(GameCounter) + " ";
            end if
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
   
   if NumberFound = 0 then Print "None"
   GetYourTurnInGames = ""
end function

function GetGame(WhichGame as integer, GameStruct as TGame) as boolean
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim GameCounter as integer = 1
   dim TempGameStruct as TGame
   
   GetGame = false
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         Get #ScrabFile, GameCounter, TempGameStruct
         if TempGameStruct.GameNumber = WhichGame then
            GameStruct = TempGameStruct
            GetGame = true
            exit do
         end if
         inc(GameCounter)
      loop
   end if
   close #ScrabFile
end function

function GetTopScore(WhichPlace as byte, TopScoreStruct as THighScore) as boolean
   dim GetScoreFile as THighScoreFile
   
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   if ScoreFile <= 0 then
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Score = 0
      GetTopScore = false
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if Trim(GetScoreFile.TopScores(WhichPlace).PlayerName) <> "" then
      TopScoreStruct.PlayerName = GetScoreFile.TopScores(WhichPlace).PlayerName
      TopScoreStruct.Score = GetScoreFile.TopScores(WhichPlace).Score
      GetTopScore = true
   else
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Score = 0
      GetTopScore = false
   end if
   Close #ScoreFile
end function

function GetTopGamesWon(WhichPlace as byte, TopScoreStruct as THighGamesWon) as boolean
   dim GetScoreFile as THighScoreFile
   
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   if ScoreFile <= 0 then
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Games = 0
      GetTopGamesWon = false
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if Trim(GetScoreFile.TopGamesWon(WhichPlace).PlayerName) <> "" then
      TopScoreStruct.PlayerName = GetScoreFile.TopGamesWon(WhichPlace).PlayerName
      TopScoreStruct.Games = GetScoreFile.TopGamesWon(WhichPlace).Games
      GetTopGamesWon = true
   else
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Games = 0
      GetTopGamesWon = false
   end if
   Close #ScoreFile
end function

function GetTopWord(WhichPlace as byte, TopScoreStruct as THighWord) as boolean
   dim GetScoreFile as THighScoreFile
   
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   if ScoreFile <= 0 then
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Word = "None"
      GetTopWord = false
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if Trim(GetScoreFile.TopWords(WhichPlace).PlayerName) <> "" then
      TopScoreStruct.PlayerName = GetScoreFile.TopWords(WhichPlace).PlayerName
      TopScoreStruct.Word = GetScoreFile.TopWords(WhichPlace).Word
      GetTopWord = true
   else
      TopScoreStruct.PlayerName = "No One"
      TopScoreStruct.Word = "None"
      GetTopWord = false
   end if
   Close #ScoreFile
end function

function UpdateTopScores(TopScoreStruct as THighScore) as byte
   dim GetScoreFile as THighScoreFile
   dim FindSpot as byte
   dim MoveDown as byte
   dim HighScore as boolean = false
   dim ListedWhere as byte
   dim AlreadyListed as boolean = false
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   
   if ScoreFile <= 0 then
      UpdateTopScores = 255
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if TopScoreStruct.Score <= GetScoreFile.TopScores(9).Score then
      UpdateTopScores = 255
      Close #ScoreFile
      exit function
   end if
   
   HighScore = false
   for FindSpot = 0 to 9
      if TopScoreStruct.Score > GetScoreFile.TopScores(FindSpot).Score then 
         HighScore = true
         exit for
      end if
   next
   
   if not HighScore then
      UpdateTopScores = 255
      Close #ScoreFile
      exit function
   end if
   
   for MoveDown = 0 to 9
      if GetScoreFile.TopScores(MoveDown).PlayerName = TopScoreStruct.PlayerName then
         AlreadyListed = true
         ListedWhere = MoveDown
         exit for
      end if
   next
   
   if AlreadyListed then
      if GetScoreFile.TopScores(ListedWhere).Score >= TopScoreStruct.Score then
         Close #ScoreFile
         exit function
      end if
      for MoveDown = ListedWhere to 8
         GetScoreFile.TopScores(MoveDown) = GetScoreFile.TopScores(MoveDown + 1)
      next
      Clear GetScoreFile.TopScores(9)
   end if
      
   for MoveDown = 9 to FindSpot + 1 step -1
      GetScoreFile.TopScores(MoveDown) = GetScoreFile.TopScores(MoveDown - 1)
   next
   
   UpdateTopScores = FindSpot
   GetScoreFile.TopScores(FindSpot) = TopScoreStruct
   put #ScoreFile, 1, GetScoreFile
   Close #ScoreFile
end function

function UpdateTopGamesWon(TopScoreStruct as THighGamesWon) as byte
   dim GetScoreFile as THighScoreFile
   dim FindSpot as byte
   dim MoveDown as byte
   dim HighScore as boolean = false
   dim ListedWhere as byte
   dim AlreadyListed as boolean = false
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   
   if ScoreFile <= 0 then
      UpdateTopGamesWon = 255
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if TopScoreStruct.Games <= GetScoreFile.TopGamesWon(9).Games then
      UpdateTopGamesWon = 255
      Close #ScoreFile
      exit function
   end if
   
   HighScore = false
   for FindSpot = 0 to 9
      if TopScoreStruct.Games > GetScoreFile.TopGamesWon(FindSpot).Games then 
         HighScore = true
         exit for
      end if
   next
   
   if not HighScore then
      UpdateTopGamesWon = 255
      Close #ScoreFile
      exit function
   end if
   
   for MoveDown = 0 to 9
      if GetScoreFile.TopGamesWon(MoveDown).PlayerName = TopScoreStruct.PlayerName then
         AlreadyListed = true
         ListedWhere = MoveDown
         exit for
      end if
   next
   
   if AlreadyListed then
      if GetScoreFile.TopGamesWon(ListedWhere).Games >= TopScoreStruct.Games then
         Close #ScoreFile
         exit function
      end if
      for MoveDown = ListedWhere to 8
         GetScoreFile.TopGamesWon(MoveDown) = GetScoreFile.TopGamesWon(MoveDown + 1)
      next
      Clear GetScoreFile.TopGamesWon(9)
   end if
      
   for MoveDown = 9 to FindSpot + 1 step -1
      GetScoreFile.TopGamesWon(MoveDown) = GetScoreFile.TopGamesWon(MoveDown - 1)
   next
   
   UpdateTopGamesWon = FindSpot
   GetScoreFile.TopGamesWon(FindSpot) = TopScoreStruct
   put #ScoreFile, 1, GetScoreFile
   Close #ScoreFile
end function

function UpdateTopWord(TopScoreStruct as THighWord) as byte
   dim GetScoreFile as THighScoreFile
   dim FindSpot as byte
   dim MoveDown as byte
   dim HighScore as boolean = false
   dim ListedWhere as byte
   dim AlreadyListed as boolean = false
   dim ScoreFile as integer = open GetPath + "Scores.Dat" for random len=sizeof(THighScoreFile)
   
   if ScoreFile <= 0 then
      UpdateTopWord = 255
      exit function
   end if
   
   Get #ScoreFile, 1, GetScoreFile

   if TopScoreStruct.Points <= GetScoreFile.TopWords(9).Points then
      UpdateTopWord = 255
      Close #ScoreFile
      exit function
   end if
   
   HighScore = false
   for FindSpot = 0 to 9
      if TopScoreStruct.Points > GetScoreFile.TopWords(FindSpot).Points then 
         HighScore = true
         exit for
      end if
   next
   
   if not HighScore then
      UpdateTopWord = 255
      Close #ScoreFile
      exit function
   end if
   
   for MoveDown = 0 to 9
      if GetScoreFile.TopWords(MoveDown).PlayerName = TopScoreStruct.PlayerName then
         AlreadyListed = true
         ListedWhere = MoveDown
         exit for
      end if
   next
   
   if AlreadyListed then
      if GetScoreFile.TopWords(ListedWhere).Points >= TopScoreStruct.Points then
         Close #ScoreFile
         exit function
      end if
      for MoveDown = ListedWhere to 8
         GetScoreFile.TopWords(MoveDown) = GetScoreFile.TopWords(MoveDown + 1)
      next
      Clear GetScoreFile.TopWords(9)
   end if
      
   for MoveDown = 9 to FindSpot + 1 step -1
      GetScoreFile.TopWords(MoveDown) = GetScoreFile.TopWords(MoveDown - 1)
   next
   
   UpdateTopWord = FindSpot
   GetScoreFile.TopWords(FindSpot) = TopScoreStruct
   put #ScoreFile, 1, GetScoreFile
   Close #ScoreFile
end function

function GetPlayerInfo(WhichPlayer as TPlayerRecord) as boolean
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   dim RecordLookup as integer = 1
   dim TempRecHolder as TPlayerRecord
   dim FoundRec as boolean = false
   
   GetPlayerInfo = false
   if PlayerFile > 0 then
      do while not eof(PlayerFile)
         get #PlayerFile, RecordLookup, TempRecHolder
         if TempRecHolder.ID = user.info.id then
            WhichPlayer = TempRecHolder
            GetPlayerInfo = true
            FoundRec = true
            exit do
         end if
         inc(RecordLookup)
      loop
      
      if not FoundRec then
         WhichPlayer.ID = user.info.id
         WhichPlayer.PlayerName = UpperLower(user.info.name)
         WhichPlayer.GamesPlayed = 0
         WhichPlayer.GamesWon = 0
         WhichPlayer.HighestScore = 0
         WhichPlayer.TotalScores = 0
         WhichPlayer.NotifyEmail = ""
         WhichPlayer.DisableEmail = false
         WhichPlayer.DisableMomentum = false
         WhichPlayer.HighestScoringPlay = 0
         
         put #PlayerFile, lof(PlayerFile) + 1, WhichPlayer
      end if

      close #PlayerFile
   end if
end function

function UpdatePlayerInfo(WhichPlayer as TPlayerRecord) as boolean
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   dim RecordLookup as integer = 1
   dim TempRecHolder as TPlayerRecord
   
   UpdatePlayerInfo = false
   if PlayerFile > 0 then
      do while not eof(PlayerFile)
         get #PlayerFile, RecordLookup, TempRecHolder
         if TempRecHolder.ID = user.info.id then
            put #PlayerFile, RecordLookup, WhichPlayer
            UpdatePlayerInfo = true
            exit do
         end if
         inc(RecordLookup)
      loop
      
      close #PlayerFile
   end if
   
   catch err_fileopen
      print "Debug: "; GetLastError
end function

function UpdatePlayerRecordByOffset(RecordLookup as integer, EditPlayer as TPlayerRecord) as boolean
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   if PlayerFile > 0 then
      put #PlayerFile, RecordLookup, EditPlayer
      close #PlayerFile
      UpdatePlayerRecordByOffset = true
   else
      UpdatePlayerRecordByOffset = false
   end if
end function

function WriteScoresFile as boolean
   dim ScoresFile as integer = open trim(cf.AnsiHighScores) for output
   
   WriteScoresFile = false
   if ScoresFile >0 then
      dim GameCounter as integer
      dim PlayerCounter as byte
      dim TempGameStruct as TGame
      dim ListCounter as byte = 1
      dim TopScores as THighScore
      dim TopGamesWon as THighGamesWon
      dim TopWords as THighWord
   
      print #ScoresFile, "@CLS@"
      Print #ScoresFile, "  @0F@PSScrabble Top Players"
      if CountActiveGames = 0 then
         print #ScoresFile, ""
         print #ScoresFile, "@09@";Bar(75,0,9)
         print #ScoresFile, "  @0F@There are currently no active games.  Please create one."
         print #ScoresFile, "@01@";Bar(75,0,1)
         print #ScoresFile, ""
         print #ScoresFile, "  "
         close #ScoresFile
         exit function
      end if
   
      print #ScoresFile, "@09@";Bar(79,0,9)
      print #ScoresFile, "   @0F@";pad("Top Scores",22);pad("Most Games Won",22);pad("Top Scoring Words",22)
      print #ScoresFile, "@01@";Bar(79,0,1)
      
      for ListCounter = 0 to 9
         GetTopScore(ListCounter, TopScores)
         GetTopGamesWon(ListCounter, TopGamesWon)
         GetTopWord(ListCounter, TopWords)
         print #ScoresFile, "@07@";pad(str(ListCounter + 1), 2);" @09@";TopScores.PlayerName;"@08@";string(18-len(TopScores.PlayerName) + (3 - Len(str(TopScores.Score))), ".");"@0F@";TopScores.Score;
         print #ScoresFile, " @0D@";TopGamesWon.PlayerName;"@08@";string(18-len(TopGamesWon.PlayerName) + (3 - Len(str(TopGamesWon.Games))), ".");"@0F@";TopGamesWon.Games;
         print #ScoresFile, " @0C@";TopWords.PlayerName;"@08@";string(18-len(TopWords.PlayerName) + (14 - Len(TopWords.Word)), ".");"@0F@";left(TopWords.Word,15)
      next
   
      print #ScoresFile, ""
      print #ScoresFile, "@08@";Bar(79,0,8)
      print #ScoresFile, ""
      print #ScoresFile, "@08@Bulletin Was Generated By PSScrabble 1.0 By Mike Christensen"
      if not Regged then
         print #ScoresFile, "@0C@This program is @8C@UNREGISTERED@0C@!  Please ask your sysop to register it."
      end if
      WriteScoresFile = true
      close #ScoresFile
   end if
end function

function WriteHtmlScoresFile as boolean
   dim ScoresFile as integer = open trim(cf.HtmlScores) for output
   
   WriteHtmlScoresFile = false
   if ScoresFile >0 then
      dim GameCounter as integer
      dim PlayerCounter as byte
      dim TempGameStruct as TGame
      dim ListCounter as byte = 1
      dim TopScores as THighScore
      dim TopGamesWon as THighGamesWon
      dim TopWords as THighWord
   
      print #ScoresFile, "<html>"
      print #ScoresFile, "<head>"
      print #ScoresFile, "<title>PSScrabble High Scores List</title>"
      print #ScoresFile, "<META name=""description"" content=""PSScrabble High Scores and Top Players Display""></head>"
      print #ScoresFile, "<script language=""JavaScript"">"
      print #ScoresFile, "<!--"
      print #ScoresFile, ""
      print #ScoresFile, "var bName = navigator.appName;"
      print #ScoresFile, "var bVer = parseInt(navigator.appVersion);"
      print #ScoresFile, ""
      print #ScoresFile, "var NS4 = (bName == ""Netscape"" && bVer >= 4);"
      print #ScoresFile, "var IE4 = (bName == ""Microsoft Internet Explorer"" && bVer >= 4);"
      print #ScoresFile, "var NS3 = (bName == ""Netscape"" && bVer < 4);"
      print #ScoresFile, "var IE3 = (bName == ""Microsoft Internet Explorer"" && bVer < 4);"
      print #ScoresFile, ""
      print #ScoresFile, "window.error = null"
      print #ScoresFile, ""
      print #ScoresFile, "if(!IE3) {"
      print #ScoresFile, "   linkHomePageOff = new Image"
      print #ScoresFile, "   linkHomePageOn = new Image"
      print #ScoresFile, ""
      print #ScoresFile, "   linkHomePageOff.src = ""linkHomePage.gif"""
      print #ScoresFile, "   linkHomePageOn.src = ""linkHomePageOver.gif"""
      print #ScoresFile, "}"
      print #ScoresFile, ""
      print #ScoresFile, "function img_act(imgName) {"
      print #ScoresFile, "        if(!IE3) {"
      print #ScoresFile, "           imgon = eval(imgName + ""On.src"");"
      print #ScoresFile, "           document [imgName].src = imgon;"
      print #ScoresFile, "        }"
      print #ScoresFile, "}"
      print #ScoresFile, ""
      print #ScoresFile, "function img_inact(imgName) {"
      print #ScoresFile, "        if(!IE3) {"
      print #ScoresFile, "           imgOff = eval(imgName + ""Off.src"");"
      print #ScoresFile, "           document [imgName].src = imgOff;"
      print #ScoresFile, "        }"
      print #ScoresFile, "}"
      print #ScoresFile, ""
      print #ScoresFile, "// -->"
      print #ScoresFile, "</script>"
      print #ScoresFile, ""
      print #ScoresFile, "<BODY STYLE=""margin-top: 0px; margin-left: 0px; margin-right: 0px; margin-bottom:0px"" bgcolor=white text=black link=black vlink=black margin=0>"
      print #ScoresFile, "<BASEFONT FACE=""VERDANA,ARIAL,HELVETICA"" COLOR=""000000"">"
      print #ScoresFile, ""
      print #ScoresFile, "<table border=0 cellspacing=0 cellpadding=0 width=100%>"
      print #ScoresFile, "<tr><td align=left>"
      print #ScoresFile, "<table border=0 cellpadding=0 cellspacing=0 width=100%><tr>"
      print #ScoresFile, "<td align=left valign=top width=146 height=58 bgcolor=""#000000""><img src=""BlackLogo.jpg"" width=146 height=58 alt=""Pisces Software""></td>"
      print #ScoresFile, "<td align=left valign=top width=""100%"" height=58 bgcolor=""#000000"">&nbsp;</td><td align=right valign=top width=443 height=58 bgcolor=""#000000"">"
      print #ScoresFile, "<img src=""ScrabbleHeader.gif"" width=443 height=58 alt=""PSScrabble""></td>"
      print #ScoresFile, "<td align=left valign=top width=2 height=58 bgcolor=""#000000"">&nbsp;</td></tr><tr>"
      print #ScoresFile, "<td colspan=5 bgcolor=""#FFFFFF"" width=100% height=1></td></tr></table>"
      print #ScoresFile, "</td></tr><tr><td bgcolor=""#FFFFFF"" height=21 width=""100%""><table border=0 cellpadding=0 cellspacing=0 width=""100%"" height=21>"
      print #ScoresFile, "<tr>"
      print #ScoresFile, "<td width=""100%"">"
      print #ScoresFile, ""
      print #ScoresFile, "<table width=100% CELLPADDING=0 CELLSPACING=0 BORDER=0><tr width=100% bgcolor=black text=white valign=top><td valign=top>"
      print #ScoresFile, "<TABLE WIDTH=""100%"" CELLPADDING=0 CELLSPACING=0 BORDER=0>"
      print #ScoresFile, "<TR valign=middle>"
      print #ScoresFile, "<TD NOWRAP>"
      print #ScoresFile, "&nbsp;&nbsp;</td>"
      print #ScoresFile, "<td nowrap><font color=white face=arial size=1><b>PSScrabble High Scores Bulletin</b></font></td>"
      print #ScoresFile, "<td nowrap valign=middle><FONT COLOR=WHITE FACE=""Verdana, Arial, Helvetica"" SIZE=1><b>| "
      print #ScoresFile, "<a onMouseOver=""img_act('linkHomePage')"" onMouseOut=""img_inact('linkHomePage')"" href=""/"">"
      print #ScoresFile, "<img name=""linkHomePage"" src=""linkHomePage.gif"" border=0></a>&nbsp;&nbsp;</font></font></td>"
      print #ScoresFile, "</tr>"
      print #ScoresFile, "</table>"
      print #ScoresFile, "</td></tr></table>"
      print #ScoresFile, ""
      print #ScoresFile, "<TABLE WIDTH=""100%"" CELLPADDING=""0"" CELLSPACING=""0"" BORDER=""0"" bgcolor=white>"
      print #ScoresFile, "   <TR>"
      print #ScoresFile, "      <TD WIDTH=112 ALIGN=""LEFT"" VALIGN=""TOP"" ROWSPAN=""2""><IMG SRC=""HighScoresV.gif"" HEIGHT=""450"" WIDTH=""82"" BORDER=""0""></TD>"
      print #ScoresFile, "      <TD COLSPAN=5>&nbsp;</TD>"
      print #ScoresFile, "   </TR>"
      print #ScoresFile, "   <TR>"
      print #ScoresFile, "   <TD VALIGN=TOP>"
      print #ScoresFile, "   <p align=center>"
      print #ScoresFile, ""
      print #ScoresFile, "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=98%>"
      print #ScoresFile, "<TR>"
      print #ScoresFile, ""
      print #ScoresFile, "<TD WIDTH=19>&nbsp;</TD>"
      print #ScoresFile, ""
      print #ScoresFile, "<TD VALIGN=TOP WIDTH=100%>"
      print #ScoresFile, ""
      print #ScoresFile, "<table width=85%><tr><td>"
      print #ScoresFile, "<center>"
      print #ScoresFile, "<font size=1>"
      print #ScoresFile, "This bulletin was generated by <a href=""http://www.piscessoft.com/Scrabble"">PSScrabble 1.0</a><br>"
      print #ScoresFile, "(c) 1999 <a href=""mailto:support@piscessoft.com"">Mike Christensen</a> All Rights Reserved."
      print #ScoresFile, "<BR><hr width=85% height=1 color=#0000A5>"
      print #ScoresFile, "</font></center>"
      print #ScoresFile, "</td></tr></table>"
      
      dim FadeCode(10) as string * 8
      FadeCode(0) = "#EAEAEA"
      FadeCode(1) = "#EDEDED"
      FadeCode(2) = "#EEEEEE"
      FadeCode(3) = "#F1F1F1"
      FadeCode(4) = "#F3F3F3"
      FadeCode(5) = "#F5F5F5"
      FadeCode(6) = "#F7F7F7"
      FadeCode(7) = "#F9F9F9"
      FadeCode(8) = "#FBFBFB"
      FadeCode(9) = "#FFFFFF"    
      
      if CountActiveGames = 0 then
         print #ScoresFile, ""
         print #ScoresFile, "<table width=85%><tr><td><center><font face=arial size=2><b>There are currently no active games.  Please create one.</b></font></center></td></tr></table>"
         print #ScoresFile, ""
         print #ScoresFile, "</td></tr></table>"
         print #ScoresFile, "</td></tr></table></td></tr></table></td></tr></table></td></tr></table>"
         print #ScoresFile, "</body>"
         print #ScoresFile, "</html>"
         close #ScoresFile
         exit function
      end if
      
      print #ScoresFile, ""
      print #ScoresFile, "<table width=85%><tr><td>"
      print #ScoresFile, ""
      print #ScoresFile, "<table width=100% border=5><tr><td bgcolor=#88BBF0><font color=black face=arial size=2><b>#</td>"
      print #ScoresFile, "<td bgcolor=#88BBF0 nowrap><font color=black face=arial size=2><b>Top Scores</td>"
      print #ScoresFile, "<td bgcolor=#88BBF0 nowrap><font color=black face=arial size=2><b>Most Games Won</td><td bgcolor=#88BBF0 nowrap>"
      print #ScoresFile, "<font color=black face=arial size=2><b>Top Scoring Words</td></tr>"
        
      for ListCounter = 0 to 9
         GetTopScore(ListCounter, TopScores)
         GetTopGamesWon(ListCounter, TopGamesWon)
         GetTopWord(ListCounter, TopWords)

         print #ScoresFile, "<tr><td bgcolor=";FadeCode(ListCounter);"><font color=black face=arial size=1><b>";str(ListCounter + 1);"</td>"
         print #ScoresFile, "<td><table width=100%><tr><td><font color=";
         if TopScores.PlayerName <> "No One" then
            print #ScoresFile, "black";
         else
            print #ScoresFile, "red";
         end if
         print #ScoresFile, " face=arial size=1><b>";TopScores.PlayerName;"</td>"
         print #ScoresFile, "<td align=right><font color=black face=arial size=1><b>";str(TopScores.Score);"</td></tr></table></td>"
         print #ScoresFile, "<td><table width=100%><tr><td><font color=";
         if TopGamesWon.PlayerName <> "No One" then
            print #ScoresFile, "black";
         else
            print #ScoresFile, "red";
         end if
         print #ScoresFile, " face=arial size=1><b>";TopGamesWon.PlayerName;"</td>"
         print #ScoresFile, "<td align=right><font color=black face=arial size=1><b>";str(TopGamesWon.Games);"</td></tr></table></td>"
         print #ScoresFile, "<td><table width=100%><tr><td><font color=";
         if TopWords.PlayerName <> "No One" then
            print #ScoresFile, "black";
         else
            print #ScoresFile, "red";
         end if
         print #ScoresFile, " face=arial size=1><b>";TopWords.PlayerName;"</td>"
         print #ScoresFile, "<td align=right><font color=black face=arial size=1><b>";TopWords.Word;"</td></tr></table></td>"
         print #ScoresFile, "</tr>"
      next

      print #ScoresFile, "</td></tr></table>"
      print #ScoresFile, "</td></tr></table></td></tr></table></td></tr></table></td></tr></table>"
      print #ScoresFile, "</body>"
      print #ScoresFile, "</html>"
   
      WriteHtmlScoresFile = true
      close #ScoresFile
   end if
end function

function WriteStatusFile as boolean
   dim StatusFile as integer = open trim(cf.AnsiStatus) for output
   
   WriteStatusFile = false
   if StatusFile >0 then
      dim GameCounter as integer
      dim PlayerCounter as byte
      dim TempGameStruct as TGame
   
      Print #StatusFile, "@CLS@"
      Print #StatusFile, "  @0F@Status On Currently Active Games"
      if CountActiveGames = 0 then
         print #StatusFile, ""
         print #StatusFile, "@09@";Bar(75,0,9)
         print #StatusFile, "  @0F@There are currently no active games.  Please create one."
         print #StatusFile, "@01@";Bar(75,0,1)
         print #StatusFile, ""
         close #StatusFile
         exit function
      end if
   
      print #StatusFile, "@09@";Bar(75,0,9)
      print #StatusFile, ""
      print #StatusFile, "  @07@#    @0F@Player Name @08@(@07@Score@08@)"
      print #StatusFile, ""
      
      for GameCounter = 1 to CountGames
         clear TempGameStruct
         GetGame(GameCounter, TempGameStruct)
         if TempGameStruct.BeingPlayed then
            print #StatusFile, "  @03@";pad(str(GameCounter), 4);" ";
            for PlayerCounter = 0 to TempGameStruct.NumPlayers - 1
               if TempGameStruct.WhosTurn = PlayerCounter then
                  print #StatusFile, "@1B@";TempGameStruct.Player(PlayerCounter).PlayerName;"@03@ (@0F@";TempGameStruct.Player(PlayerCounter).Score;"@03@)  ";
               else
                  print #StatusFile, "@0B@";TempGameStruct.Player(PlayerCounter).PlayerName;"@03@ (@0F@";TempGameStruct.Player(PlayerCounter).Score;"@03@)  ";
               end if
            next
            print #StatusFile, ""
         end if
      next
      
      print #StatusFile, ""
      print #StatusFile, "  @0F@Highlighed name indicates current turn."
      print #StatusFile, "@01@";Bar(75,0,1)
      print #StatusFile, ""
      print #StatusFile, "@08@Bulletin Was Generated By PSScrabble 1.0 By Mike Christensen"
      if not Regged then
         print #StatusFile, "@0C@This program is @8C@UNREGISTERED@0C@!  Please ask your sysop to register it."
      end if
      WriteStatusFile = true
      close #StatusFile
   end if
end function

//***********************************************************************
//**                                                                   **
//**    Game Related Functions                                         **
//**                                                                   **
//***********************************************************************

function GetLetterValue(WhichLetter as string) as byte
   GetLetterValue = 0
   
   select case ucase(WhichLetter)
      case "B"  : GetLetterValue = 3
      case "C"  : GetLetterValue = 3
      case "D"  : GetLetterValue = 2
      case "F"  : GetLetterValue = 4
      case "G"  : GetLetterValue = 2
      case "H"  : GetLetterValue = 4
      case "J"  : GetLetterValue = 8
      case "K"  : GetLetterValue = 5
      case "M"  : GetLetterValue = 3
      case "P"  : GetLetterValue = 3
      case "Q"  : GetLetterValue = 10
      case "V"  : GetLetterValue = 4
      case "W"  : GetLetterValue = 4
      case "X"  : GetLetterValue = 8
      case "Y"  : GetLetterValue = 4
      case "Z"  : GetLetterValue = 10
      case "?"  : GetLetterValue = 0
      case else : if asc(ucase(WhichLetter)) >= 65 and asc(ucase(WhichLetter)) <= 90 then GetLetterValue = 1
   end select
end function

function GetPlaceValue(WhichPlay as TPlay, byval Row as byte, byval Col as byte) as byte //1) Dbl Wrd 2) Dbl Ltr 3) Tri Wrd 4) Tri Ltr
   inc(Row)
   inc(Col)
   
   dim TileLooper as byte
   dim ValidPremium as boolean = false
   for TileLooper = 0 to WhichPlay.LettersPlaced - 1
      ValidPremium = ValidPremium or (WhichPlay.TilesPlaced(TileLooper).XCor + 1 = Col and WhichPlay.TilesPlaced(TileLooper).YCor + 1 = Row)
   next
   
   if not ValidPremium then
      GetPlaceValue = 0
      exit function
   end if
   
   select case str(Row) + "," + str(col)
      case "1,1"
         GetPlaceValue = 3
      case "1,4"
         GetPlaceValue = 2
      case "1,8"
         GetPlaceValue = 3
      case "1,12"
         GetPlaceValue = 2
      case "1,15"
         GetPlaceValue = 3
      case "2,2"
         GetPlaceValue = 1
      case "2,6"
         GetPlaceValue = 4
      case "2,10"
         GetPlaceValue = 4
      case "2,14"
         GetPlaceValue = 1
      case "3,3"
         GetPlaceValue = 1
      case "3,7"
         GetPlaceValue = 2
      case "3,9"
         GetPlaceValue = 2
      case "3,13"
         GetPlaceValue = 1
      case "4,1"
         GetPlaceValue = 2
      case "4,4"
         GetPlaceValue = 1
      case "4,8"
         GetPlaceValue = 2
      case "4,12"
         GetPlaceValue = 1
      case "4,15"
         GetPlaceValue = 2
      case "5,5"
         GetPlaceValue = 1
      case "5,11"
         GetPlaceValue = 1
      case "6,2"
         GetPlaceValue = 4
      case "6,6"
         GetPlaceValue = 4
      case "6,10"
         GetPlaceValue = 4
      case "6,14"
         GetPlaceValue = 4
      case "7,3"
         GetPlaceValue = 2
      case "7,7"
         GetPlaceValue = 2
      case "7,9"
         GetPlaceValue = 2
      case "7,13"
         GetPlaceValue = 2
      case "8,1"
         GetPlaceValue = 3
      case "8,4"
         GetPlaceValue = 2
      case "8,8"
         GetPlaceValue = 1
      case "8,12"
         GetPlaceValue = 2
      case "8,15"
         GetPlaceValue = 3
      case "9,3"
         GetPlaceValue = 2
      case "9,7"
         GetPlaceValue = 2
      case "9,9"
         GetPlaceValue = 2
      case "9,13"
         GetPlaceValue = 2
      case "10,2"
         GetPlaceValue = 4
      case "10,6"
         GetPlaceValue = 4
      case "10,10"
         GetPlaceValue = 4
      case "10,14"
         GetPlaceValue = 4
      case "11,5"
         GetPlaceValue = 1
      case "11,11"
         GetPlaceValue = 1
      case "12,1"
         GetPlaceValue = 2
      case "12,4"
         GetPlaceValue = 1
      case "12,8"
         GetPlaceValue = 2
      case "12,12"
         GetPlaceValue = 1
      case "12,15"
         GetPlaceValue = 2
      case "13,3"
         GetPlaceValue = 1
      case "13,7"
         GetPlaceValue = 2
      case "13,9"
         GetPlaceValue = 2
      case "13,13"
         GetPlaceValue = 1
      case "14,2"
         GetPlaceValue = 1
      case "14,6"
         GetPlaceValue = 4
      case "14,10"
         GetPlaceValue = 4
      case "14,14"
         GetPlaceValue = 1
      case "15,1"
         GetPlaceValue = 3
      case "15,4"
         GetPlaceValue = 2
      case "15,8"
         GetPlaceValue = 3
      case "15,12"
         GetPlaceValue = 2
      case "15,15"
         GetPlaceValue = 3
      case else
         GetPlaceValue = 0
   end select
end function

function GetPlaceValueIgnore(byval Row as byte, byval Col as byte) as byte //1) Dbl Wrd 2) Dbl Ltr 3) Tri Wrd 4) Tri Ltr
   inc(Row)
   inc(Col)
      
   select case str(Row) + "," + str(col)
      case "1,1"
         GetPlaceValueIgnore = 3
      case "1,4"
         GetPlaceValueIgnore = 2
      case "1,8"
         GetPlaceValueIgnore = 3
      case "1,12"
         GetPlaceValueIgnore = 2
      case "1,15"
         GetPlaceValueIgnore = 3
      case "2,2"
         GetPlaceValueIgnore = 1
      case "2,6"
         GetPlaceValueIgnore = 4
      case "2,10"
         GetPlaceValueIgnore = 4
      case "2,14"
         GetPlaceValueIgnore = 1
      case "3,3"
         GetPlaceValueIgnore = 1
      case "3,7"
         GetPlaceValueIgnore = 2
      case "3,9"
         GetPlaceValueIgnore = 2
      case "3,13"
         GetPlaceValueIgnore = 1
      case "4,1"
         GetPlaceValueIgnore = 2
      case "4,4"
         GetPlaceValueIgnore = 1
      case "4,8"
         GetPlaceValueIgnore = 2
      case "4,12"
         GetPlaceValueIgnore = 1
      case "4,15"
         GetPlaceValueIgnore = 2
      case "5,5"
         GetPlaceValueIgnore = 1
      case "5,11"
         GetPlaceValueIgnore = 1
      case "6,2"
         GetPlaceValueIgnore = 4
      case "6,6"
         GetPlaceValueIgnore = 4
      case "6,10"
         GetPlaceValueIgnore = 4
      case "6,14"
         GetPlaceValueIgnore = 4
      case "7,3"
         GetPlaceValueIgnore = 2
      case "7,7"
         GetPlaceValueIgnore = 2
      case "7,9"
         GetPlaceValueIgnore = 2
      case "7,13"
         GetPlaceValueIgnore = 2
      case "8,1"
         GetPlaceValueIgnore = 3
      case "8,4"
         GetPlaceValueIgnore = 2
      case "8,8"
         GetPlaceValueIgnore = 1
      case "8,12"
         GetPlaceValueIgnore = 2
      case "8,15"
         GetPlaceValueIgnore = 3
      case "9,3"
         GetPlaceValueIgnore = 2
      case "9,7"
         GetPlaceValueIgnore = 2
      case "9,9"
         GetPlaceValueIgnore = 2
      case "9,13"
         GetPlaceValueIgnore = 2
      case "10,2"
         GetPlaceValueIgnore = 4
      case "10,6"
         GetPlaceValueIgnore = 4
      case "10,10"
         GetPlaceValueIgnore = 4
      case "10,14"
         GetPlaceValueIgnore = 4
      case "11,5"
         GetPlaceValueIgnore = 1
      case "11,11"
         GetPlaceValueIgnore = 1
      case "12,1"
         GetPlaceValueIgnore = 2
      case "12,4"
         GetPlaceValueIgnore = 1
      case "12,8"
         GetPlaceValueIgnore = 2
      case "12,12"
         GetPlaceValueIgnore = 1
      case "12,15"
         GetPlaceValueIgnore = 2
      case "13,3"
         GetPlaceValueIgnore = 1
      case "13,7"
         GetPlaceValueIgnore = 2
      case "13,9"
         GetPlaceValueIgnore = 2
      case "13,13"
         GetPlaceValueIgnore = 1
      case "14,2"
         GetPlaceValueIgnore = 1
      case "14,6"
         GetPlaceValueIgnore = 4
      case "14,10"
         GetPlaceValueIgnore = 4
      case "14,14"
         GetPlaceValueIgnore = 1
      case "15,1"
         GetPlaceValueIgnore = 3
      case "15,4"
         GetPlaceValueIgnore = 2
      case "15,8"
         GetPlaceValueIgnore = 3
      case "15,12"
         GetPlaceValueIgnore = 2
      case "15,15"
         GetPlaceValueIgnore = 3
      case else
         GetPlaceValueIgnore = 0
   end select
end function

function HighCol(WhichPlay as TPlay) as byte
   dim Looker as byte
   dim TempHighCol as byte = 0
   
   for Looker = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(Looker).XCor > TempHighCol then
         TempHighCol = WhichPlay.TilesPlaced(Looker).XCor
      end if
   next
   
   if TempHighCol < 0 then TempHighCol = 0
   
   HighCol = TempHighCol
end function

function LowCol(WhichPlay as TPlay) as byte
   dim Looker as byte
   dim TempLowCol as byte = 20
   
   for Looker = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(Looker).XCor < TempLowCol then
         TempLowCol = WhichPlay.TilesPlaced(Looker).XCor
      end if
   next
   
   if TempLowCol < 0 then TempLowCol = 0
   
   LowCol = TempLowCol
end function

function HighRow(WhichPlay as TPlay) as byte
   dim Looker as byte
   dim TempHighRow as byte = 0
   
   for Looker = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(Looker).YCor > TempHighRow then
         TempHighRow = WhichPlay.TilesPlaced(Looker).YCor
      end if
   next
   
   if TempHighRow < 0 then TempHighRow = 0
   
   HighRow = TempHighRow
end function

function LowRow(WhichPlay as TPlay) as byte
   dim Looker as byte
   dim TempLowRow as byte = 20
   
   for Looker = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(Looker).YCor < TempLowRow then
         TempLowRow = WhichPlay.TilesPlaced(Looker).YCor
      end if
   next
   
   if TempLowRow < 0 then TempLowRow = 0
   
   LowRow = TempLowRow
end function

function NearByVert(WhichGame as TGame, WhichTile as TTilePlaced) as boolean
   NearByVert = false
   select case WhichTile.YCor
      case 0
         if not OpenSpot(WhichGame, WhichTile.XCor, WhichTile.YCor + 1) then NearByVert = true
      case 14
         if not OpenSpot(WhichGame, WhichTile.XCor, WhichTile.YCor - 1) then NearByVert = true
      case else
         if not OpenSpot(WhichGame, WhichTile.XCor, WhichTile.YCor + 1) or not OpenSpot(WhichGame, WhichTile.XCor, WhichTile.YCor - 1) then NearByVert = true
   end select
end function

function NearByHoriz(WhichGame as TGame, WhichTile as TTilePlaced) as boolean
   NearByHoriz = false
   select case WhichTile.XCor
      case 0
         if not OpenSpot(WhichGame, WhichTile.XCor + 1, WhichTile.YCor) then NearByHoriz = true
      case 14
         if not OpenSpot(WhichGame, WhichTile.XCor - 1, WhichTile.YCor) then NearByHoriz = true
      case else
         if not OpenSpot(WhichGame, WhichTile.XCor + 1, WhichTile.YCor) or not OpenSpot(WhichGame, WhichTile.XCor - 1, WhichTile.YCor) then NearByHoriz = true
   end select
end function

function CheckWildcards(LostForWildcards as byte, WhichPlay as TPlay, XCor as byte, YCor as byte)
   dim TileLooper as byte
   dim WildcardThere as boolean = false
   dim WhichLetterHasWildcard as string = ""
   
   for TileLooper = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(TileLooper).XCor = XCor and WhichPlay.TilesPlaced(TileLooper).YCor = YCor then
         WhichLetterHasWildcard = WhichPlay.TilesPlaced(TileLooper).Letter
         if WhichPlay.TilesPlaced(TileLooper).Wildcard then
            WildcardThere = true
            exit for
         end if
      end if
   next
   
   if WildcardThere then
      LostForWildcards = LostForWildcards + GetLetterValue(WhichLetterHasWildcard)
   end if
end function

function VerifyPlay(WhichGame as TGame, WhichPlay as TPlay, ScoreIncrease as byte, WhichPlayer as byte) as boolean
   dim TestLined as byte
   dim FirstX as byte = WhichPlay.TilesPlaced(0).XCor
   dim FirstY as byte = WhichPlay.TilesPlaced(0).YCor
   dim ValidX as boolean = true
   dim ValidY as boolean = true
   dim ValidTilePos as boolean = false
   dim WhichDirection as boolean //False = Vertical true = Horizontal
   dim WordsFound() as string * 15
   dim PremiumUsed() as string * 15
   dim NumWordsFormed as byte = 0
   
   VerifyPlay = true
   
   if WhichGame.PlayNumber = 0 and OpenSpot(WhichGame, 7, 7) then
      ClearHelpWindow
      PLocate 20,3          
      print "@03@First play must use @0B@Center Square@03@.  Press any key."
      sleep(2500)
      do while chr(ReadKey(100)) = ""
         CheckTimeLeft
      loop
      ClearHelpWindow
      PLocate 20,4
      print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
      print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
      PLocate 21,4
      print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
      VerifyPlay = false
      exit function
   end if
   
   for TestLined = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(TestLined).XCor <> FirstX then ValidX = false
   next

   for TestLined = 0 to WhichPlay.LettersPlaced - 1
      if WhichPlay.TilesPlaced(TestLined).YCor <> FirstY then ValidY = false
   next
   
   if not ValidX and not ValidY then
      ClearHelpWindow
      PLocate 20,3
      print "@03@All tiles must be in the same @0B@Row@03@ or @0B@Column@03@.  Press Any Key."
      sleep(2500)
      do while chr(ReadKey(100)) = ""
         CheckTimeLeft
      loop
      ClearHelpWindow
      PLocate 20,4
      print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
      print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
      PLocate 21,4
      print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles@0B@(@03@%@0B@) @03@Discard Tile(s)"
      VerifyPlay = false
      exit function
   else
      WhichDirection = ValidX
   end if
   
   for TestLined = 0 to WhichPlay.LettersPlaced - 1
      if OkayPos(WhichGame, WhichPlay, WhichPlay.TilesPlaced(TestLined).XCor, WhichPlay.TilesPlaced(TestLined).YCor) then
         ValidTilePos = true
      end if
   next

   if not ValidTilePos then
      ClearHelpWindow
      PLocate 20,3
      print "@03@At least one tile must be touching an @0B@Existing Letter@03@ on the board."
      print "  Press Any Key."
      sleep(2500)
      do while chr(ReadKey(100)) = ""
         CheckTimeLeft
      loop
      ClearHelpWindow
      PLocate 20,4
      print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
      print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
      PLocate 21,4
      print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
      VerifyPlay = false
      exit function
   end if
   
   //Find any words formed
   
   dim FirstWordStartLeft as byte = 0
   dim FirstWordStartRight as byte = 0
   dim FirstWordStartTop as byte = 0
   dim FirstWordStartBottom as byte = 0
   
   dim LostForWildcards as byte = 0
   
   redim WordsFound(1)
   redim PremiumUsed(1)
   NumWordsFormed = 1

   if WhichPlay.LettersPlaced > 1 then
      if Not WhichDirection then //If tiles are going horizontally
         if LowCol(WhichPlay) - 1 >= 0 then
            for TestLined = 0 to LowCol(WhichPlay) - 1
               if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then
                  WordsFound(1) = ""
                  PremiumUsed(1) = ""
               else
                  if trim(WordsFound(1)) = "" then FirstWordStartLeft = TestLined
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
                  CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
               end if
            next
         end if
         
         for TestLined = LowCol(WhichPlay) to HighCol(WhichPlay)
            if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then ValidTilePos = false
            WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
            FirstWordStartRight = TestLined
            PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
            CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
         next
         
         if HighCol(WhichPlay) + 1 <= 14 then
            for TestLined = HighCol(WhichPlay) + 1 to 15
               if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then
                  exit for
               else
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
                  FirstWordStartRight = TestLined
                  CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
               end if
            next
         end if
      else
         if LowRow(WhichPlay) - 1 >=0 then
            for TestLined = 0 to LowRow(WhichPlay) - 1
               if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then
                  WordsFound(1) = ""
                  PremiumUsed(1) = ""
               else
                  if trim(WordsFound(1)) = "" then FirstWordStartTop = TestLined
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
                  CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
               end if
            next
         end if
         
         for TestLined = LowRow(WhichPlay) to HighRow(WhichPlay)
            if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then ValidTilePos = false
            WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
            PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
            FirstWordStartBottom = TestLined
            CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
         next
   
         if HighRow(WhichPlay) + 1 <= 14 then
            for TestLined = HighRow(WhichPlay) + 1 to 15
               if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then
                  exit for
               else
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
                  FirstWordStartBottom = TestLined
                  CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
               end if
            next
         end if
      end if
   else
      if LowCol(WhichPlay) - 1 >= 0 then
         for TestLined = 0 to LowCol(WhichPlay) - 1
            if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then
               WordsFound(1) = ""
               PremiumUsed(1) = ""
            else
               WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
               PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
               CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
            end if
         next
      end if
      
      for TestLined = LowCol(WhichPlay) to HighCol(WhichPlay)
         if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then ValidTilePos = false
         WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
         PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
         CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
      next
      
      if HighCol(WhichPlay) + 1 <= 14 then
         for TestLined = HighCol(WhichPlay) + 1 to 15
            if OpenSpot(WhichGame, TestLined, WhichPlay.TilesPlaced(0).YCor) then
               exit for
            else
               WordsFound(1) = WordsFound(1) + WhichGame.Col(TestLined).Row(WhichPlay.TilesPlaced(0).YCor)
               PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined))
               CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(0).YCor, TestLined)
            end if
         next
      end if
      
      if len(WordsFound(1)) <= 1 then
         if LowRow(WhichPlay) - 1 >= 0 then
            for TestLined = 0 to LowRow(WhichPlay) - 1
               if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then
                  WordsFound(1) = ""
                  PremiumUsed(1) = ""
               else
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
                  CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
               end if
            next
         end if
         
         for TestLined = LowRow(WhichPlay) to HighRow(WhichPlay)
            if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then ValidTilePos = false
            WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
            PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
            CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
         next
    
         if HighRow(WhichPlay) + 1 <= 14 then
            for TestLined = HighRow(WhichPlay) + 1 to 15
               if OpenSpot(WhichGame, WhichPlay.TilesPlaced(0).XCor, TestLined) then
                  exit for
               else
                  WordsFound(1) = WordsFound(1) + WhichGame.Col(WhichPlay.TilesPlaced(0).XCor).Row(TestLined)
                  PremiumUsed(1) = PremiumUsed(1) + str(GetPlaceValue(WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor))
                  CheckWildcards(LostForWildcards, WhichPlay, TestLined, WhichPlay.TilesPlaced(0).YCor)
               end if
            next
         end if
      end if
   end if
   
   if not ValidTilePos then
      ClearHelpWindow
      PLocate 20,3
      print "@03@All tiles must be in @0B@Consecutive Positions@03@.  Press Any Key."
      sleep(2500)
      do while chr(ReadKey(100)) = ""
         CheckTimeLeft
      loop
      ClearHelpWindow
      PLocate 20,4
      print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
      print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
      PLocate 21,4
      print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
      VerifyPlay = false
      exit function
   end if
   
   //First word is complete, now search for any addition words made as well

   if Not WhichDirection or WhichPlay.LettersPlaced = 1 then //If tiles are going horizontally
      for TestLined = 0 to WhichPlay.LettersPlaced - 1
         if NearByVert(WhichGame, WhichPlay.TilesPlaced(TestLined)) then
            inc(NumWordsFormed)
            redim WordsFound(NumWordsFormed)
            
            //Grab the vertical word
            dim LookForNewTop as byte
            dim LookForNewBottom as byte
            
            for LookForNewTop = WhichPlay.TilesPlaced(TestLined).YCor to 0 step -1
               if OpenSpot(WhichGame, WhichPlay.TilesPlaced(TestLined).XCor, LookForNewTop) then exit for
            next
            inc(LookForNewTop)
            
            for LookForNewBottom = LookForNewTop to 15
               if LookForNewBottom - 1 >= 0 then
                  WordsFound(NumWordsFormed) = WordsFound(NumWordsFormed) + WhichGame.Col(WhichPlay.TilesPlaced(TestLined).XCor).Row(LookForNewBottom - 1)
                  if OpenSpot(WhichGame, WhichPlay.TilesPlaced(TestLined).XCor, LookForNewBottom) then exit for
                  CheckWildcards(LostForWildcards, WhichPlay, WhichPlay.TilesPlaced(TestLined).XCor, LookForNewBottom)
               end if
            next
            //End grab
         end if
      next
   end if
   
   if WhichDirection and WhichPlay.LettersPlaced > 1 then
      for TestLined = 0 to WhichPlay.LettersPlaced - 1
         if NearByHoriz(WhichGame, WhichPlay.TilesPlaced(TestLined)) then
            inc(NumWordsFormed)
            redim WordsFound(NumWordsFormed)
            
            //Grab the vertical word
            dim LookForNewLeft as byte
            dim LookForNewRight as byte
            
            for LookForNewLeft = WhichPlay.TilesPlaced(TestLined).XCor to 1 step -1
               if OpenSpot(WhichGame, LookForNewLeft, WhichPlay.TilesPlaced(TestLined).YCor) then exit for
            next
            inc(LookForNewLeft)
            
            for LookForNewRight = LookForNewLeft to 15
               if LookForNewRight - 1 >= 0 then
                  WordsFound(NumWordsFormed) = WordsFound(NumWordsFormed) + WhichGame.Col(LookForNewRight - 1).Row(WhichPlay.TilesPlaced(TestLined).YCor)
                  if OpenSpot(WhichGame, LookForNewRight, WhichPlay.TilesPlaced(TestLined).YCor) then exit for
                  CheckWildcards(LostForWildcards, WhichPlay, LookForNewRight, WhichPlay.TilesPlaced(TestLined).YCor)
               end if
            next
            //End grab
         end if
      next
   end if
   //Search for addition words complete, now ready to add up score, etc
  
   dim WordMultiplier as byte = 1
   dim CheckHighWord as THighWord
   dim WordFinder as byte
   
   for WordFinder = 1 to NumWordsFormed
      if len(WordsFound(WordFinder)) > 1 then
         dim TempWord as string = WordsFound(WordFinder)
         if Not CheckSpelling(TempWord) then
            ClearHelpWindow
            PLocate 20,3
            print "@03@The word @0B@";WordsFound(WordFinder);"@03@ was not found in the dictionary."
            sleep(2500)
            do while chr(ReadKey(100)) = ""
               CheckTimeLeft
            loop
            ClearHelpWindow
            PLocate 20,4
            print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
            print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
            PLocate 21,4
            print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
            VerifyPlay = false
            exit function
         end if
   
         for TestLined = 1 to len(trim(WordsFound(WordFinder)))
            if WordFinder = 1 then
               select case val(mid(PremiumUsed(WordFinder), TestLined, 1))
                  case 1 //1) Dbl Wrd
                     ScoreIncrease = ScoreIncrease + GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1))
                     WordMultiplier = WordMultiplier * 2
                  case 2 //2) Dbl Ltr
                     ScoreIncrease = ScoreIncrease + (GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1)) * 2)
                  case 3 //3) Tri Wrd
                     ScoreIncrease = ScoreIncrease + GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1))
                     WordMultiplier = WordMultiplier * 3
                  case 4 //4) Tri Ltr
                     ScoreIncrease = ScoreIncrease + (GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1)) * 3)
                  case else
                     ScoreIncrease = ScoreIncrease + GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1))
               end select
            else
               ScoreIncrease = ScoreIncrease + GetLetterValue(mid(WordsFound(WordFinder), TestLined, 1))
               WordMultiplier = 1
            end if
         next
         ScoreIncrease = ScoreIncrease * WordMultiplier
         
         CheckHighWord.PlayerName = WhichGame.Player(WhichPlayer).PlayerName
         CheckHighWord.Word = WordsFound(1)
         CheckHighWord.Points = ScoreIncrease
         UpdateTopWord(CheckHighWord)
      end if
   next
   
   ScoreIncrease = ScoreIncrease - LostForWildcards
   
   CATCH ERR_ARRAYSUBSCRIPT
      ClearHelpWindow
      PLocate 20, 1
      print "Debug: ASOR ERROR, aborting VerifyPlay function...";
      sleep(2000)
      VerifyPlay = false
      exit function
end function

function PickTile(WhichGame as TGame) as string
   dim WhichTile as byte
   dim CompressArray as byte

   if WhichGame.TilesLeft = 0 then exit function
   if WhichGame.TilesLeft = 1 then
      WhichTile = 1
   else
      do
         WhichTile = int(rnd(timer mod 60 * (WhichGame.TilesLeft * user.info.id / timer)) * WhichGame.TilesLeft) + 1
         if asc(WhichGame.Tiles(WhichTile - 1)) < 65 or asc(WhichGame.Tiles(WhichTile - 1)) > 90 then
            if WhichGame.Tiles(WhichTile - 1) <> "?" then
               WhichTile = 0
            end if
         end if
      loop while WhichTile < 1 or WhichTile > WhichGame.TilesLeft 'Just double check the number
   end if
   
   PickTile = WhichGame.Tiles(WhichTile - 1)
   WhichGame.Tiles(WhichTile - 1) = chr(32)
   
   for CompressArray = WhichTile to WhichGame.TilesLeft
      WhichGame.Tiles(CompressArray - 1) = WhichGame.Tiles(CompressArray)
   next
   
   dec(WhichGame.TilesLeft)
end function

function RefillHand(WhichGame as TGame, WhichPlayer as byte) as boolean
   dim TilesNeeded as byte = 0
   dim SearchHand as byte
   dim EmptySpaces() as byte
   
   if WhichGame.TilesLeft <= 0 then
      RefillHand = false
      exit function
   end if

   for SearchHand = 0 to 6
      if asc(WhichGame.Player(WhichPlayer).TilesInHand(SearchHand)) < 65 or asc(WhichGame.Player(WhichPlayer).TilesInHand(SearchHand)) > 90 and asc(WhichGame.Player(WhichPlayer).TilesInHand(SearchHand)) <> 63 then
         inc(TilesNeeded)
         redim EmptySpaces(TilesNeeded)
         EmptySpaces(TilesNeeded - 1) = SearchHand
      end if
   next

   RefillHand = true
   
   if TilesNeeded > 0 then
      if WhichGame.TilesLeft < TilesNeeded then
         TilesNeeded = WhichGame.TilesLeft
         RefillHand = false
      end if
      
      for SearchHand = 0 to TilesNeeded - 1
         WhichGame.Player(WhichPlayer).TilesInHand(EmptySpaces(SearchHand)) = PickTile(WhichGame)
      next
   end if
end function

function TallyVotes(WhichGame as TGame) as boolean 'Returns true if game is ready to begin
   dim YesVotes as byte = 0
   dim TallyCounter as byte
   
   if WhichGame.NumPlayers = 1 then
      TallyVotes = false
      exit function
   end if
   
   if WhichGame.NumPlayers = 4 then
      TallyVotes = true
      exit function
   end if
   
   for TallyCounter = 0 to WhichGame.NumPlayers - 1
      if WhichGame.Player(TallyCounter).VoteStartASAP then
         inc(YesVotes)
      end if
   next
   
   if YesVotes / WhichGame.NumPlayers > .5 then
      TallyVotes = true
   else
      TallyVotes = false
   end if
end function

function DispHandInfo(WhichGame as TGame, ShowTiles as boolean, ShowTime as boolean) as boolean
   dim OurPlayerNum as byte
   dim DrawRows as byte
   dim DrawCols as byte
   
   for DrawRows = 0 to 14
      for DrawCols = 0 to 14
         if not OpenSpot(WhichGame, DrawCols, DrawRows) then
            PLocate DrawRows + 4, (DrawCols * 3) + 34
            if mid(WhichGame.Col(DrawCols).Row(DrawRows), 2, 1) = "?" then
               print "@70@";WhichGame.Col(DrawCols).Row(DrawRows);"?@00@";
            else
               print "@70@";WhichGame.Col(DrawCols).Row(DrawRows);" @00@";
            end if
         end if
      next
   next
   
   if WhichGame.Player(0).ID = user.info.id then OurPlayerNum = 0
   if WhichGame.Player(1).ID = user.info.id then OurPlayerNum = 1
   if WhichGame.Player(2).ID = user.info.id then OurPlayerNum = 2
   if WhichGame.Player(3).ID = user.info.id then OurPlayerNum = 3
   
   PLocate 5, 3  : Print "@0F@Player                 Score";
   
   if WhichGame.Player(0).Id > 0 then
      PLocate 6, 3  : Print "@03@";left(pad(WhichGame.Player(0).PlayerName, 22),22);" @0D@";WhichGame.Player(0).Score
   else
      if WhichGame.Player(1).Id = 0 then
         PLocate 6, 3  : Print "@08@";left(pad(WhichGame.Player(0).PlayerName, 22),22);" @08@";WhichGame.Player(0).Score
      else
         PLocate 6, 3  : Print "@07@";left(pad(WhichGame.Player(0).PlayerName, 22),22);" @07@";WhichGame.Player(0).Score
      end if
   end if
   
   if trim(WhichGame.Player(1).PlayerName) <> "" then
      if WhichGame.Player(1).Id > 0 then
         PLocate 7, 3 : Print "@03@";left(pad(WhichGame.Player(1).PlayerName, 22),22);" @0D@";WhichGame.Player(1).Score
      else
         if WhichGame.Player(1).Id = 0 then
            PLocate 7, 3 : Print "@08@";left(pad(WhichGame.Player(1).PlayerName, 22),22);" @08@";WhichGame.Player(1).Score
         else
            PLocate 7, 3 : Print "@07@";left(pad(WhichGame.Player(1).PlayerName, 22),22);" @07@";WhichGame.Player(1).Score
         end if
      end if
   end if
   
   if trim(WhichGame.Player(2).PlayerName) <> "" then
      if WhichGame.Player(2).Id > 0 then
         PLocate 8, 3 : Print "@03@";left(pad(WhichGame.Player(2).PlayerName, 22),22);" @0D@";WhichGame.Player(2).Score
      else
         if WhichGame.Player(1).Id = 0 then
            PLocate 8, 3 : Print "@08@";left(pad(WhichGame.Player(2).PlayerName, 22),22);" @08@";WhichGame.Player(2).Score
         else
            PLocate 8, 3 : Print "@07@";left(pad(WhichGame.Player(2).PlayerName, 22),22);" @07@";WhichGame.Player(2).Score
         end if
      end if   
   end if
   
   if trim(WhichGame.Player(3).PlayerName) <> "" then
      if WhichGame.Player(3).Id > 0 then
         PLocate 9, 3 : Print "@03@";left(pad(WhichGame.Player(3).PlayerName, 22),22);" @0D@";WhichGame.Player(3).Score
      else
         if WhichGame.Player(1).Id = 0 then
            PLocate 9, 3 : Print "@08@";left(pad(WhichGame.Player(3).PlayerName, 22),22);" @08@";WhichGame.Player(3).Score
         else
            PLocate 9, 3 : Print "@07@";left(pad(WhichGame.Player(3).PlayerName, 22),22);" @07@";WhichGame.Player(3).Score
         end if
      end if
   end if
   
   PLocate 11, 3 : Print "@03@Tiles Left   @08@: @0F@";WhichGame.TilesLeft;" ";
   if ShowTime then
      PLocate 12, 3 : Print "@03@Time Started @08@: @0F@";
   else
      PLocate 12, 3 : Print "@03@Date Started @08@: @0F@";
   end if
   
   if ShowTime then
      print TimeString(WhichGame.DateStarted)
   else
      if DateString(WhichGame.DateStarted) <> "1/1/01" then
         print DateString(WhichGame.DateStarted)
      else
         print "N@07@/@0F@A"
      end if
   end if
   
   PLocate 13, 3 : Print Bar(15 + len(DateString(WhichGame.DateStarted)), 0, 7);
   
   If not ShowTiles then exit function
   
   PLocate 15, 8 : Print "@0F@Tiles In Hand";
   PLocate 17, 5 : 
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(0)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(0)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(0) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(0);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(1)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(1)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(1) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(1);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(2)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(2)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(2) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(2);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(3)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(3)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(3) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(3);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(4)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(4)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(4) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(4);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(5)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(5)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(5) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(5);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
   if asc(WhichGame.Player(OurPlayerNum).TilesInHand(6)) >= 65 and asc(WhichGame.Player(OurPlayerNum).TilesInHand(6)) <= 90 or WhichGame.Player(OurPlayerNum).TilesInHand(6) = "?" then
      print  "@70@";WhichGame.Player(OurPlayerNum).TilesInHand(6);" @00@ ";
   else
      print  "@0F@   ";
   end if
   
end function

function GetVoteLetter(WhichLetter as boolean) as string
   if WhichLetter then
      GetVoteLetter = "S"
   else
      GetVoteLetter = "W"
   end if
end function

function ControlMessage(byval msg as integer)
  WriteChannel(GameControl, 0, msg, our, sizeof(our))
end function

function InitDefaultTileArray as boolean
   dim TileString as string * 100
   TileString = "AAAAAAAAABBCCDDDDEEEEEEEEEEEEFFGGGHHIIIIIIIIIJKLLLLMMNNNNNNOOOOOOOOPPQRRRRRRSSSSTTTTTTUUUUVVWWXYYZ??"
   memcpy(@DefaultTileArray, @TileString, sizeof(TileString))
end function

function RefreshNodeData as boolean
   dim OurScrabbleNode as TScrabbleNode
   OurScrabbleNode.NodeActive = true
   OurScrabbleNode.NodeIndex = GetNode
   OurScrabbleNode.WhichPlayer = our
   
   dim WriteOurNodeData as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
   if WriteOurNodeData > 0 then
      put #WriteOurNodeData, GetNode, OurScrabbleNode
      close #WriteOurNodeData
      RefreshNodeData=true
   else
      RefreshNodeData=false
   end if
end function

function InitMultinode
   if GetOnlinePlayerCount = 0 and Exists(GetPath + "GameData.dat") then kill GetPath + "GameData.dat"
   TryToKillGameData
   
   dim GetNodeFile as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
   if GetNodeFile > 0 then
      dim DupeCheckRec as TScrabbleNode
      dim CheckForDupe as integer = 1
      do while not eof(GetNodeFile)
         get #GetNodeFile, CheckForDupe, DupeCheckRec
         if DupeCheckRec.WhichPlayer.id = user.info.id and GetNode <> DupeCheckRec.NodeIndex then
            dim CheckGhostNode as TNodeInfo
            GetNodeInfo(DupeCheckRec.NodeIndex, CheckGhostNode)
            if CheckGhostNode.NodeStatus > 2 then
               cls
               Print "@0B@You Are Already Online!"
               print
               print "@0F@We see that you're already on another node.  You can only enter"
               print "PSScrabble on one node at a time.  Thank You!"
               print Bar(63,0,9)
               print
               Pause
               end
            else
               'Hmmm for some reason, we think that node is active but it's really not, let's correct our data file
                dim ClearNodeFile as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
                if ClearNodeFile > 0 then
                   dim NullNodeData as TScrabbleNode
                   clear NullNodeData
                   put #ClearNodeFile, DupeCheckRec.NodeIndex, NullNodeData
                   close #ClearNodeFile
                else
                   print "Error 2: Couldn't open nodedata.dat"
                end if
            end if
         end if
         inc(CheckForDupe)
      loop
      close #GetNodeFile
   else
      print "Error 1: Couldn't open nodedata.dat"
   end if
   our.PlayerName = UpperLower(User.info.name)
   our.Id = user.info.id
   our.InGame = false
   our.Activity = "Play Menu"
   clear our.GameStruct
   
   dim OurScrabbleNode as TScrabbleNode
   OurScrabbleNode.NodeActive = true
   OurScrabbleNode.NodeIndex = GetNode
   OurScrabbleNode.WhichPlayer = our
   
   dim WriteOurNodeData as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
   if WriteOurNodeData > 0 then
      put #WriteOurNodeData, GetNode, OurScrabbleNode
      close #WriteOurNodeData
   else
      print "Error 3: Couldn't open nodedata.dat"
   end if
   
   GetNodeFile = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
   if GetNodeFile > 0 then
      dim NodeLooper as integer = 1
      dim TempGrabNode as TScrabbleNode
      
      do while not eof(GetNodeFile)
         get #GetNodeFile, NodeLooper, TempGrabNode
         if TempGrabNode.NodeActive then
            if high(PlayersOnline) < 0 then 
               redim PlayersOnline(1)
            else
               redim PlayersOnline(high(PlayersOnline) + 1)
            end if
            PlayersOnline(high(PlayersOnline) - 1) = TempGrabNode.WhichPlayer
         end if
         inc(NodeLooper)
      loop
      
      close #GetNodeFile
   else
      print "Error 4: Couldn't open nodedata.dat"
   end if
   
   ControlMessage(SCRABBLE_ENTER)
   RefreshOnlineGames
end function

function EmptyHand(WhichPlayer as TPlayer) as boolean
   dim Searcher as byte
   
   EmptyHand = true
   for Searcher = 0 to 6
      if asc(WhichPlayer.TilesInHand(Searcher)) >= 65 and asc(WhichPlayer.TilesInHand(Searcher)) <= 90 and WhichPlayer.TilesInHand(Searcher) <> "?" then
         EmptyHand = false
      end if
   next
end function

function GameOver(WhichGame as TGame)
   dim PlayerFinder as byte
   dim ScoreAddUp as byte
   dim TotalScoreIncrease as short
   dim PlayerScoreIncrease(4) as byte
   dim Winner as byte
   dim TopScore as short = 0
   dim PlayerUpdate as TPlayerRecord
   dim OurPlayerNum as byte = 0
   dim CheckHighScore as THighGamesWon
   
   for PlayerFinder = 0 to WhichGame.NumPlayers - 1
      if not EmptyHand(WhichGame.Player(PlayerFinder)) then
         for ScoreAddUp = 0 to 6
            if asc(WhichGame.Player(PlayerFinder).TilesInHand(ScoreAddUp)) >= 65 and asc(WhichGame.Player(PlayerFinder).TilesInHand(ScoreAddUp)) <= 90 or WhichGame.Player(PlayerFinder).TilesInHand(ScoreAddUp) = "?" then
               PlayerScoreIncrease(PlayerFinder) = PlayerScoreIncrease(PlayerFinder) + GetLetterValue(chr(asc(WhichGame.Player(PlayerFinder).TilesInHand(ScoreAddUp))))
               TotalScoreIncrease = TotalScoreIncrease + GetLetterValue(chr(asc(WhichGame.Player(PlayerFinder).TilesInHand(ScoreAddUp))))
            end if
         next
      end if
   next
   
   for PlayerFinder = 0 to WhichGame.NumPlayers - 1
      if EmptyHand(WhichGame.Player(PlayerFinder)) then WhichGame.Player(PlayerFinder).Score = WhichGame.Player(PlayerFinder).Score + TotalScoreIncrease
      PlayerScoreIncrease(PlayerFinder) = TotalScoreIncrease
   next
   
   for PlayerFinder = 0 to WhichGame.NumPlayers - 1
      if WhichGame.Player(PlayerFinder).Score > TopScore then
         Winner = PlayerFinder
         TopScore = WhichGame.Player(PlayerFinder).Score
      end if
   next
   
   WhichGame.BeingPlayed = false
   GetCurrentDateTime(WhichGame.DateComplete)
   WhichGame.Completed = true
   
   UpdateGame(WhichGame)
   
   GetPlayerInfo(PlayerUpdate)
   inc(PlayerUpdate.GamesPlayed)
   
   if WhichGame.Player(Winner).ID = PlayerUpdate.ID then
      inc(PlayerUpdate.GamesWon)
   end if
   
   for PlayerFinder = 0 to WhichGame.NumPlayers - 1
      if WhichGame.Player(PlayerFinder).ID = user.info.id then
         OurPlayerNum = PlayerFinder
      end if
   next
   
   if WhichGame.Player(OurPlayerNum).Score > PlayerUpdate.HighestScore then
      PlayerUpdate.HighestScore = WhichGame.Player(OurPlayerNum).Score
   end if
   
   PlayerUpdate.TotalScores = PlayerUpdate.TotalScores + WhichGame.Player(OurPlayerNum).Score
   
   UpdatePlayerInfo(PlayerUpdate)
   
   CheckHighScore.PlayerName = WhichGame.Player(OurPlayerNum).PlayerName
   CheckHighScore.Games = PlayerUpdate.GamesWon
   UpdateTopGamesWon(CheckHighScore)
   
   Cls
   print "@0F@  Game Over!"
   print Bar(75, 0, 9)
   print
   print "@03@  Winner @08@: @0F@";WhichGame.Player(Winner).PlayerName
   print
   print "@03@  Final Scores @08@:"
   print "  ";Bar(14, 0, 8)
   
   for PlayerFinder = 0 to WhichGame.NumPlayers - 1
      print "@0F@  ";left(pad(WhichGame.Player(PlayerFinder).PlayerName, 22), 22);" @0B@";WhichGame.Player(PlayerFinder).Score
   next
   
   print
   print "@0F@  Thank you for playing."
   print
   print "  ";
   Pause
   Cls
   ShowBoard
end function

function DiscardTiles(GamePlay as TGame, OurPlayerNum as byte) as boolean
   DiscardTiles = false
   dim CursorMark as byte = 0
   dim KeyInput as integer = 0
   dim GameBackup as TGame = GamePlay
   dim TilesLocked(7) as boolean
   
   ClearHelpWindow
   PLocate 20,3
   print "@03@Use the @0B@Left@03@ and @0B@Right@03@ arrow keys to select a tile.  Then press @0B@Enter@03@ to";
   PLocate 21,3
   print "@0B@Discard@03@ that tile, @0B@!@03@ to @0B@Discard All Tiles@03@ or press @0B@ESC@03@ to Abort.";
   PLocate 23,3
   print "Press @0B@SPACE BAR@03@ to save changes and end your turn.";
  
   do while KeyInput <> 27 and KeyInput <> 32
      PLocate 16, 5 + (CursorMark * 3)
      print "@0F@";chr(25);
      PLocate 18, 5 + (CursorMark * 3)
      print "@07@";chr(24);
      KeyInput = 0
      do while KeyInput = 0
         KeyInput = readkey(100)
         CheckTimeLeft
      loop
      
      select case KeyInput
         case KEY_RIGHT, asc("6")
            if CursorMark < 6 then
               PLocate 16, 5 + (CursorMark * 3)
               print " ";
               PLocate 18, 5 + (CursorMark * 3)
               print " ";
               
               inc(CursorMark)
            end if
         case KEY_LEFT, asc("4")
            if CursorMark > 0 then
               PLocate 16, 5 + (CursorMark * 3)
               print " ";
               PLocate 18, 5 + (CursorMark * 3)
               print " ";

               dec(CursorMark)
            end if
         case 27
            PLocate 16, 5 + (CursorMark * 3)
            print " ";
            PLocate 18, 5 + (CursorMark * 3)
            print " ";

            GamePlay = GameBackup
            DiscardTiles = false
            PLocate 17, 5
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(0)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(0)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(0) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(0);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(1)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(1)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(1) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(1);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(2)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(2)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(2) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(2);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(3)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(3)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(3) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(3);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(4)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(4)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(4) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(4);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(5)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(5)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(5) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(5);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            if asc(GamePlay.Player(OurPlayerNum).TilesInHand(6)) >= 65 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(6)) <= 90 or GamePlay.Player(OurPlayerNum).TilesInHand(6) = "?" then
               print  "@70@";GamePlay.Player(OurPlayerNum).TilesInHand(6);" @00@ ";
            else
               print  "@0F@   ";
            end if
            
            ClearHelpWindow
            PLocate 20,4
            print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
            print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
            PLocate 21,4
            print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles@0B@(@03@%@0B@) @03@Discard Tile(s)"

            exit function
         case 13
            if not TilesLocked(CursorMark) then
               DiscardTiles = true
               PLocate 17, 5 + (CursorMark * 3)
               print "@7C@";GamePlay.Player(OurPlayerNum).TilesInHand(CursorMark);" @07@";
               GamePlay.Tiles(GamePlay.TilesLeft) = GamePlay.Player(OurPlayerNum).TilesInHand(CursorMark)
               inc(GamePlay.TilesLeft)
               GamePlay.Player(OurPlayerNum).TilesInHand(CursorMark) = PickTile(GamePlay)
               TilesLocked(CursorMark) = true
            end if
         case asc("!")
            dim ChangeLooper as byte
            for ChangeLooper = 0 to 6
               if not TilesLocked(ChangeLooper) then
                  DiscardTiles = true
                  PLocate 17, 5 + (ChangeLooper * 3)
                  print "@7C@";GamePlay.Player(OurPlayerNum).TilesInHand(ChangeLooper);" @07@";
                  GamePlay.Tiles(GamePlay.TilesLeft) = GamePlay.Player(OurPlayerNum).TilesInHand(ChangeLooper)
                  inc(GamePlay.TilesLeft)
                  GamePlay.Player(OurPlayerNum).TilesInHand(ChangeLooper) = PickTile(GamePlay)
                  TilesLocked(ChangeLooper) = true
               end if
               sleep(100)
            next
      end select
   loop
   
   PLocate 16, 5 + (CursorMark * 3)
   print " ";
   PLocate 18, 5 + (CursorMark * 3)
   print " ";
   
   ClearHelpWindow
   PLocate 20,4
   print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
   print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
   PLocate 21,4
   print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles@0B@(@03@%@0B@) @03@Discard Tile(s)"
end function

function PlayHand as boolean
   dim OpenGameSearch() as TGame
   dim CurGameStructPtr as TGame
   dim OpenGamesFound as integer = 0
   dim CurGamePtr as integer = 1
   dim InputChar as integer
   dim GamePlay as TGame
   dim OurPlayerNum as byte
   dim Play as TPlay
   dim PlaysTried as byte = 0
   
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile <= 0 then
      cls
      Print
      print "@0C@Error@08@: @07@Could not open Scrabble.dat, please report this error"
      print "to the sysop!"
      print
      Pause
      exit function
   end if
   if lof(ScrabFile) > 0 then
      do while not eof(ScrabFile)
         get #ScrabFile, CurGamePtr, CurGameStructPtr
         if CurGameStructPtr.BeingPlayed and CurGameStructPtr.Player(CurGameStructPtr.WhosTurn).ID = user.info.id then
            inc(OpenGamesFound)
            redim OpenGameSearch(OpenGamesFound)
            OpenGameSearch(OpenGamesFound) = CurGameStructPtr
         end if
         inc(CurGamePtr)
      loop
   end if
   close #ScrabFile
      
   CurGamePtr = 1

   do
      ClearHelpWindow
      ClearBox
      if OpenGamesFound > 1 then
         PLocate 20, 1 : print " @0F@Press @0B@Left@0F@ or @0B@Right@0F@ to select a game or @0B@Q@0F@ to Quit.";
      else
         if OpenGamesFound = 1 then
            PLocate 20, 1 : print " @0F@Press @0B@Enter@0F@ to play hand or @0B@Q@0F@ to Quit.";
         else
            PLocate 20, 1 : print " @0F@Press @0B@Q@0F@ to Quit.";
         end if
      end if
      PLocate 5, 3  : print "@0F@Select A Game To Play @08@:";
      PLocate 6, 3  : print Bar(21, 0, 8);
         
      if OpenGamesFound = 0 then
         PLocate 8, 5 : Print "@08@- @0F@No Games To Play @08@-";
      else
         PLocate 8, 5  : Print "@08@- @03@Game Number @08@: @0F@";OpenGameSearch(CurGamePtr).GameNumber
         
         dim PlayerName1 as string = OpenGameSearch(CurGamePtr).Player(0).PlayerName
         dim PlayerName2 as string = OpenGameSearch(CurGamePtr).Player(1).PlayerName
         dim PlayerName3 as string = OpenGameSearch(CurGamePtr).Player(2).PlayerName
         dim PlayerName4 as string = OpenGameSearch(CurGamePtr).Player(3).PlayerName

         PLocate 9, 5  : Print "@08@- @03@Player 1 @08@: @0F@";TrimName(PlayerName1, 13)
         if trim(OpenGameSearch(CurGamePtr).Player(1).PlayerName) <> "" then
            PLocate 10, 5 : Print "@08@- @03@Player 2 @08@: @0F@";TrimName(PlayerName2, 13)
         else
            PLocate 10, 5 : Print "@08@- @03@Player 2 @08@: @08@<@07@None@08@>"
         end if

         if trim(OpenGameSearch(CurGamePtr).Player(2).PlayerName) <> "" then
            PLocate 11, 5 : Print "@08@- @03@Player 3 @08@: @0F@";TrimName(PlayerName3, 13)
         else
            PLocate 11, 5 : Print "@08@- @03@Player 3 @08@: @08@<@07@None@08@>"
         end if

         if trim(OpenGameSearch(CurGamePtr).Player(3).PlayerName) <> "" then
            PLocate 12, 5 : Print "@08@- @03@Player 4 @08@: @0F@";TrimName(PlayerName4, 13)
         else                                       
            PLocate 12, 5 : Print "@08@- @03@Player 4 @08@: @08@<@07@None@08@>"
         end if
      end if
   
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case KEY_LEFT, asc("4")
            if OpenGamesFound > 1 then
               if CurGamePtr > 1 then
                  dec(CurGamePtr)
               else
                  CurGamePtr = OpenGamesFound
               end if
            end if
         case KEY_RIGHT, asc("6")
            if OpenGamesFound > 1 then
               if CurGamePtr < OpenGamesFound then
                  inc(CurGamePtr)
               else
                  CurGamePtr = 1
               end if
            end if
         case 13
            if OpenGamesFound > 0 then
               GamePlay = OpenGameSearch(CurGamePtr)
               exit do
            else
               ClearHelpWindow
               ClearBox
         
               PLocate 5, 3  : print "@0F@Select An Option @08@:";
               PLocate 6, 3  : print Bar(16, 0, 8);
               PLocate 8, 3  : Print "@0B@P@03@lay Hand";
               PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
               PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
               PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
               PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
               PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
               
               exit function
            end if
         case asc("Q"), asc("q"), 27
            ClearHelpWindow
            ClearBox
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@P@03@lay Hand";
            PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
            PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
            PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
            PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
            PLocate 18, 3 : Print "@0B@R@03@eport A Bug";

            exit function
      end select
   loop
   
   dim LookForOurPlayer as byte
   for LookForOurPlayer = 0 to GamePlay.NumPlayers - 1
      if GamePlay.Player(LookForOurPlayer).ID = user.info.id then
         OurPlayerNum = LookForOurPlayer
      end if
   next
   
   ChangeActivity("Playing Game Number " + str(GamePlay.GameNumber))
   ClearHelpWindow
   ClearBox
   DispHandInfo(GamePlay, true, false)
   DoorwayMode(true)
   
   PLocate 20,4
   print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
   print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
   PLocate 21,4
   print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
   
   InputChar = 0
   dim XPos as byte, Ypos as byte
   dim Momentum as byte = MOMENTUM_OFF 'MOMENTUM_OFF, MOMENTUM_UP, MOMENTUM_DOWN, MOMENTUM_LEFT, MOMENTUM_RIGHT
   dim GameBackup as TGame = GamePlay
   dim PlayerUpdate as TPlayerRecord
   GetPlayerInfo(PlayerUpdate)
   dim UseMomentum as boolean = not PlayerUpdate.DisableMomentum
   
   Play.LettersPlaced = 0
   
   XPos = 8
   YPos = 8
   
   do
      PLocate YPos + 3, (XPos * 3) + 31
      
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("!")
            ClearHelpWindow
            PLocate 20,1
            if AskYesNo("  @03@Are you sure you want to concede?",false) then
               if GamePlay.NumPlayers <= 2 then
                  GamePlay.BeingPlayed = false
                  GetCurrentDateTime(GamePlay.DateComplete)
                  GamePlay.Completed = true
                  ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
                  UpdateGame(GamePlay)
                  InputChar = 27
               else
                  inc(GamePlay.PlayNumber)
                  dim CountHowManyLeft as byte = 0
                  dim HowMany as byte = 0
                  
                  do
                     inc(GamePlay.WhosTurn)
                     if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                  loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                  
                  for CountHowManyLeft = 0 to 3
                     if GamePlay.Player(CountHowManyLeft).Id > 0 then inc(HowMany)
                  next
                  
                  if HowMany <= 0 then 'Game is ending
                     GamePlay.BeingPlayed = false
                     GetCurrentDateTime(GamePlay.DateComplete)
                     GamePlay.Completed = true
                     ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
                     UpdateGame(GamePlay)
                     InputChar = 27
                  else 'Game continues
                     GamePlay.Player(OurPlayerNum).Id = -1
                     ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
                     UpdateGame(GamePlay)
                     InputChar = 27
                     NotifyPlayerOfTurn(GamePlay.Player(GamePlay.WhosTurn).Id, GamePlay)
                  end if
               end if
            else
               ClearHelpWindow
               PLocate 20,4
               print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
               print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
               PLocate 21,4
               print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
            end if
         case asc("@")
            ClearHelpWindow
            PLocate 20,1
            if AskYesNo("  @03@Are you sure you want to pass your turn?",false) then
               inc(GamePlay.WhosTurn)
               if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
               UpdateGame(GamePlay)
               InputChar = 27
               NotifyPlayerOfTurn(GamePlay.Player(GamePlay.WhosTurn).Id, GamePlay)
            else
               ClearHelpWindow
               PLocate 20,4
               print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
               print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
               PLocate 21,4
               print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
            end if
         case asc("#")
            if Play.LettersPlaced <= 0 then
               dim TempShuffle(7) as string * 1
               dim PutSomethingThere(7) as boolean
               dim ShuffleCounter as byte
               dim WhichPlace as byte
               
               clear TempShuffle
               clear PutSomethingThere
   
               for ShuffleCounter = 0 to 6
                  do
                     WhichPlace = int(rnd(timer) * 7)
                     
                     if not PutSomethingThere(WhichPlace) then
                        PutSomethingThere(WhichPlace) = true
                        TempShuffle(WhichPlace) = GamePlay.Player(OurPlayerNum).TilesInHand(ShuffleCounter)
                        exit do
                     end if
                  loop
               next
               
               memcpy(@GamePlay.Player(OurPlayerNum).TilesInHand, @TempShuffle, sizeof(TempShuffle))
               UpdateGame(GamePlay)
               DispHandInfo(GamePlay, true, false)
            end if
         case asc("%")
            if DiscardTiles(GamePlay, OurPlayerNum) then
               inc(GamePlay.WhosTurn)
               inc(GamePlay.PlayNumber)
               if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
               
               UpdateGame(GamePlay)
               NotifyPlayerOfTurn(GamePlay.Player(GamePlay.WhosTurn).Id, GamePlay)
               exit do
            end if
         case asc("5")
            YPos = 8
            XPos = 8
         case asc("7")
            if YPos > 1 then
               dec(YPos)
            end if
            if XPos > 1 then
               dec(XPos)
            end if
         case asc("9")
            if YPos > 1 then
               dec(YPos)
            end if
            if XPos < 15 then
               inc(XPos)
            end if
         case asc("1")
            if YPos < 15 then
               inc(YPos)
            end if
            if XPos > 1 then
               dec(XPos)
            end if
         case asc("3")
            if YPos < 15 then
               inc(YPos)
            end if
            if XPos < 15 then
               inc(XPos)
            end if
         case KEY_UP, asc("8")
            if YPos > 1 then
               dec(YPos)
               Momentum = MOMENTUM_UP
            end if
         case KEY_DOWN, asc("2")
            if YPos < 15 then
               inc(YPos)
               Momentum = MOMENTUM_DOWN
            end if
         case KEY_LEFT, asc("4")
            if XPos > 1 then
               dec(XPos)
               Momentum = MOMENTUM_LEFT
            end if
         case KEY_RIGHT, asc("6")
            if XPos < 15 then
               inc(XPos)
               Momentum = MOMENTUM_RIGHT
            end if
         case KEY_DEL, 32
            if not OpenSpot(GamePlay, XPos - 1, YPos - 1) then
               If InPlay(Play, XPos - 1, YPos - 1) then
                  dim FindHandPos as byte
                  dim DeleteFromStack as byte
   
                  select case GetPlaceValueIgnore(YPos, XPos) 
                     case 1
                        print "@0D@";string(2, 219);
                     case 2
                        print "@0B@";string(2, 219);
                     case 3
                        print "@0C@";string(2, 219);
                     case 4
                        print "@09@";string(2, 219);
                     case else
                        print "@03@__";
                  end select
                  
                  For FindHandPos = 0 to Play.LettersPlaced - 1
                     if Play.TilesPlaced(FindHandPos).XCor = XPos - 1 then
                        if Play.TilesPlaced(FindHandPos).YCor = YPos - 1 then
                           GamePlay.Player(OurPlayerNum).TilesInHand(Play.TilesPlaced(FindHandPos).HandPos) = Play.TilesPlaced(FindHandPos).Letter
                           PLocate 17, 5 + (Play.TilesPlaced(FindHandPos).HandPos * 3)
                           print "@70@";Play.TilesPlaced(FindHandPos).Letter;" @07@";
                           GamePlay.Col(XPos - 1).Row(YPos - 1) = chr(32)
                           for DeleteFromStack = FindHandPos to Play.LettersPlaced - 1
                              Play.TilesPlaced(DeleteFromStack) = Play.TilesPlaced(DeleteFromStack + 1)
                           next
                           dec(Play.LettersPlaced)
                           if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                           exit for
                        end if
                     end if
                  next
               end if
            end if
         case asc("A") to asc("Z"), asc("a") to asc("z")
            dim FindLetter as byte
            dim LetterFound as boolean = false
            
            if OpenSpot(GamePlay, XPos - 1, YPos - 1) then
               for FindLetter = 0 to 6
                  if GamePlay.Player(OurPlayerNum).TilesInHand(FindLetter) = ucase(chr(InputChar)) then
                     LetterFound = true
                     Print "@70@";ucase(chr(InputChar));" @0F@";
                     GamePlay.Player(OurPlayerNum).TilesInHand(FindLetter) = chr(32)
                     PLocate 17, 5 + (FindLetter * 3)
                     print "@07@  ";
                     GamePlay.Col(XPos - 1).Row(YPos - 1) = ucase(chr(InputChar))
                     Play.TilesPlaced(Play.LettersPlaced).XCor = XPos - 1
                     Play.TilesPlaced(Play.LettersPlaced).YCor = YPos - 1
                     Play.TilesPlaced(Play.LettersPlaced).Letter = ucase(chr(InputChar))
                     Play.TilesPlaced(Play.LettersPlaced).HandPos = FindLetter
                     if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                     inc(Play.LettersPlaced)
                     exit for
                  end if
               next
               
               if not LetterFound and WildcardInHand(GamePlay.Player(OurPlayerNum)) <= 6 then
                  dim WhichWildcard as byte = WildcardInHand(GamePlay.Player(OurPlayerNum))
                  Print "@70@";ucase(chr(InputChar));chr(168);"@0F@";
                  GamePlay.Player(OurPlayerNum).TilesInHand(WhichWildcard) = chr(32)
                  PLocate 17, 5 + (WhichWildcard * 3)
                  print "@07@  ";
                  GamePlay.Col(XPos - 1).Row(YPos - 1) = ucase(chr(InputChar))
                  Play.TilesPlaced(Play.LettersPlaced).XCor = XPos - 1
                  Play.TilesPlaced(Play.LettersPlaced).YCor = YPos - 1
                  Play.TilesPlaced(Play.LettersPlaced).Letter = "?"
                  Play.TilesPlaced(Play.LettersPlaced).HandPos = WhichWildcard
                  if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                  inc(Play.LettersPlaced)
               end if
            end if
         case 13
            dim ScoreIncrease as byte = 0
            dim TilesNeeded as byte = 0
            dim SearchHand as byte
            dim CheckHighScore as THighScore
            
            if Play.LettersPlaced > 0 then
               if VerifyPlay(GamePlay, Play, ScoreIncrease, OurPlayerNum) then
                  for SearchHand = 0 to 6
                     if asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) < 65 or asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) > 90 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) <> 63 then
                        inc(TilesNeeded)
                     end if
                  next
                  
                  If TilesNeeded >= 7 then
                     ScoreIncrease = ScoreIncrease + 50
                  end if
                  GamePlay.Player(OurPlayerNum).Score = GamePlay.Player(OurPlayerNum).Score + ScoreIncrease
                  
                  PLocate 6 + OurPlayerNum, 26
                  print "@0D@";GamePlay.Player(OurPlayerNum).Score
                  
                  ClearHelpWindow
                  locate 20, 3
                  color 7, 0
                  select case rnd(timer)
                     case is < .3
                        print "That's @0F@";ScoreIncrease;"@07@ points for that turn!"
                     case is < .5
                        print "You've received @0F@";ScoreIncrease;"@07@ points for the play!"
                     case is < .7
                        print "Your score has increased by @0F@";ScoreIncrease;"@07@ points!"
                     case is < .9
                        print "This play gives you @0F@";ScoreIncrease;"@07@ points!"
                     case else
                        print "Impressive, @0F@";ScoreIncrease;"@07@ points for your move!"
                  end select

                  Delay 2
                  
                  ClearHelpWindow
                  PLocate 20,3
                  dim SaveIt as integer = 0
                  print "@03@[@0B@ESC@03@ or @0B@U@03@] To Undo Move or [@0B@ENTER@03@] To Continue @08@: ";
                  do while SaveIt <> 13 and SaveIt <> 27 and ucase(chr(SaveIt)) <> "U"
                     SaveIt = readkey(100)
                     CheckTimeLeft
                  loop
                  
                  if SaveIt = 13 then
                     if Not RefillHand(GamePlay, OurPlayerNum) then
                        GameOver(GamePlay)
                     end if
                     inc(GamePlay.PlayNumber)
                     
                     do
                        inc(GamePlay.WhosTurn)
                        if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                     loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                     
                     dim LookupTheirRecord as TPlayerRecord
                     GetPlayerInfo(LookupTheirRecord)
                     if ScoreIncrease > LookupTheirRecord.HighestScoringPlay then
                        if LookupTheirRecord.HighestScoringPlay > 0 then
                           ClearHelpWindow
                           PLocate 20, 3 : Print "@0F@You have beaten your all time highest score of ";LookupTheirRecord.HighestScoringPlay;"!!!"
                           sleep(2500)
                        end if
                        LookupTheirRecord.HighestScoringPlay = ScoreIncrease
                        UpdatePlayerInfo(LookupTheirRecord)
                     end if

                     GamePlay.TotalScore = GamePlay.Player(0).Score + GamePlay.Player(1).Score + GamePlay.Player(2).Score + GamePlay.Player(3).Score 'Yeah I know, I'm lazy...
                     GetCurrentDateTime(GamePlay.Player(OurPlayerNum).LastPlayed)
                     UpdateGame(GamePlay)
                     CheckHighScore.PlayerName = GamePlay.Player(OurPlayerNum).PlayerName
                     CheckHighScore.Score = GamePlay.Player(OurPlayerNum).Score
                     UpdateTopScores(CheckHighScore)
                     NotifyPlayerOfTurn(GamePlay.Player(GamePlay.WhosTurn).Id, GamePlay)
                     exit do
                  else
                     ClearHelpWindow
                     PLocate 20,4
                     print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
                     print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
                     PLocate 21,4
                     print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
                     GamePlay = GameBackup
                     clear Play
                     RedrawBoard
                     ClearBox
                     DispHandInfo(GamePlay, true, false)
                  end if
               else
                  Inc(PlaysTried)
                  if cf.MaxIncorrectWords > 0 then
                     if PlaysTried = cf.MaxIncorrectWords then
                        ClearHelpWindow
                        PLocate 20, 1
                        print "  @0C@Warning@08@: @07@If you make one more invalid move, you will lose your turn!"
                        sleep(1000)
                        print "  ";
                        Pause
                        ClearHelpWindow
                     end if
                     if PlaysTried > cf.MaxIncorrectWords then
                        ClearHelpWindow
                        PLocate 20, 1
                        print "  @07@You have exceeded the number of tries allowed, and will now lose your turn."
                        sleep(1000)
                        print "  ";
                        inc(GamePlay.WhosTurn)
                        if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                        UpdateGame(GamePlay)
                        InputChar = 27
                        NotifyPlayerOfTurn(GamePlay.Player(GamePlay.WhosTurn).Id, GamePlay)
                        Pause
                        ClearHelpWindow
                     end if
                  end if
                  GamePlay = GameBackup
                  clear Play
                  RedrawBoard
                  ClearBox
                  DispHandInfo(GamePlay, true, false)
               end if
            else
               InputChar = 27
            end if
         case CTRL_R, asc("?"), CTRL_W
            if InputChar = asc("?") then HelpSection(HELP_DURINGPLAY)
            if InputChar = CTRL_W then WhoIsOnline
            cls
            ShowBoard
            DispHandInfo(GamePlay, true, false)
            PLocate 20,4
            print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
            print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
            PLocate 21,4
            print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
      end select
   loop until InputChar = 27
   
   DoorwayMode(false)
   ClearHelpWindow
   ClearBox
   RedrawBoard
   
   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";

end function

function GetTileString(MaxLen as byte, DefaultInput as string) as string
    dim RetInp as string = ""
    dim TotalInput as string = ""
    dim col0 as byte
    dim row as byte
    dim col as byte
    
    dim PushKeys as byte
    for PushKeys = 1 to len(DefaultInput)
      PushKey(asc(DefaultInput(PushKeys)))
    next

    col0 = POS

    row = CSRLIN
    col = POS + 1

    if MaxLen > 0 then
       if col + MaxLen <= 80 then
          print "@03@[";string(MaxLen, 32);"@03@]";
       end if
    end if
    color 15, 0
    do
        RetInp = chr(ReadKey(100))
        if RetInp = chr(8) then
            PLocate row,col
            
            RetInp = ""
            if (col - 1) > col0 then
                TotalInput = LEFT(TotalInput, (len(TotalInput) - 1))
                dec(col)
                PLocate row, col
                print " ";
            end if
        end if
        if RetInp = chr(9) then
            RetInp = ""
        end if
        PLocate row, col
        if RetInp <> chr(13) then
            RetInp = ucase(RetInp)
            if asc(RetInp) >= asc("A") and asc(RetInp) <= asc("Z") or RetInp = "?" then
               if len(TotalInput) < MaxLen then
                  if asc(RetInp) > 31 and asc(RetInp) < 127 then
                     if RetInp <> "" then
                        print RetInp;
                        inc(col)
                        TotalInput = TotalInput + RetInp
                        RetInp = ""
                     end if
                  end if
               end if
            end if
        else
           exit do
        end if
    loop
    GetTileString = TotalInput
    print
end function

function PlayerEditor(CurGame as TGame)
   dim EditorChoice as integer
   dim TimeBackup as short = GetMinutesRemaining

   do while ucase(chr(EditorChoice)) <> "Q"
      Color 15,0
      Cls
      print "@03@PSScrabble Sysop Game Editor (Players)     Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      print "  @0F@Game Number @08@: @0F@";CurGame.GameNumber;" of ";CountGames
      print
      print "  @03@Select a Player To Edit @08@:"
      print

      print "  @03@[@0F@ 1@03@]  ";CurGame.Player(0).PlayerName;" @08@(@07@";CurGame.Player(0).Score;"@08@)"
      if CurGame.Player(1).ID = 0 then
         print "  @03@[@0F@ 2@03@]  None @08@(@07@0@08@)"
      else
         print "  @03@[@0F@ 2@03@]  ";CurGame.Player(1).PlayerName;" @08@(@07@";CurGame.Player(1).Score;"@08@)"
      end if
      if CurGame.Player(2).ID = 0 then
         print "  @03@[@0F@ 3@03@]  None @08@(@07@0@08@)"
      else
         print "  @03@[@0F@ 3@03@]  ";CurGame.Player(2).PlayerName;" @08@(@07@";CurGame.Player(2).Score;"@08@)"
      end if
      if CurGame.Player(3).ID = 0 then
         print "  @03@[@0F@ 4@03@]  None @08@(@07@0@08@)"
      else
         print "  @03@[@0F@ 4@03@]  ";CurGame.Player(3).PlayerName;" @08@(@07@";CurGame.Player(3).Score;"@08@)"
      end if
      print
      print "  @03@[@0F@ H@03@]  @0F@Help On Settings"
      print "  @03@[@0F@ Q@03@]  @0F@Quit To Game Editor"

      EditorChoice = 0
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          EditorChoice = readkey(100)
          if EditorChoice <> 0 then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case EditorChoice
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("1"), asc("2"), asc("3"), asc("4")
            if EditorChoice = asc("1") or CurGame.Player(val(chr(EditorChoice)) - 2).Id > 0 then
               EditPlayerInGame(CurGame, val(chr(EditorChoice)))
            end if
            CurGame.NumPlayers = 0
            dim NewCount as byte
            for NewCount = 0 to 3
               if CurGame.Player(NewCount).id > 0 then inc(CurGame.NumPlayers)
            next
            UpdateGame(CurGame)
         case asc("H"), asc("h"), asc("?")
            HelpSection(SYSOPHELP_PLAYERSINGAMEEDITOR)
      end select
   loop
end function

function GameEditor
   dim EditorChoice as integer
   dim TimeBackup as short = GetMinutesRemaining
   dim CurGame as TGame
   dim GamePtr as integer = 1
   dim DrawRows as byte
   dim DrawCols as byte
   dim WhichView as boolean = VIEW_PLAYERSLIST 'True for PlayersView, False for board thumbnail

   clear CurGame
   GetGame(GamePtr, CurGame)
   
   do while ucase(chr(EditorChoice)) <> "Q"
      GetGame(GamePtr, CurGame)
      Color 15,0
      Cls
      print "@03@PSScrabble Sysop Game Editor               Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      print "  @0F@Game Number @08@: @0F@";CurGame.GameNumber;" of ";CountGames
      Print
      print "@03@[@0F@ 1@03@]  @0F@Open Game?                  @08@: @0F@";DispYesNo(CurGame.OpenGame)
      print "@03@[@0F@ 2@03@]  @0F@Being Played?               @08@: @0F@";DispYesNo(CurGame.BeingPlayed)
      print "@03@[@0F@ 3@03@]  @0F@Who's Turn                  @08@: @0F@";CurGame.WhosTurn
      print "@03@[@0F@ 4@03@]  @0F@Total Plays So Far          @08@: @0F@";CurGame.PlayNumber
      print "@03@[@0F@ 5@03@]  @0F@Number Of Players           @08@: @0F@";CurGame.NumPlayers
      print "@03@[@0F@ 6@03@]  @0F@Date Completed              @08@: @0F@";DateString(CurGame.DateComplete)
      print "@03@[@0F@ 7@03@]  @0F@Date Started                @08@: @0F@";DateString(CurGame.DateStarted)
      print "@03@[@0F@ 8@03@]  @0F@Finished?                   @08@: @0F@";DispYesNo(CurGame.Completed)
      print "@03@[@0F@ 9@03@]  @0F@Number Of Tiles In Bag      @08@: @0F@";CurGame.TilesLeft
      print "@03@[@0F@ A@03@]  @0F@Total Score                 @08@: @0F@";CurGame.TotalScore
      print
      print "@03@[@0F@ B@03@]  @0F@Edit Tiles In Bag"
      print "@03@[@0F@ C@03@]  @0F@Edit Players In Game"
      print "@03@[@0F@ D@03@]  @0F@Edit Game Board"
      print
      print "@03@[@0F@ H@03@]  @0F@Help On Settings"
      print "@03@[@0F@ Q@03@]  @0F@Quit Game Editor"
      print
      
      if WhichView then
         PLocate 5, 46
         print "@03@Players Involved In Game @08@(@07@Score@08@)@01@";
         PLocate 6, 46
         print Bar(32, 0, 9)
         PLocate 7, 46 : print "@03@";CurGame.Player(0).PlayerName;" @08@(@07@";CurGame.Player(0).Score;"@08@)"
         if CurGame.NumPlayers > 1 then PLocate 8, 46 : print "@03@";CurGame.Player(1).PlayerName;" @08@(@07@";CurGame.Player(1).Score;"@08@)"
         if CurGame.NumPlayers > 2 then PLocate 9, 46 : print "@03@";CurGame.Player(2).PlayerName;" @08@(@07@";CurGame.Player(2).Score;"@08@)"
         if CurGame.NumPlayers > 3 then PLocate 10, 46 : print "@03@";CurGame.Player(3).PlayerName;" @08@(@07@";CurGame.Player(3).Score;"@08@)"
      else
         PLocate 5, 46
         print "@03@Game Board Thumbnail View :@01@";
         PLocate 6, 46
         print Bar(26, 0, 9)
   
         color 3
         for DrawRows = 0 to 14
            PLocate 7 + DrawRows, 46
            for DrawCols = 0 to 14
               if not OpenSpot(CurGame, DrawCols, DrawRows) then
                  print CurGame.Col(DrawCols).Row(DrawRows);" ";
               else
                  print "_ ";
               end if
            next
         next
      end if
      
      PLocate 23,1 : print "@03@[@0F@1@08@...@0F@D@08@, @0F@H@08@, @0F@Q@03@], @0F@Arrow Keys@03@/@0F@J@03@/@0F@Brackets@03@ to select game or @0F@!@03@ to toggle view @08@: ";
 
      EditorChoice = 0
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          EditorChoice = readkey(100)
          if EditorChoice <> 0 then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case EditorChoice
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("J"), asc("j")
            ClearHelpWindow
            PLocate 20, 1
            print " @0F@Game Number @07@(@0F@1@08@-@0F@";CountGames;"@07@) @08@:@07@";
            dim JumpTo as integer = AskNumber(0)
            if JumpTo > 0 and JumpTo <= CountGames then GamePtr = JumpTo
         case KEY_LEFT, asc("[")
            if GamePtr > 1 then
               dec(GamePtr)
            end if
         case KEY_RIGHT, asc("]")
            if GamePtr < CountGames then
               inc(GamePtr)
            end if
         case asc("!")
            WhichView = not WhichView
         case asc("1")
            CurGame.OpenGame = not CurGame.OpenGame
            UpdateGame(CurGame)
         case asc("2")
            CurGame.BeingPlayed = not CurGame.BeingPlayed
            UpdateGame(CurGame)
         case asc("3")
            PLocate 7, 36
            SetInitialString(str(CurGame.WhosTurn))
            CurGame.WhosTurn = val(InputString(5))
            if CurGame.WhosTurn >= 0 and CurGame.WhosTurn < CurGame.NumPlayers then UpdateGame(CurGame)
         case asc("4")
            PLocate 8, 36
            SetInitialString(str(CurGame.PlayNumber))
            CurGame.PlayNumber = val(InputString(5))
            if CurGame.PlayNumber >= 0 then UpdateGame(CurGame)
         case asc("5")
            PLocate 9, 36
            SetInitialString(str(CurGame.NumPlayers))
            CurGame.NumPlayers = val(InputString(5))
            if CurGame.NumPlayers > 0 and CurGame.NumPlayers <= 4 then UpdateGame(CurGame)
         case asc("6")
            PLocate 10, 36
            SetInitialString(DateString(CurGame.DateComplete))
            DateStringToDateTime(InputString(9), CurGame.DateComplete)
            UpdateGame(CurGame)
         case asc("7")
            PLocate 11, 36
            SetInitialString(DateString(CurGame.DateStarted))
            DateStringToDateTime(InputString(9), CurGame.DateStarted)
            UpdateGame(CurGame)
         case asc("8")
            CurGame.Completed = not CurGame.Completed
            UpdateGame(CurGame)
         case asc("9")
            PLocate 13, 36
            SetInitialString(str(CurGame.TilesLeft))
            CurGame.TilesLeft = val(InputString(5))
            if CurGame.TilesLeft >= 0 then UpdateGame(CurGame)
         case asc("A"), asc("a")
            PLocate 14, 36
            SetInitialString(str(CurGame.TotalScore))
            CurGame.TotalScore = val(InputString(5))
            if CurGame.TotalScore >= 0 then UpdateGame(CurGame)
         case asc("B"), asc("b")
            TileEditor(CurGame)
         case asc("C"), asc("c")
            PlayerEditor(CurGame)
         case asc("D"), asc("d")
            EditGameBoard(CurGame)
         case asc("H"), asc("h"), asc("?")
            HelpSection(SYSOPHELP_GAMEEDITOR)
      end select
   loop
end function

function SysopMenu
   dim ConfigChoice as string * 1
   dim TimeBackup as short = GetMinutesRemaining
   
   do while ConfigChoice <> "Q"
      Color 15,0
      Cls
      print "@03@PSScrabble Configuration Manager           Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      Print
      
      if not Regged and (cf.MaxActiveGames > 10 or cf.MaxActiveGames < 0) then cf.MaxActiveGames = 10 : WriteConfig
      if not Regged and (cf.MaxGamesPerPlayer > 2 or cf.MaxGamesPerPlayer < 0) then cf.MaxGamesPerPlayer = 2 : WriteConfig

      print "@03@[@0F@ 1@03@]  @0F@Maximum Active Games        @08@: @0F@";cf.MaxActiveGames
      print "@03@[@0F@ 2@03@]  @0F@Maximum Games Per Player    @08@: @0F@";cf.MaxGamesPerPlayer
      print "@03@[@0F@ 3@03@]  @0F@Max. Incorrect Words        @08@: @0F@";cf.MaxIncorrectWords
      print "@03@[@0F@ 4@03@]  @0F@Days Idle Before Lose Turn  @08@: @0F@";cf.MaxDaysIdle
      print "@03@[@0F@ 5@03@]  @0F@Show Intro On Startup       @08@: @0F@";DispYesNo(cf.ShowIntro)
      print "@03@[@0F@ 6@03@]  @0F@Show Game Status On Startup @08@: @0F@";DispYesNo(cf.ShowStatus)
      print "@03@[@0F@ 7@03@]  @0F@Allow Multinode Games       @08@: @0F@";DispYesNo(cf.AllowMultinode)
      print "@03@[@0F@ 8@03@]  @0F@Days To Keep Finished Games @08@: @0F@";cf.KeepFinishedGames
      print "@03@[@0F@ 9@03@]  @0F@Last User To Play           @08@: @0F@";cf.LastUser
      print "@03@[@0F@ T@03@]  @0F@Times PSScrabble Was Ran    @08@: @0F@";cf.TimesRun
      print
      print "@03@[@0F@ A@03@]  @0F@ANSI High Scores Bulletin   @08@: @0F@";cf.AnsiHighScores
      print "@03@[@0F@ B@03@]  @0F@ANSI Game Status Bulletin   @08@: @0F@";cf.AnsiStatus
      print "@03@[@0F@ C@03@]  @0F@HTML High Scores Bulletin   @08@: @0F@";cf.HtmlScores
      print "@03@[@0F@ R@03@]  @0F@Registration Code           @08@: @0F@";
      if Regged then
         Print "Registered"
      else
         print "Unregistered"
      end if
      print
      print "@03@[@0F@ S@03@]  @0F@Scrabble User Account Editor"
      if (makewild.RegString = "03-1471") then
         print "@03@[@0F@ I@03@]  @0F@InterBBS Network Settings"
      end if
      print
      print "@03@[@0F@ H@03@]  @0F@Help On Settings             @03@[@0F@ G@03@]  @0F@Game Editor"
      print "@03@[@0F@ Q@03@]  @0F@Quit Configuration Manager   @03@[@0F@ U@03@]  @0F@AutoUpdate Settings"
 
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          ConfigChoice = ucase(CHR(readkey(100)))
          if ConfigChoice <> "" then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case ucase(ConfigChoice)
         case chr(CTRL_T)
            ShowTimeLeft
         case "\"
            OnlinePage
         case "1"
            PLocate 4, 36
            SetInitialString(str(cf.MaxActiveGames))
            cf.MaxActiveGames = abs(val(InputString(5)))
            if not regged and cf.MaxActiveGames > 10 then
               PLocate MAXLINE_LENGTH, 1
               print "@07@Maximum of @0F@10 Active Games@07@ in @0C@UNREGISTERED@07@ version! @08@[@07@PAUSE@08@]";
               cf.MaxActiveGames = 10
               do : loop until ReadKey(100) > 0
            end if
            WriteConfig
         case "2"
            PLocate 5, 36
            SetInitialString(str(cf.MaxGamesPerPlayer))
            cf.MaxGamesPerPlayer = abs(val(InputString(5)))
            if not regged and cf.MaxGamesPerPlayer > 2 then
               PLocate MAXLINE_LENGTH, 1
               print "@07@Maximum of @0F@2 Active Games Per Player@07@ in @0C@UNREGISTERED@07@ version! @08@[@07@PAUSE@08@]";
               cf.MaxGamesPerPlayer = 2
               do : loop until ReadKey(100) > 0
            end if
            WriteConfig
         case "3"
            PLocate 6, 36
            SetInitialString(str(cf.MaxIncorrectWords))
            cf.MaxIncorrectWords = abs(val(InputString(5)))
            WriteConfig
         case "4"
            PLocate 7, 36
            SetInitialString(str(cf.MaxDaysIdle))
            cf.MaxDaysIdle = abs(val(InputString(5)))
            WriteConfig
         case "5"
            cf.ShowIntro = not cf.ShowIntro
            WriteConfig
        case "6"
            cf.ShowStatus = not cf.ShowStatus
            WriteConfig
         case "7"
            cf.AllowMultinode = not cf.AllowMultinode
            WriteConfig
         case "8"
            PLocate 11, 36
            SetInitialString(str(cf.KeepFinishedGames))
            cf.KeepFinishedGames = abs(val(InputString(5)))
            WriteConfig
         case "9"
            PLocate 12, 36
            SetInitialString(cf.LastUser)
            cf.LastUser = InputString(50)
            WriteConfig
         case "T"
            PLocate 13, 36
            SetInitialString(str(cf.TimesRun))
            cf.TimesRun = val(InputString(10))
            WriteConfig
         case "A"
            PLocate 15, 36
            SetInitialString(cf.AnsiHighScores)
            cf.AnsiHighScores = InputString(50)
            WriteConfig
         case "B"
            PLocate 16, 36
            SetInitialString(cf.AnsiStatus)
            cf.AnsiStatus = InputString(50)
            WriteConfig
         case "C"
            PLocate 17, 36
            SetInitialString(cf.HtmlScores)
            cf.HtmlScores = InputString(50)
            WriteConfig
         case "H", "?"
            HelpSection(SYSOPHELP_CONFIGMANAGER)
         case "I"
            if (makewild.RegString = "03-1471") then IBBSSettings
         case "G"
            if CountGames > 0 then
               GameEditor
            else
               Color 15,0
               Cls
               print "@0F@There are no games to edit.  Please create a game first."
               print Bar(56,0,8)
               Print
               Pause
            end if
         case "U"
            AutoUpdateSettings
         case "R"
            dim TempRegCode as string
            
            do
               PLocate 19, 36
               print string(44, 32);
               PLocate 19, 36
               input TempRegCode
               If TempRegCode <> "" then
                  cf.RegCode = Trim(TempRegCode)
                  WriteConfig
                  exit do
               end if
               If trim(TempRegCode) = "" then
                  exit do
               end if
            loop
            
            If not Regged then
               PLocate 19, 37
               print string(43,32);
               PLocate 19, 37
               Print "@84@INVALID REGISTRATION CODE!"
               Delay 3
            else
               PLocate 19, 37
               print string(43,32);
               PLocate 19, 37
               Print "@8F@Thank you for registering!"
               Delay 3
            end if
         case "S"
            UserAccountEditor(0)
      end select
   loop

   Cls
   ShowBoard

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
end function

function CreateNewGame(NewGame as TGame) as boolean
   if (not Regged and CountGames >= 10) or (CountGames >= cf.MaxActiveGames and cf.MaxActiveGames > 0) then
      ClearHelpWindow
      PLocate 20, 3
      print "@0F@The maximum number of active games set by the Sysop has been reached@08@.";
      PLocate 21, 3
      Pause
      ClearHelpWindow
      CreateNewGame = false
      exit function
   end if
   if CheckAtGameLimit(user.info.id) then
      ClearHelpWindow
      PLocate 20, 3
      print "@0F@You are already involved in the maximum number of games allowed per player@08@.";
      PLocate 21, 3
      Pause
      ClearHelpWindow
      CreateNewGame = false
      exit function
   end if
   dim TempAnswer as string * 1
   Clear NewGame

   ClearHelpWindow
   ClearBox
   PLocate 5, 3  : print "@0F@Enter Game Information @08@:";
   PLocate 6, 3  : print Bar(21, 0, 8);
   
   PLocate 8, 3  : Print "@03@Do you vote to @0B@S@03@tart the";
   PLocate 9, 3  : Print "game A.S.A.P. or @0B@W@03@ait for";
   PLocate 10, 3 : Print "more players? @0F@(@07@S@08@/@07@W@0F@) @08@: ";
   
   do
      do
         TempAnswer = chr(ReadKey(100))
         CheckTimeLeft
      loop until TempAnswer <> ""
    
      if ucase(TempAnswer) = "S" then
         print "@0F@Start";
         NewGame.Player(0).VoteStartASAP = true
         exit do
      elseif ucase(TempAnswer) = "W" then
         print "@0F@Wait";
         NewGame.Player(0).VoteStartASAP = false
         exit do
      end if
   loop
   Sleep(500)
   
   NewGame.GameNumber = GetFreeGameNumber
   NewGame.OpenGame = true
   NewGame.BeingPlayed = false
   NewGame.WhosTurn = 1
   NewGame.PlayNumber = 0
   NewGame.Player(0).ID = user.info.id
   NewGame.Player(0).PlayerName = UpperLower(user.info.name)
   NewGame.Player(0).Score = 0
   NewGame.NumPlayers = 1
   NewGame.Completed = false
   memcpy(@NewGame.Tiles, @DefaultTileArray, sizeof(DefaultTileArray))
   NewGame.TilesLeft = NUM_TILES
   NewGame.TotalScore = 0
   RefillHand(NewGame, 0)
   UpdateGame(NewGame)
   CreateNewGame = true
end function

function JoinGame as boolean
   dim CurGameStructPtr as TGame
   dim InputChar as integer
   dim TempAnswer as string * 1
   
   GetFirstOpenGame(CurGameStructPtr)
   
   do
      ClearHelpWindow
      ClearBox
      if CountOpenGames > 1 then
         PLocate 20, 1 : print " @0F@Press @0B@Left@0F@ or @0B@Right@0F@ to select a game, or press @0B@N@0F@ to create a @0B@New Game@0F@.";
         PLocate 21, 1 : print " @0F@Press @0B@ESC@0F@ or @0B@Q@0F@ to leave this menu.";
      else
         if CountOpenGames = 1 then
            PLocate 20, 1 : print " @0F@Press @0B@Enter@0F@ to join game, or press @0B@N@0F@ to create a @0B@New Game@0F@.";
         else
            PLocate 20, 1 : print " @0F@Press @0B@Q@0F@ to quit, or press @0B@N@0F@ to create a @0B@New Game@0F@.";
         end if
      end if
      PLocate 5, 3  : print "@0F@Select A Game To Join @08@:";
      PLocate 6, 3  : print Bar(21, 0, 8);
         
      if CountOpenGames = 0 then
         PLocate 8, 5 : Print "@08@- @0F@No Open Games @08@-";
      else
         if not CurGameStructPtr.BeingPlayed then
            if CheckJoined(CurGameStructPtr) then
               PLocate 14, 3 : print "@0F@P@07@ress @0B@ENTER@0F@ T@07@o @0F@C@07@hange @0F@V@07@ote.";
            else
               PLocate 14, 5 : print "@0F@P@07@ress @0B@ENTER@0F@ T@07@o @0F@J@07@oin.";
            end if
         else
            PLocate 14, 5 : print "@0F@G@07@ame @0F@H@07@as @0F@S@07@tarted.";
         end if
      
         PLocate 8, 5  : Print "@08@- @03@Game Number @08@: @0F@";CurGameStructPtr.GameNumber
         
         dim PlayerName1 as string = CurGameStructPtr.Player(0).PlayerName
         dim PlayerName2 as string = CurGameStructPtr.Player(1).PlayerName
         dim PlayerName3 as string = CurGameStructPtr.Player(2).PlayerName
         dim PlayerName4 as string = CurGameStructPtr.Player(3).PlayerName

         PLocate 9, 3  : Print GetVoteLetter(CurGameStructPtr.Player(0).VoteStartASAP);" @08@- @03@Player 1 @08@: @0F@";TrimName(PlayerName1, 13)
         if trim(CurGameStructPtr.Player(1).PlayerName) <> "" then
            PLocate 10, 3 : Print GetVoteLetter(CurGameStructPtr.Player(1).VoteStartASAP);" @08@- @03@Player 2 @08@: @0F@";TrimName(PlayerName2, 13)
         else
            PLocate 10, 5 : Print "@08@- @03@Player 2 @08@: @08@<@07@None@08@>"
         end if

         if trim(CurGameStructPtr.Player(2).PlayerName) <> "" then
            PLocate 11, 3 : Print GetVoteLetter(CurGameStructPtr.Player(2).VoteStartASAP);" @08@- @03@Player 3 @08@: @0F@";TrimName(PlayerName3, 13)
         else
            PLocate 11, 5 : Print "@08@- @03@Player 3 @08@: @08@<@07@None@08@>"
         end if

         if trim(CurGameStructPtr.Player(3).PlayerName) <> "" then
            PLocate 12, 3 : Print GetVoteLetter(CurGameStructPtr.Player(3).VoteStartASAP);" @08@- @03@Player 4 @08@: @0F@";TrimName(PlayerName4, 13)
         else                                       
            PLocate 12, 5 : Print "@08@- @03@Player 4 @08@: @08@<@07@None@08@>"
         end if
      end if
   
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case KEY_LEFT, asc("4")
            if not GetPrevOpenGame(CurGameStructPtr) then
               GetLastOpenGame(CurGameStructPtr)
            end if
         case KEY_RIGHT, asc("6")
            if not GetNextOpenGame(CurGameStructPtr) then
               GetFirstOpenGame(CurGameStructPtr)
            end if
         case asc("N"), asc("n")
            ClearHelpWindow
            ClearBox
            dim NewGame as TGame
            if CreateNewGame(NewGame) then CurGameStructPtr = NewGame
         case 13
            dim OurPlayerNum as byte
            dim TileLooper as byte
            dim MostValuable as byte = 255
            dim MostValuablePlayer as byte = 0
            dim TileToChoose as byte
            
            if CountOpenGames > 0 then
               if not CheckJoined(CurGameStructPtr) and not CurGameStructPtr.BeingPlayed then
                  OurPlayerNum = CurGameStructPtr.NumPlayers
                  
                  ClearHelpWindow
                  ClearBox
                  
                  PLocate 5, 3  : print "@0F@Enter Your Choice @08@:";
                  PLocate 6, 3  : print Bar(19, 0, 8);
                  
                  PLocate 8, 3  : Print "@03@Do you vote to @0B@S@03@tart the";
                  PLocate 9, 3  : Print "game A.S.A.P. or @0B@W@03@ait for";
                  PLocate 10, 3 : Print "more players? @0F@(@07@S@08@/@07@W@0F@) @08@: ";
                  
                  do
                     do
                        TempAnswer = chr(ReadKey(100))
                        CheckTimeLeft
                     loop until TempAnswer <> ""
                   
                     if ucase(TempAnswer) = "S" then
                        print "@0F@Start";
                        CurGameStructPtr.Player(OurPlayerNum).VoteStartASAP = true
                        exit do
                     elseif ucase(TempAnswer) = "W" then
                        print "@0F@Wait";
                        CurGameStructPtr.Player(OurPlayerNum).VoteStartASAP = false
                        exit do
                     end if
                  loop
                  Sleep(500)
                  
                  CurGameStructPtr.Player(OurPlayerNum).ID = user.info.id
                  CurGameStructPtr.Player(OurPlayerNum).PlayerName = UpperLower(user.info.name)
                  CurGameStructPtr.Player(OurPlayerNum).Score = 0
                  inc(CurGameStructPtr.NumPlayers)
                  RefillHand(CurGameStructPtr, OurPlayerNum)
                  UpdateGame(CurGameStructPtr)
                  
                  if TallyVotes(CurGameStructPtr) then
                     ClearHelpWindow
                     ClearBox
                     
                     PLocate 5, 3  : print "@0F@The game is now ready to";
                     PLocate 6, 3  : print "begin.  The player with the";
                     PLocate 7, 3  : print "letter closest to @0B@A@0F@ starts."
                     PLocate 8, 3  : print Bar(24, 0, 8);
                     
                     for TileLooper = 0 to CurGameStructPtr.NumPlayers - 1
                        TileToChoose = int(rnd(CurGameStructPtr.Player(TileLooper).ID / timer) * 27) + 1
                        if TileToChoose = 27 then 
                           TileToChoose = 63
                        else
                           TileToChoose = TileToChoose + 64
                        end if
                        PLocate 10 + TileLooper, 3 : print "@0F@";left(pad(CurGameStructPtr.Player(TileLooper).PlayerName,22),22);
                        print " @70@";chr(TileToChoose);" @07@";
                        if TileToChoose < MostValuable then
                           MostValuablePlayer = TileLooper
                           MostValuable = TileToChoose
                        end if
                     next
                     
                     PLocate 11 + CurGameStructPtr.NumPlayers, 3
                     dim WhichPlayerGoesFirst as string = CurGameStructPtr.Player(MostValuablePlayer).PlayerName
                     print "@0F@";TrimName(WhichPlayerGoesFirst, 13);" @07@will go first.";
                     
                     CurGameStructPtr.OpenGame = false
                     CurGameStructPtr.BeingPlayed = true
                     CurGameStructPtr.WhosTurn = MostValuablePlayer
                     GetCurrentDateTime(CurGameStructPtr.DateStarted)
                     do while ReadKey(100) <> 13
                        CheckTimeLeft
                     loop
                  end if
      
                  if CurGameStructPtr.Player(CurGameStructPtr.WhosTurn).Id <> user.info.id then
                     NotifyPlayerOfTurn(CurGameStructPtr.Player(CurGameStructPtr.WhosTurn).Id, CurGameStructPtr)
                  end if
                  UpdateGame(CurGameStructPtr)
               elseif not CurGameStructPtr.BeingPlayed then
                  dim FindOurPlayer as byte
                  for FindOurPlayer = 0 to CurGameStructPtr.NumPlayers - 1
                     if CurGameStructPtr.Player(FindOurPlayer).ID = user.info.ID then
                        OurPlayerNum = FindOurPlayer
                        exit for
                     end if
                  next
                  
                  ClearHelpWindow
                  PLocate 20,3
                  
                  if CurGameStructPtr.Player(OurPlayerNum).VoteStartASAP then
                     if AskYesNo("@0F@Change @0B@Vote@0F@ To @08@""@0B@Wait For More Players@08@""@0F@?",true) then
                        CurGameStructPtr.Player(OurPlayerNum).VoteStartASAP = false
                        UpdateGame(CurGameStructPtr)
                     end if
                  else
                     if AskYesNo("@0F@Change @0B@Vote@0F@ To @08@""@0B@Start A.S.A.P.@08@""@0F@?",true) then
                        CurGameStructPtr.Player(OurPlayerNum).VoteStartASAP = true
                        UpdateGame(CurGameStructPtr)
                     end if
                  end if
                  
                  if TallyVotes(CurGameStructPtr) then
                     ClearHelpWindow
                     ClearBox
                     
                     PLocate 5, 3  : print "@0F@The game is now ready to";
                     PLocate 6, 3  : print "begin.  The player with the";
                     PLocate 7, 3  : print "letter closest to @0B@A@0F@ starts."
                     PLocate 8, 3  : print Bar(24, 0, 8);
                     
                     for TileLooper = 0 to CurGameStructPtr.NumPlayers - 1
                        TileToChoose = int(rnd(CurGameStructPtr.Player(TileLooper).ID / timer) * 27) + 1
                        if TileToChoose = 27 then 
                           TileToChoose = 63
                        else
                           TileToChoose = TileToChoose + 64
                        end if
                        PLocate 10 + TileLooper, 3 : print "@0F@";left(pad(CurGameStructPtr.Player(TileLooper).PlayerName,22),22);
                        print " @70@";chr(TileToChoose);" @07@";
                        if TileToChoose < MostValuable then
                           MostValuablePlayer = TileLooper
                           MostValuable = TileToChoose
                        end if
                     next
                     
                     PLocate 11 + CurGameStructPtr.NumPlayers, 3
                     print "@0F@";CurGameStructPtr.Player(MostValuablePlayer).PlayerName;" @07@will go first.";
                     
                     CurGameStructPtr.OpenGame = false
                     CurGameStructPtr.BeingPlayed = true
                     CurGameStructPtr.WhosTurn = MostValuablePlayer
                     GetCurrentDateTime(CurGameStructPtr.DateStarted)
                     do while ReadKey(100) <> 13
                        CheckTimeLeft
                     loop
                  end if
      
                  UpdateGame(CurGameStructPtr)
               end if
               RefreshGame(CurGameStructPtr)
            else
               exit do
            end if
         case asc("Q"), asc("q"), 27
            exit do
      end select
   loop
   
   ClearHelpWindow
   ClearBox

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
end function

function ShowIntro as boolean
   if not cf.ShowIntro then exit function
   
   dim TimeStarted as DateTime
   dim ShowedHelp as boolean = false
   dim ShowedSPY as boolean = false
   GetCurrentDateTime(TimeStarted)
   
   if rnd(timer) < .5 then
      print "@CLS@@NOPAUSE@@07@"
      print "@0F@                @09@Pisces Software Presents..."
      print "@09@               @03@ÚÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄ¿"
      print "@03@               ³@0C@ÛÛ@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0C@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³@0C@ÛÛ@03@³"
      print "@03@               ³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
      print "@03@               ³__³__³@0D@ÛÛ@03@³@78@P @03@³@78@I @03@³@78@S @03@³@78@C @03@³@78@E @03@³@78@S @03@³__³__³__³@0D@ÛÛ@03@³__³__³"
      print "@03@               ³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³@78@O @03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
      print "@03@      @05@ÚÄÄÄÄÄ¿ @0D@ÚÄÄÄÄÄ¿@03@³@0B@ÚÄÄÄÄÄÄ¿@03@³@0F@ÚÄÄÄÄÄÄ¿@03@³@07@ÚÄÄÄÄÄÄ¿@03@³@07@ÚÄÄÄÄÄÄ¿@03@³ÚÄ¿    @01@ÚÄÄÄÄÄ¿"
      print "@01@      @05@³ ÚÄÄÄÙ @0D@³ ÚÄ¿ ³@03@³@0B@³ ÚÄÄ¿ ³@03@³@0F@³ ÚÄÄ¿ ³@03@³@07@À¿ ÚÄ¿ ³@03@³@07@À¿ ÚÄ¿ ³@03@³³ ³    @01@³ ÚÄÄÄÙ"
      print "@01@      @05@³ ÀÄÄÄ¿ @0D@³ ³@03@_@0D@ÀÄÙ@03@³@0B@³ ÀÄÄÙ ³@03@³@0F@³ ÀÄÄÙ ³@03@³@0B@Û@07@³ ÀÄÙ ³@03@³_@07@³ ÀÄÙ ³@03@³³ ³    @01@³ ÀÄ¿"
      print "@01@      @05@ÀÄÄÄ¿ ³ @0D@³ ³@0C@Û@0D@ÚÄ¿@03@³@0B@³ ÚÄ¿ ÚÙ@03@³@0F@³ ÚÄÄ¿ ³@03@³_@07@³ ÚÄ¿ ³@03@³@0B@Û@07@³ ÚÄ¿ ³@03@³³ ³    @01@³ ÚÄÙ"
      print "@01@      @05@ÚÄÄÄÙ ³ @0D@³ ÀÄÙ ³@03@³@0B@³ ³@03@_@0B@³ À¿@03@³@0F@³ ³@0B@ÛÛ@0F@³ ³@03@³@07@ÚÙ ÀÄÙ ³@03@³@07@ÚÙ ÀÄÙ ³@03@³³ ÀÄÄ¿ @01@³ ÀÄÄÄ¿"
      print "@01@      @05@ÀÄÄÄÄÄÙ @0D@ÀÄÄÄÄÄÙ@03@³@0B@ÀÄÙ@03@_@0B@ÀÄÄÙ@03@³@0F@ÀÄÙ@03@__@0F@ÀÄÙ@03@³@07@ÀÄÄÄÄÄÄÙ@03@³@07@ÀÄÄÄÄÄÄÙ@03@³ÀÄÄÄÄÙ @01@ÀÄÄÄÄÄÙ"
      print "@01@               @03@³__³__@09@For Wildcat! Interactive Net Server@03@_³__³   @07@V ";SCRABBLE_VERSION;chr(225)
      print "@07@               @03@³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
      print "@03@               ³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³"
      print "@03@               ³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
      print "@03@               ³@0C@ÛÛ@03@³  ³  ³@0B@ÛÛ@03@³  ³  ³  ³@0C@ÛÛ@03@³  ³  ³  ³@0B@ÛÛ@03@³  ³  ³@0C@ÛÛ@03@³"
      print "@03@               ÀÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÙ"
   else
      print "@CLS@@NOPAUSE@@07@"
      print "[?7h[255D[40m"
      print ""
      print ""
      print "[0;1m[8C[30mÛÛßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß[A"
      print "[70CÛÛ"
      print "[5CÛÛÛß  [31mß  [30mß ß [36mß  [30mßßß   ßßßß ßßßß [31mßßßßßß [30mßßßß[A"
      print "[48C ßßßß   ßßß  [36mß [30mß ß  [31mß  [30mßÛÛÛ"
      print "  ÛÛßß ÜÛß [35mÜÛß[30mÜÛ ÜÛ ÜÛÛ² [34m°ÛÛÛ² [30m°ÛÛÛÛ ²ÛÛÛÛ² ÛÛÛÛ° [34m²Û[A"
      print "[52CÛÛ° [30m²ÛÛÜ ÛÜ ÛÜ[35mßÛÜ [30mßÛÜ ßßÛÛ"
      print "Ûß ÜÜÜ  ÜÜÜ [35mÜÜÜ [30mÜÜ  ÜÜÜÜ ÜÜÜÜÜ [36mÜÜÜÜÜ [30mÜÜÜÜÜÜ [36mÜÜÜÜÜ [A"
      print "[50C[30mÜÜÜÜÜ ÜÜÜÜ  ÜÜ [35mÜÜÜ [30mÜÜÜ  ÜÜÜ ßÛÜÜÛÛß ÜÛÛß[35mÜÛÛ² [30m²Û[A"
      print "[17C² ²ÛÛÛ° ÛÛÛÛ² [36m²ÛÛÛÛ [30m²ÛÛÛÛ² [36mÛÛÛÛ² [30m²ÛÛÛÛ °ÛÛÛ² ²Û² [A"
      print "[66C[35m²ÛÛÜ[30mßÛÛÜ ßÛÛÜÜ[36mÜÜ  [30mÜÜÜÜ ÜÜÜÜ [35mÜÜÜ [30m°ÜÜÜÜ ÜÜÜÜ[A"
      print "[28CÜ  ÜÜÜÜÜ  [36mÜÜÜÜÜ [30mÜÜÜÜÜ  ÜÜÜÜÜ ÜÜÜÜ° [35mÜÜÜ [30mÜÜÜÜ ÜÜÜÜ  [A"
      print "[78C[36mÜÜß [30mÜÛÛÛßÜÛÛÛ± [35m²ÛÛ² [30m²ÛÛÛ± ²ÛÛÛ² °ÛÛÛÛ² [36mÛÛÛÛÛÛ [A"
      print "[44C[30m²ÛÛÛÛ° ²ÛÛÛ² ±ÛÛÛ² [35m²ÛÛ² [30m±ÛÛÛÜßÛÛÛÜ [36mß [30mßßßß ßßßßß[A"
      print "[11C [35mßßßß  [30mßßßß  ßßßßß ßßßßßß [36mßßßßßß [30mßßßßßß ßßßßß  ßßßß [A"
      print "[63C [35mßßßß [30mßßßßß ßßßß"
      print "ÛÛÛßÜÛÛÛÛ² ²ÛÛ²± [35m²ÛÛÛ± [30m²ÛÛÛÛ² ²ÛÛÛÛ± ÛÛÛÛÛÛ ±ÛÛÛÛ² ²ÛÛÛÛ² [35m±ÛÛÛ[A"
      print "[62C² [30m±²ÛÛ² ²ÛÛÛÛÜßÛÛÛÛßÜÛÛÛÛÛ± ²ÛÛÛ± [35m²ÛÛÛ² [30m°ÛÛÛÛÛ° ÛÛÛÛÛ° ÛÛ[A"
      print "[39CÛÛÛÛ °ÛÛÛÛÛ °ÛÛÛÛÛ° [35m²ÛÛÛ² [30m±ÛÛÛ² ±ÛÛÛÛÛÜßÛ ßßßßßßß ßßßßß  [35m[A"
      print "[16Cßßßßß [30mßßßßßß  ßßßßß °ßßßßßß° ßßßßß  ßßßßßß [35mßßßßß  [30mßßßßß ß[A"
      print "[73Cßßßßßß"
      print "ÛÛÛÛÛÛ² ²ÛÛÛÛ± ²ÛÛÛ² [34m°ÛÛÛÛÛ² [30m²ÛÛÛÛÛ ±ÛÛÛÛÛÛ± ÛÛÛÛÛ² [34m²ÛÛÛÛÛ° [A"
      print "[60C[30m²ÛÛÛ² ±ÛÛÛÛ² ²ÛÛÛÛÛÛÛÛÛÛÛ² ²ÛÛÛÛ² ±ÛÛÛÛ± [34m²ÛÛÛÛÛ° [30mÛÛÛÛÛÛ ²[A"
      print "[37CÛÛÛÛÛÛ² ÛÛÛÛÛÛ [34m°ÛÛÛÛÛ² [30m±ÛÛÛÛ± ²ÛÛÛÛ² ²ÛÛÛÛÛÛÛÛÛ² ²ÛÛÛÛÛÛ ²ÛÛÛÛ[A"
      print "[19C [34mÜÛÛÛÛÛÛ [30m±ÛÛÛÛÛÛ ÛÛÛÛÛÛÛÛ ÛÛÛÛÛÛ± [34mÛÛÛÛÛÛÜ [30mÛÛÛÛ² ÛÛÛÛ[A"
      print "[71CÛÛ² ²ÛÛÛÛ[36mÜÜÜÜ [30mÜÜÜÜÜÜ° ÜÜÜÜÜÜ ÜÜÜÜÜÜÜ [36mÜÜÜÜÜÜÜ [30mÜÜÜÜÜÜÜ[A"
      print "[43CÜ [36mÜÜÜÜÜÜÜ [30mÜÜÜÜÜÜÜ ÜÜÜÜÜÜ °ÜÜÜÜÜÜ [36mÜÜÜÜÛÛ² [30m°ÛÛÛÛÛ² ±ÛÛ[A"
      print "[15CÛÛÛ± ÛÛÛÛÛÛ² [36mÛÛÛÛÛÛ² [30mÛÛÛÛÛÛÛÛ [36m²ÛÛÛÛÛÛ [30m²ÛÛÛÛÛÛ ±ÛÛÛÛÛ[A"
      print "[67C± ²ÛÛÛÛÛ° [36m²ÛÛÛ² [30m°²ÛÛÛÛÛ± ²ÛÛÛÛÛ °ÛÛÛÛÛÛ° [36mÛÛÛÛÛÛ° [30mÛÛÛ[A"
      print "[39CÛÛÛÛÛ [36m°ÛÛÛÛÛÛ [30m°ÛÛÛÛÛÛ° ÛÛÛÛÛ² ±ÛÛÛÛÛ²° [36m²Û² [30mÜ²ÛÛÛÛÛÛ [A"
      print "[11C²ÛÛÛÛÛÛ ²ÛÛÛÛÛÛ [36m±ÛÛÛÛÛÛ [30m°ÛÛÛÛÛÛÛÛ° [36mÛÛÛÛÛÛ± [30mÛÛÛÛÛÛ² Û[A"
      print "[63CÛÛÛÛÛ² ÛÛÛÛÛÛ²Ü [36m² [30m°[36mÜÜÜÜÜÜ[30m° ÜÜÜÜÜÜÜ  ÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜ [A"
      print "[35C[35mÜÜÜÜÜÜÜÜÜÜ [30mÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜ  ÜÜÜÜÜÜÜ °[36mÜÜÜÜÜÜ[30m°"
      print "[36mÜ²ßßßßßß  [30mßßßßßßß  ßßßßßßß ßßßßßßß [35mßßßÛÛÛÛßßß [30mßßßßßßß  ßß[A"
      print "[57Cßßßßß ßßßßÛÛÛ± [36m²ÛÛÛÛÛ²ÜÛ [30mÜÛÛ[47m²Û²²²²²²²²²±±±²[40mßß[A"
      print "[22C[47m²²±±±±²²²²²²²²[40mÛÜÜ [35mÛ [30mÜÛ[47m²²±±°°°°°°°°°°ÜÜ[0mßß[A"
      print "[62C[1;30mßßßß ßßßß [36mßßßßßßÛÛÛ [30mÛ[47m²²±±±±°±±°°°°°°±[40mÛ  Þ[A"
      print "[23C[47m²±°°°°°±°±±±±±²[40mÛ [35mÛ [30mßßßßßßßßßßß[0mßßßßßßß[A"
      print "[60C[1;30;47m°°°±°±²±²²[40mÛ[47m²[40mÛÛÛÛÛÜ [36mÛß [30mßßÛ[47mÜ°[40m[A"
      print "[7C[47m°°°°°°°°°°°ÜÜ[0mßßßßßßßßßßßßßßßß[1;30mßß  [35mß [30mßÛ[47m[40m[A"
      print "[44C[47m²±°°°°°°°°°ßß[0mÜÜÜ[1;30;47m°°°°°°±±±²²²²[40mÛ[47m²[40mÛÛÛ [A"
      print "[79C[36mß"
      print "[6C[0;31mÞ[41m [1;36m°°°[0;31mÛÜ    Þ[1;36;41m°°°[0;31mÛÛÜ  ÞÛ[A"
      print "[28C[1;36;41m°°°°[0;31mÝ[1;36;41m°±±±°[0;31mÜ[5CÞ[41m [1;36m°°°°[40m[A"
      print "[50C[0;31mÜ  Þ[41m [1;36m°°°[0;31mÛÜ[11CÛÛÛÛÛ"
      print "  ÜÜÜÜÛ[1;36;41m°±±°[0;31mÛÜÜÜÜÜ[1;36;41m°±±°[0;31mÛ[1;36;41m°°°[40m[A"
      print "[25C[0;31mÜ[1;36;41mÜ²²ÛÛ²²²ß[0;31mß[1;36;41m²²°[0;31mÜ[1;36;41m°[40m[A"
      print "[41C[41m°°[0;31mÜ[1;36;41mÜ°±±±°°°[0;31mÜ[1;36;41mÜ°±±°[0;31mßÛ[A"
      print "[60C[1;36;41m°°°[0;31mÜ    ÜÜÜÛÛ[1;36;41m°°°[0;31mÝ"
      print " Û[1;36;41m°° [1C[0;31mÛ[1;36;41m²²²[0;31mÛ[1;36;41m°±°°[0;31mßÞ[A"
      print "[17C[1;36;41m²²²[0;31mÛ[1;36;41m°±±°[1C[0;31mß[1;36;41mßÛÛßÛÛÝ[40m[A"
      print "[34C[2C[41mÞ²²Û²²±[1C[0;31mß[1;36;41mß²²²ß²²[1C[0;31mß[1;36;41m[40m[A"
      print "[54C[41mß²²±°°±±°[0;31mÛ [34mÜ [1;36;41mÜ±±°[0;31mß ß[1;36;41m±±Ü[40m[A"
      print "[77C[0;31mÜÜ"
      print "Þ[1;36;41m±²²[0;31mÝ ß[1;36mßß[0;31mßÞ[1;36;41m²²Ý[0;31mÝ[34mÜ[31mß[A"
      print "[17C[1;36mßß[0;31mßÞ[1;36;41m²²Û²ÛÛÜ[0;31mÜ [1;36;41mÜÛ[37;40mÛ[A"
      print "[33C[36;41mß[40mß[41mßÛÛÛÛÛÛÛßÛÜ[40mÜ[0;31mÜ Þ[1;36;41mÛÛÛßÛÜ[40m[A"
      print "[56C[40mÜ[0;31mÜ[1;36;41m±²²²²[0;31mÝ[34mÜÝ[31mÞ[1;36;41mÛ²²ß²[40m[A"
      print "[72C[40mÜ[0;31mÜ ß[1;36;41mß²²[0;31mÛ[34m°° [31mß[1;36mß[41mßÜ[40m[A"
      print "[7C[40mÜÜ[0;31mÜ[1;36;41m±ÛÛ[0;31mÛ [34mÛ[1;36;44m°°[0;34mÛ [A"
      print "[20C[1;36;41mÞÛ[37;40mÛ[36;41mÛß[0;31mß[1;36;41mßÛÛÛÛÛ[37;40mÛ[0;31mÝ[A"
      print "[34C [1;36;41mÞÛ[40mÛ[41m²ÛÛÛß[1C[0;31mß[1;36;41mßÛÛÛ²ÛÛß[1C[40m[A"
      print "[54C[0;31mß[1;36;41mßÛÛ²ÛÛÛ²[0;31mÝ[34mß [1;36;41mÜÛÛÝ[1C[0;34mÜ[31m[A"
      print "[72Cß[1;36mß [0;34mßþ  Ü°²ßß [31mÞ[1;36;41mÛ[37;40mÛ[36;41mÛÛ²Û[40m[A"
      print "[12C[37;40mÛ[36;41mÝ[1C[0;34mßÛ[1;36;44m°[0;34mÝ[31mÞ[1;36;41mÛ[40m[A"
      print "[21C[37;40mÛÛ[36;41mÛ[0;31mÝ[34m°[31mÞ[1;36;41mÛ[37;40mÛ[36;41m[40m[A"
      print "[29C[41mÛ²[37;40mÛÛ[0;31mÝÞ[1;36;41mÛ[37;40mÛ[36mÛ[41m±Û[37;40mÛ[A"
      print "[41C[36;41mÛ[0;31mÝ[34mÜ[1;36;44m°[0;31mÞ[1;36;41mÛÛÛÛ[37;40mÛ[A"
      print "[51C[36;41mÛ[0;31mÝ[34m°[1;36;44m°[0;31mÞ[1;36;41mÛÛÛÛ[37;40mÛ[36mÛ[A"
      print "[62C[41mÝ[1CÜÛÛ²ÛÝ[1C[44m°[0;34mß [31mÜ[1;36;41m±±°[0;31mÜ"
      print " [1;36;41mÞ²²[0;31mÝ[1;36;41mÞÛ[37;40mÛÛ[36;41mß[0;31mß[1;36;41mß[40m[A"
      print "[12C[41mÛ[37;40mÛÛ[36;41mÜ[40mÜ[0;31mÜ [1;36;41mÞ[37;40mÛÛ[A"
      print "[22C[36;41mÛß[1C[44m°[0;31mÞ[1;36;41mÛ[37;40mÛÛ[36;41m±Ûß[1C[40m[A"
      print "[34C[0;31mÞ[1;36;41mÛ[37;40mÛÛ[36;41mÝ[0;31mÞ[1;37mÛÛ[36;41mÝ[40m[A"
      print "[43C[0;34mß²[31mÞ[1;36;41mÛ[37;40mÛ[36;41mÛß[37;40mÛÛ[36;41mÜ[40m[A"
      print "[53C[1C[0;34mß[31mÞ[1;36;41mÛ[37;40mÛ[36;41mÛß[37;40mÛÛ[36;41mÜ[40m[A"
      print "[63C[41mÛÛ[37;40mÛ[36;41mÛ±[37;40mÛ[36;41mÛ[0;31mÜ Ü[1;36;41mÜ²²[40m[A"
      print "[76C[41mß[0;31mßß"
      print " ß[1;36mß[41mßÜÛ[37;40mÛÛ[36;41mß[1C[0;34mþÜ  [1;36;41mß[37;40mÛÛ[A"
      print "[17C[36;41m²±Ûß[40mß[0;31mß [34mßß [1;36;41mßÛ[37;40mÛ[0;31mßß  Þ[A"
      print "[35C[1;36;41mÛ[37;40mÛÛ[36;41mÝ[1C[0;31mß[1;36;41mß[37;40mÛ[36mÜÜ[A"
      print "[45C[41mÜ[37;40mÛÛ[36;41mÛ[0;31mÝß[1;36;41mß[37;40mÛ[36mÜÜ[41mÜ[40m[A"
      print "[56C[37;40mÛÛ[36;41mÛ[0;31mÝß[1;36mßß[0;31mÞ[1;37mÛÛ[36;41mß[1C[40m[A"
      print "[68C[0;31mß[1;36;41mß[37;40mÛÛ[36;41mß[40mß[0;31mß"
      print "[5Cß[1;36;41mßß[7C[0;31mßß[11Cß[1;36;41mß[5C[0;31mß[1;36mßß[0;31mß[A"
      print "[39C[5Cß[1;36mß[41mßß[0;31mß[5Cß[1;36mß[41mßß[0;31mß    ßß   Üßß"
      print "[30Cß"
      print
      print
      print
   end if
   
   print
   print "@03@                @07@(c) 1999 Mike Christensen All Rights Reserved"
   print "@07@            SCRABBLE (r) is a registered trademark of Hasbro Inc."
   print
   print
   print
  
   dim DaysSinceLastUpdate as integer = 0
   dim SecondsSinceLastUpdate as integer = 0
   dim ShouldWeCheck as boolean = false
   DateTimeDiff(TimeStarted, cf.LastDateChecked, DaysSinceLastUpdate, SecondsSinceLastUpdate)
   select case cf.VersionCheckFreq
      case 1 'Sysop Entry Only
         if GetObjectFlags(OBJECTID_MASTER_SYSOP) > 0 then ShouldWeCheck = true
      case 2 'Every Time
         ShouldWeCheck = true
      case 3 'Once a Day
         if DaysSinceLastUpdate >= 1 then ShouldWeCheck=true
      case 4 'Once a Week
         if DaysSinceLastUpdate >= 7 then ShouldWeCheck=true
   end select
   if ShouldWeCheck then DoAutoUpdate

   do while chr(ReadKey(100)) = ""
      CheckTimeLeft
      if GetSecondsSince(TimeStarted) > 5 and not ShowedHelp then
         ShowedHelp = true
         PLocate 22, 1 : print string(80, 32); : sleep(100)
         PLocate 21, 1 : print string(80, 32); : sleep(100)
         PLocate 20, 1 : print string(80, 32); : sleep(100)
         
         PLocate 21, 32 : print "@08@<@0F@P@07@ress @0F@A@07@ny @0F@K@07@ey@08@>";
      end if
      
      if GetSecondsSince(TimeStarted) > (60 * 3) and not ShowedSPY then
         ShowedSPY = true
         dim ClearBar as byte
         for ClearBar = 21 to 1 step -1
            PLocate ClearBar, 1 : print string(80, 32) : sleep(50)
         next
         
         do
            for ClearBar = 1 to 5
               PLocate 13, 32
               if ReadKey(100) <> 0 then exit function
               select case ClearBar
                  case 1
                     print "@01@S@09@P@05@Y @0D@I@0B@s @0F@C@09@o@05@m@07@i@01@n@08@g...";
                     PLocate 1,1
                  case 2
                     print "@09@S@05@P@0D@Y @0B@I@0F@s @09@C@05@o@07@m@01@i@08@n@01@g...";
                     PLocate 1,1
                  case 3
                     print "@05@S@0D@P@0B@Y @0F@I@09@s @05@C@07@o@01@m@08@i@01@n@09@g...";
                     PLocate 1,1
                  case 4
                     print "@09@S@05@P@0D@Y @0B@I@0F@s @09@C@05@o@07@m@01@i@08@n@01@g...";
                     PLocate 1,1
                  case 5
                     print "@01@S@09@P@05@Y @0D@I@0B@s @0F@C@09@o@05@m@07@i@01@n@08@g...";
                     PLocate 1,1
               end select
            next
         loop
      end if
   loop
end function

function ShowBoard as boolean
   print "@0B@      @0D@ÛÛ @0B@Double Word  ÛÛ Double Letter  @0C@ÛÛ @0B@Triple Word  @09@ÛÛ @0B@Triple Letter"
   print "@03@Points@08@: @0F@B@07@-@09@3 @0F@C@07@-@09@3 @0F@D@07@-@09@2 @0F@F@07@-@09@4 @0F@G@07@-@09@2 @0F@H@07@-@09@4 @0F@J@07@-@09@8 ";
   print "@0F@K@07@-@09@5 @0F@M@07@-@09@3 @0F@P@07@-@09@3 @0F@Q@07@-@09@10 @0F@V@07@-@09@4 @0F@W@07@-@09@4 @0F@X@07@-@09@8 @0F@Y@07@-@09@4 @0F@Z@07@-@09@10 @0F@?@07@-@09@0"
   print "@05@ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿@03@ÚÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄ¿"
   print "@05@³                              ³@03@³@0C@ÛÛ@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0C@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³@0C@ÛÛ@03@³"
   print "@05@³                              ³@03@³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
   print "@05@³                              ³@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³"
   print "@05@³                              ³@03@³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
   print "@05@³                              ³@03@³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³"
   print "@05@³                              ³@03@³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³"
   print "@05@³                              ³@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³"
   print "@05@³                              ³@03@³@0C@ÛÛ@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³@0C@ÛÛ@03@³"
   print "@05@³                              ³@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³"
   print "@05@³                              ³@03@³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³"
   print "@05@³                              ³@03@³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³"
   print "@05@³                              ³@03@³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
   print "@05@³                              ³@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³"
   print "@05@³                              ³@03@³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
   print "@05@³                              ³@03@³@0C@ÛÛ@03@³  ³  ³@0B@ÛÛ@03@³  ³  ³  ³@0C@ÛÛ@03@³  ³  ³  ³@0B@ÛÛ@03@³  ³  ³@0C@ÛÛ@03@³"
   print "@05@ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ@03@ÀÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÙ"
end function

function RedrawBoard as boolean
   PLocate 3, 33  : print "@03@ÚÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄÂÄÄ¿"
   PLocate 4, 33  : print "@03@³@0C@ÛÛ@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0C@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³@0C@ÛÛ@03@³"
   PLocate 5, 33  : print "@03@³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
   PLocate 6, 33  : print "@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³"
   PLocate 7, 33  : print "@03@³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
   PLocate 8, 33  : print "@03@³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³"
   PLocate 9, 33  : print "@03@³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³"
   PLocate 10, 33 : print "@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³"
   PLocate 11, 33 : print "@03@³@0C@ÛÛ@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³@0C@ÛÛ@03@³"
   PLocate 12, 33 : print "@03@³__³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³"
   PLocate 13, 33 : print "@03@³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³"
   PLocate 14, 33 : print "@03@³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³__³@0D@ÛÛ@03@³__³__³__³__³"
   PLocate 15, 33 : print "@03@³@0B@ÛÛ@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³@0B@ÛÛ@03@³"
   PLocate 16, 33 : print "@03@³__³__³@0D@ÛÛ@03@³__³__³__³@0B@ÛÛ@03@³__³@0B@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³__³"
   PLocate 17, 33 : print "@03@³__³@0D@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@09@ÛÛ@03@³__³__³__³@0D@ÛÛ@03@³__³"
   PLocate 18, 33 : print "@03@³@0C@ÛÛ@03@³  ³  ³@0B@ÛÛ@03@³  ³  ³  ³@0C@ÛÛ@03@³  ³  ³  ³@0B@ÛÛ@03@³  ³  ³@0C@ÛÛ@03@³"
   PLocate 19, 33 : print "@03@ÀÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÁÄÄÙ"
end function

function ShowGameStatus(Force as boolean) as boolean
   if not cf.ShowStatus and not Force then exit function
   
   Cls
   Print
   Print "  @0F@PSScrabble Game Status"
   print Bar(75,0,9)
   print
   print "  @03@Current Active Game Numbers   @08@: @0F@";GetCurrentActiveGames
   print
   print "  @03@Games Numbers Needing Players @08@: @0F@";GetGamesNeedingPlayers
   print
   print "  @03@Games Numbers You Are Playing @08@: @0F@";GetGamesPlaying
   print
   print "  @03@Your Turn In Games Numbers    @08@: @0F@";GetYourTurnInGames
   print
   print Bar(75,0,1)
   print
   print "  ";
   Pause
end function

function CheckGameInProgress as boolean
   dim GameCounter as integer
   dim PlayerCounter as byte
   dim TempGameStruct as TGame
   dim PageCounter as byte = 3

   Cls
   Print
   Print "  @0F@Status On Currently Active Games @08@(@07@Highlighed name indicates current turn@08@)"
   if CountActiveGames = 0 then
      print
      print Bar(75,0,9)
      print "  @0F@There are currently no active games.  Please create one."
      print Bar(75,0,1)
      print
      print "  ";
      Pause
      exit function
   end if

   print Bar(75,0,9)
   print
   print "  @07@#    @0F@Player Name @08@(@07@Score@08@)"
   print
   
   for GameCounter = 1 to CountGames
      clear TempGameStruct
      GetGame(GameCounter, TempGameStruct)
      if TempGameStruct.BeingPlayed then
         inc(PageCounter)
         if InGame(TempGameStruct) then
            'print "  @1F@";pad(str(GameCounter), 4);"@0F@ ";
            print "  @0B@";pad(str(GameCounter), 4);" ";
         else
            print "  @03@";pad(str(GameCounter), 4);" ";
         end if
         for PlayerCounter = 0 to TempGameStruct.NumPlayers - 1
            if TempGameStruct.WhosTurn = PlayerCounter then
               print "@1B@";TempGameStruct.Player(PlayerCounter).PlayerName;"@03@ (@0F@";TempGameStruct.Player(PlayerCounter).Score;"@03@)  ";
            else
               print "@0B@";TempGameStruct.Player(PlayerCounter).PlayerName;"@03@ (@0F@";TempGameStruct.Player(PlayerCounter).Score;"@03@)  ";
            end if
         next
         print
         if PageCounter = 17 then
            PageCounter = 3
            print
            Pause
            Cls
            Print
            Print "  @0F@Status On Currently Active Games"
            print Bar(75,0,9)
            print
            print "  @07@#    @0F@Player Name @08@(@07@Score@08@)"
            print
         end if
      end if
   next
   
   print
   print Bar(75,0,1)
   print
   print "  ";
   Pause
end function

function WinnersBulletin as boolean
   dim GameCounter as integer
   dim PlayerCounter as byte
   dim TempGameStruct as TGame
   dim ListCounter as byte = 1
   dim TopScores as THighScore
   dim TopGamesWon as THighGamesWon
   dim TopWords as THighWord

   Cls
   Print
   Print "  @0F@PSScrabble Top Players"
   if CountActiveGames = 0 then
      print
      print Bar(75,0,9)
      print "  @0F@There are currently no active games.  Please create one."
      print Bar(75,0,1)
      print
      print "  ";
      Pause
      exit function
   end if

   print Bar(79,0,9)
   print "   @0F@";pad("Top Scores",22);pad("Most Games Won",22);pad("Top Scoring Words",22)
   print Bar(79,0,1)
   
   for ListCounter = 0 to 9
      GetTopScore(ListCounter, TopScores)
      GetTopGamesWon(ListCounter, TopGamesWon)
      GetTopWord(ListCounter, TopWords)
      print "@07@";pad(str(ListCounter + 1), 2);" @09@";TopScores.PlayerName;"@08@";string(18-len(TopScores.PlayerName) + (3 - Len(str(TopScores.Score))), ".");"@0F@";TopScores.Score;
      print " @0D@";TopGamesWon.PlayerName;"@08@";string(18-len(TopGamesWon.PlayerName) + (3 - Len(str(TopGamesWon.Games))), ".");"@0F@";TopGamesWon.Games;
      print " @0C@";TopWords.PlayerName;"@08@";string(18-len(TopWords.PlayerName) + (14 - Len(TopWords.Word)), ".");"@0F@";left(TopWords.Word,15)
   next

   print
   print Bar(79,0,8)
   print
   print "  ";
   Pause
end function

function GetGameFromHost(byval GameChannel as integer, GamePlay as TGame) as boolean
   GetGameFromHost = false
   if ReadChannel(0, msg) then
      if msg.Channel = GameChannel then
         if ProcessGamePlayMsg(msg, GamePlay) then GetGameFromHost = true
      else
         ProcessGameControlMsg(msg)
      end if
   end if
end function

function ProcessGamePlayMsg(msg as TChannelMessage, GamePlay as TGame) as boolean
   dim WriteBoardData as integer = -1
   select case msg.UserData
      case ONLINEGAME_TILEUPDATE 'Don't need
      case ONLINEGAME_NOTIFYTURN 'Don't need
      case ONLINEGAME_PLAYERLEFT 
      case ONLINEGAME_SCOREUPDATE 'Don't need
      case ONLINEGAME_TILEPLACED
         dim TilePlaced as TTilePlaced absolute msg.Data
         
         if TilePlaced.UserID <> user.info.id then 'Don't echo user's own tile back to them
            PLocate TilePlaced.YCor + 4, (TilePlaced.XCor * 3) + 34
            
            if TilePlaced.Letter = chr(32) then
               select case GetPlaceValueIgnore(TilePlaced.YCor, TilePlaced.XCor)
                  case 1
                     print "@0D@";string(2, 219);
                  case 2
                     print "@0B@";string(2, 219);
                  case 3
                     print "@0C@";string(2, 219);
                  case 4
                     print "@09@";string(2, 219);
                  case else
                     print "@03@__";
               end select
            else
               if TilePlaced.Wildcard then
                  print "@70@";TilePlaced.Letter;"?@07@";
               else
                  print "@70@";TilePlaced.Letter;" @07@";
               end if
            end if
            
            GamePlay.Col(TilePlaced.XCor).Row(TilePlaced.YCor) = ucase(TilePlaced.Letter)
         end if
      case ONLINEGAME_CHATMSG
         dim WhatMsg as TChatMsg absolute msg.Data
         
         if (WhatMsg.Private and GamePlay.Player(WhatMsg.WhisperTo - 1).Id = user.info.id) or not WhatMsg.Private then
            dim GetChatMsg as string = ""
            if trim(ucase(WhatMsg.ChatMsg)) = "SMILE" then
               if WhatMsg.DirectedTo > 0 then
                  if GamePlay.Player(WhatMsg.DirectedTo - 1).ID = user.info.id then
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ smiles at @0F@You@08@..."
                  else
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ smiles at @0F@" + GamePlay.Player(WhatMsg.DirectedTo - 1).PlayerName + "@08@..."
                  end if
               else
                  GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ smiles@08@..."
               end if
            end if
            if trim(ucase(WhatMsg.ChatMsg)) = "LAUGH" then
               if WhatMsg.DirectedTo > 0 then
                  if GamePlay.Player(WhatMsg.DirectedTo - 1).ID = user.info.id then
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ laughs out loud at @0F@You@08@!"
                  else
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ laughs out loud at @0F@" + GamePlay.Player(WhatMsg.DirectedTo - 1).PlayerName + "@08@!"
                  end if
               else
                  GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ laughs out loud@08@!"
               end if
            end if
            if trim(ucase(WhatMsg.ChatMsg)) = "THINK" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ is currently thinking@08@..."
            if trim(ucase(WhatMsg.ChatMsg)) = "YAWN" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ yawns quite noticeably@08@..."
            if trim(ucase(WhatMsg.ChatMsg)) = "WHISTLE" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ whistles a merry little tune@08@..."
            if trim(ucase(WhatMsg.ChatMsg)) = "SIGH" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ sighs in relief@08@..."
            if trim(ucase(WhatMsg.ChatMsg)) = "THUMB" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ starts thumbing through the OSPD looking for words@08@..."
            if trim(ucase(WhatMsg.ChatMsg)) = "APPLAUD" then
               if WhatMsg.DirectedTo > 0 then
                  if GamePlay.Player(WhatMsg.DirectedTo - 1).ID = user.info.id then
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ applauds for @0F@You@08@..."
                  else
                     GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ applauds for @0F@" + GamePlay.Player(WhatMsg.DirectedTo - 1).PlayerName + "@08@..."
                  end if
               else
                  GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ applauds@08@..."
               end if
            end if
            if trim(ucase(WhatMsg.ChatMsg)) = "JOY" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ jumps for joy@08@!"
            if trim(ucase(WhatMsg.ChatMsg)) = "WISH" then GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ wishes he had a certain tile in his hand@08@..."
            if WhatMsg.ChatMsg(1) = "=" then
               GetChatMsg = "@0F@" + WhatMsg.Sender + "@07@ " + right(WhatMsg.ChatMsg, len(WhatMsg.ChatMsg) - 1)
            end if
            
            if GetChatMsg = "" then
               if WhatMsg.DirectedTo > 0 then
                  if GamePlay.Player(WhatMsg.DirectedTo - 1).Id = user.info.id then
                     GetChatMsg = "@03@" + WhatMsg.Sender + "@08@: @03@(To @0B@You@03@) @0F@" + WhatMsg.ChatMsg
                  else
                     GetChatMsg = "@03@" + WhatMsg.Sender + "@08@: @03@(To @0B@" + GamePlay.Player(WhatMsg.DirectedTo - 1).PlayerName + "@03@) @0F@" + WhatMsg.ChatMsg
                  end if
               else
                  if WhatMsg.Private and GamePlay.Player(WhatMsg.WhisperTo - 1).Id = user.info.id then
                     GetChatMsg = "@03@" + WhatMsg.Sender + "@08@: @03@(@0B@PRIV@03@) @0F@" + WhatMsg.ChatMsg
                  else
                     if not WhatMsg.Private then
                        GetChatMsg = "@03@" + WhatMsg.Sender + "@08@: @0F@" + WhatMsg.ChatMsg
                     end if
                  end if
               end if
            end if
            UpdateMsgBuffer(GetChatMsg)
         end if
      case ONLINEGAME_PASSTURN
         dim WhoPassed as TPlayer absolute msg.Data
         
         if WhoPassed.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoPassed.PlayerName;"@03@ has just passed their turn.";
            sleep(2500)
         end if
      case ONLINEGAME_BADMOVELIMIT
         dim WhoLostTurn as TPlayer absolute msg.Data
         
         if WhoLostTurn.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoLostTurn.PlayerName;"@03@ exceeded the bad moves limit and lost their turn!";
            sleep(2500)
         end if
      case ONLINEGAME_SHUFFLEPASS
         dim WhoTraded as TPlayer absolute msg.Data
         
         if WhoTraded.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoTraded.PlayerName;"@03@ has traded in tiles, passing their turn.";
            sleep(2500)
         end if
      case ONLINEGAME_CONCEDE
         dim WhoConceded as TPlayer absolute msg.Data
         dim FindWho as byte
         
         ClearHelpWindow
         PLocate 20, 1
         print "@0B@";WhoConceded.PlayerName;"@03@ has just conceded, and left the game.";
         if GamePlay.Player(0).id = WhoConceded.Id then GamePlay.Player(0).id = 0
         if GamePlay.Player(1).id = WhoConceded.Id then GamePlay.Player(1).id = 0
         if GamePlay.Player(2).id = WhoConceded.Id then GamePlay.Player(2).id = 0
         if GamePlay.Player(3).id = WhoConceded.Id then GamePlay.Player(3).id = 0

         DispHandInfo(GamePlay, true, true)
         HilightWhosTurn(GamePlay)
         sleep(2500)
      case ONLINEGAME_OUTOFTIME
         dim WhoRanOut as TPlayer absolute msg.Data
         dim FindWhosOut as byte
         
         ClearHelpWindow
         PLocate 20, 1
         print "@0B@";WhoRanOut.PlayerName;"@03@ has ran out of time!";
         sleep(3000)
      case ONLINEGAME_GAMEENDED
      case ONLINEGAME_BADWORD
      case ONLINEGAME_BADMOVE
         if GamePlay.Player(GamePlay.WhosTurn).Id <> user.info.id then
            dim UndoMove as TPlay absolute msg.Data
            dim UndoMoveCounter as byte
            
            for UndoMoveCounter = 0 to UndoMove.LettersPlaced - 1
               PLocate UndoMove.TilesPlaced(UndoMoveCounter).YCor + 4, (UndoMove.TilesPlaced(UndoMoveCounter).XCor * 3) + 34
               GamePlay.Col(UndoMove.TilesPlaced(UndoMoveCounter).XCor).Row(UndoMove.TilesPlaced(UndoMoveCounter).YCor) = ""
               
               select case GetPlaceValueIgnore(UndoMove.TilesPlaced(UndoMoveCounter).YCor, UndoMove.TilesPlaced(UndoMoveCounter).XCor)
                  case 1
                     print "@0D@";string(2, 219);
                  case 2
                     print "@0B@";string(2, 219);
                  case 3
                     print "@0C@";string(2, 219);
                  case 4
                     print "@09@";string(2, 219);
                  case else
                     print "@03@__";
               end select
            next
            
            ClearHelpWindow
            PLocate 20,1
            print "@0B@";GamePlay.Player(GamePlay.WhosTurn).PlayerName;" @03@made an invalid move."
         end if
      case ONLINEGAME_GAMEUPDATE
         dim pmsg as TGameShort absolute msg.Data
         
         GamePlay.BeingPlayed = pmsg.BeingPlayed
         GamePlay.WhosTurn = pmsg.WhosTurn
         GamePlay.Player(0) = pmsg.Player(0)
         GamePlay.Player(1) = pmsg.Player(1)
         GamePlay.Player(2) = pmsg.Player(2)
         GamePlay.Player(3) = pmsg.Player(3)
         GamePlay.NumPlayers = pmsg.NumPlayers
         memcpy(@GamePlay.Tiles, @pmsg.Tiles, sizeof(pmsg.Tiles))
         GamePlay.TilesLeft = pmsg.TilesLeft
         ProcessGamePlayMsg = true
      case ONLINEGAME_DROPCARRIER
         dim WhoDropped as TPlayer absolute msg.Data
         dim FindWhoDropped as byte
         
         ClearHelpWindow
         PLocate 20, 1
         print "@0B@";WhoDropped.PlayerName;"@03@ has just dropped carrier, temporarily leaving the game.";
         for FindWhoDropped = 0 to GamePlay.NumPlayers - 1
            if GamePlay.Player(FindWhoDropped).Id = WhoDropped.Id then
               GamePlay.Player(FindWhoDropped).Id = GamePlay.Player(FindWhoDropped).Id * -1
               exit for
            end if
         next
         DispHandInfo(GamePlay, true, true)
         HilightWhosTurn(GamePlay)
         sleep(2500)
      case ONLINEGAME_GAMEOVER
         dim WhoSentIt as TPlayer absolute msg.Data
         
         if WhoSentIt.Id <> user.info.Id then
            GamePlay.BeingPlayed = False
            GetCurrentDateTime(GamePlay.DateComplete)
            GamePlay.Completed = True
            GameOver(GamePlay)
         end if
      case ONLINEGAME_GAMESAVED
         dim GameInfo as TGameShort absolute msg.Data
         
         if GameInfo.Player(0).id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "  @0F@The host has saved this game under Game Number @0B@";GameInfo.GameNumber;"@08@.@0F@  Multinode play"
            print "  mode will now end@08@."
            print
            print "  ";
            Pause

            GamePlay.BeingPlayed = False
            GetCurrentDateTime(GamePlay.DateComplete)
            GamePlay.Completed = True
         end if
      case ONLINEGAME_REJOIN
         dim WhoIsBack as TPlayer absolute msg.Data
         dim FindWhoIsBack as byte
         
         if WhoIsBack.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoIsBack.PlayerName;"@03@ has just rejoined the game.";
            for FindWhoIsBack = 0 to GamePlay.NumPlayers - 1
               if abs(GamePlay.Player(FindWhoIsBack).Id) = WhoIsBack.Id then
                  GamePlay.Player(FindWhoIsBack).Id = abs(GamePlay.Player(FindWhoIsBack).Id)
                  exit for
               end if
            next
            'Since the entire board information struct is too big to pass through a system channel, we're
            'gonna drop it to the HDD for the rejoining party to pick up
            WriteBoardData = open GetPath + "TempFile." + str(GamePlay.GameNumber) for random len=sizeof(TGame)
            if WriteBoardData > 0 then
               put #WriteBoardData, 1, GamePlay
               close #WriteBoardData
            end if
            DispHandInfo(GamePlay, true, true)
            HilightWhosTurn(GamePlay)
            sleep(2500)
         end if
      case ONLINEGAME_SPECTATE_ENTER
         dim WhoIsHere as TPlayer absolute msg.Data
         dim FindWhoIsHere as byte
         
         if WhoIsHere.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoIsHere.PlayerName;"@03@ is spectating your game.";
            WriteBoardData = open GetPath + "TempFile." + str(GamePlay.GameNumber) for random len=sizeof(TGame)
            if WriteBoardData > 0 then
               put #WriteBoardData, 1, GamePlay
               close #WriteBoardData
            end if
            sleep(2500)
         end if
      case ONLINEGAME_SPECTATE_LEAVE
         dim WhoIsGone as TPlayer absolute msg.Data
         dim FindWhoIsGone as byte
         
         if WhoIsGone.Id <> user.info.id then
            ClearHelpWindow
            PLocate 20, 1
            print "@0B@";WhoIsGone.PlayerName;"@03@ is no longer spectating your game.";
            sleep(2500)
         end if
   end select
end function

function ConvertLongGameToShort(GamePlay as TGame, GamePlayShort as TGameShort)
   GamePlayShort.GameNumber = GamePlay.GameNumber
   GamePlayShort.BeingPlayed = GamePlay.BeingPlayed
   GamePlayShort.WhosTurn = GamePlay.WhosTurn
   GamePlayShort.Player(0) = GamePlay.Player(0)
   GamePlayShort.Player(1) = GamePlay.Player(1)
   GamePlayShort.Player(2) = GamePlay.Player(2)
   GamePlayShort.Player(3) = GamePlay.Player(3)
   GamePlayShort.NumPlayers = GamePlay.NumPlayers
   memcpy(@GamePlayShort.Tiles, @GamePlay.Tiles, sizeof(GamePlay.Tiles))
   GamePlayShort.TilesLeft = GamePlay.TilesLeft
end function

function ConvertShortGameToLong(GamePlay as TGame, GamePlayShort as TGameShort)
   GamePlay.BeingPlayed = GamePlayShort.BeingPlayed
   GamePlay.WhosTurn = GamePlayShort.WhosTurn
   GamePlay.Player(0) = GamePlayShort.Player(0)
   GamePlay.Player(1) = GamePlayShort.Player(1)
   GamePlay.Player(2) = GamePlayShort.Player(2)
   GamePlay.Player(3) = GamePlayShort.Player(3)
   GamePlay.NumPlayers = GamePlayShort.NumPlayers
   memcpy(@GamePlay.Tiles, @GamePlayShort.Tiles, sizeof(GamePlayShort.Tiles))
   GamePlay.TilesLeft = GamePlayShort.TilesLeft
end function

function HilightWhosTurn(GamePlay as TGame)
   dim FindCurPlayer as byte
   
   for FindCurPlayer = 6 to GamePlay.NumPlayers + 6
      PLocate FindCurPlayer, 3
      if FindCurPlayer - 6 = GamePlay.WhosTurn then
         if GamePlay.Player(GamePlay.WhosTurn).Id = user.info.id then
            print "@9F@";GamePlay.Player(FindCurPlayer - 6).PlayerName;"@07@";
         else
            print "@1F@";GamePlay.Player(FindCurPlayer - 6).PlayerName;"@07@";
         end if
      else
         if GamePlay.Player(FindCurPlayer - 6).Id > 0 then
            print "@03@";GamePlay.Player(FindCurPlayer - 6).PlayerName;
         else
            if GamePlay.Player(FindCurPlayer - 6).Id = 0 then
               print "@08@";GamePlay.Player(FindCurPlayer - 6).PlayerName;
            else
               print "@07@";GamePlay.Player(FindCurPlayer - 6).PlayerName;
            end if
         end if
      end if
   next
end function

function ReturnTiles(GamePlay as TGame, WhichPlayer as TPlayer)
   dim TileScanner as byte
   for TileScanner = 0 to 6
      if asc(WhichPlayer.TilesInHand(TileScanner)) >= 65 and asc(WhichPlayer.TilesInHand(TileScanner)) <= 90 or WhichPlayer.TilesInHand(TileScanner) = "?" then
         GamePlay.Tiles(GamePlay.TilesLeft) = WhichPlayer.TilesInHand(TileScanner)
         inc(GamePlay.TilesLeft)
      end if
   next
end function

function SendChatMsg(GamePlay as TGame, GameChannel as integer, UseMomentum as boolean, FirstChar as integer) as boolean
   SendChatMsg = false
   dim OurMsg as TChatMsg
   dim TurnBackup as byte
   clear OurMsg
   
   PLocate MAXLINE_LENGTH,1
   print "@08@:@0F@";
   
   dim RetInp as string = ""
   dim col0 as byte
   dim row as byte
   dim col as byte
   dim TimeStarted as DateTime
   dim WhisperMode as boolean
   dim DirectionMode as boolean
   dim PageMode as boolean
   
   GetCurrentDateTime(TimeStarted)
    
   col0 = POS
    
   row = MAXLINE_LENGTH
   col = POS + 1
    
   do
      if GetSecondsSince(TimeStarted) > 5 and len(trim(OurMsg.ChatMsg)) < 2  then
         OurMsg.ChatMsg = ""
         PLocate MAXLINE_LENGTH,1
         print string(80,32);
         PLocate 20,1
         exit do
      end if
      
      if ReadChannel(0, msg) then
         if msg.Channel = GameChannel then
            TurnBackup = GamePlay.WhosTurn
            ProcessGamePlayMsg(msg, GamePlay)
            if GamePlay.WhosTurn <> TurnBackup then HilightWhosTurn(GamePlay)
         else
            ProcessGameControlMsg(msg)
         end if
         PLocate MAXLINE_LENGTH, 1
         print "@08@:@0F@";OurMsg.ChatMsg;
      end if
    
      if FirstChar > 0 then
         RetInp = chr(FirstChar)
         FirstChar = 0
      else
         RetInp = chr(ReadKey(100))
      end if
      if RetInp = chr(27) then
         OurMsg.ChatMsg = ""
         PLocate MAXLINE_LENGTH,1
         print string(80,32);
         PLocate 20,1
         SendChatMsg = true
         exit do
      end if
      if asc(RetInp) <> 0 then GetCurrentDateTime(TimeStarted)
      if RetInp = chr(8) then
         if WhisperMode or DirectionMode or PageMode or (OurMsg.WhisperTo + OurMsg.DirectedTo > 0 and trim(OurMsg.ChatMsg) = "") then
            PageMode=false : WhisperMode=false : DirectionMode=false
            OurMsg.WhisperTo = 0
            OurMsg.DirectedTo = 0
            ClearHelpWindow
            UpdateMsgBuffer
            PLocate MAXLINE_LENGTH,1
            print "@08@:@0F@";
            OurMsg.ChatMsg=""
            row=24
            col=POS+1
         else
            PLocate row, col
              
            RetInp = ""
            if (col - 1) > col0 then
               OurMsg.ChatMsg = LEFT(OurMsg.ChatMsg, (len(OurMsg.ChatMsg) - 1))
               dec(col)
               PLocate row, col
               print " ";
            end if
         end if
      end if
      if RetInp = chr(9) then
        RetInp = ""
      end if
      PLocate row, col
      if RetInp="/" and WhisperMode and OurMsg.ChatMsg="/" then
         WhisperMode=false : DirectionMode=false
         PLocate row, 1
         print "@0F@  PAGE WHOM@08@: @07@";
         col = 14
         dim WhichUserToPage as string
         WhichUserToPage = PageAnotherNode
         if trim(WhichUserToPage) <> "" then
            dim ni as TNodeInfo
            if not GetNodeInfoByName(WhichUserToPage, ni) then
               ClearHelpWindow
               UpdateMsgBuffer("@0F@That user is no longer online...")
            end if
            
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and not ni.UserPageAvailable then
               ClearHelpWindow
               UpdateMsgBuffer("@0F@That user is not available for paging...")
            end if
            
            ClearHelpWindow
            PLocate 20,1
            print "@0F@Enter your page message:"
            dim s(3) as string * 79
            print " ";
            s(1) = AskString(75)
            if trim(s(1)) <> "" then 
               print " ";
               s(2) = AskString(75)
            end if
            if trim(s(2)) <> "" then
               print " ";
               s(3) = AskString(75)
            end if

            if trim(s(1)) <> "" then
               dim pmsg as TPageMessage
               clear pmsg
               pmsg.From = User.Info.Name
               pmsg.Message(1) = s(1)
               pmsg.Message(2) = s(2)
               pmsg.Message(3) = s(3)
               
               WriteChannel(OpenChannel("System.Page"), ni.ConnectionId, 0, pmsg, sizeof(pmsg))
            end if
         end if
         ClearHelpWindow
         UpdateMsgBuffer
         PLocate 20,1
         exit function
      else
         if len(OurMsg.ChatMsg)=0 and (RetInp = "/" or RetInp = ">") then
            select case RetInp
               case "/"
                  PageMode=false : WhisperMode=false : DirectionMode=false
                  WhisperMode=true
                  OurMsg.ChatMsg="/"
                  PLocate row, 1
                  print "@0F@  WHISPER TO@08@: @07@";
                  col = 15
               case ">"
                  PageMode=false : WhisperMode=false : DirectionMode=false
                  DirectionMode=true
                  OurMsg.ChatMsg=">"
                  PLocate row, 1
                  print "@0F@  SPEAK TO@08@: @07@ ";
                  col = 13
            end select
         else
             if RetInp <> chr(13) then
               if (WhisperMode or DirectionMode) and (asc(RetInp) >= asc("1") and asc(RetInp) <= asc("4")) then
                  if GamePlay.Player(val(RetInp) - 1).id = user.info.id then
                     ClearHelpWindow
                     UpdateMsgBuffer("@0F@Umm, that would be you :)")
                     exit function
                  else
                     if val(RetInp) <= GamePlay.NumPlayers then
                        PLocate row, 1
                        print "@08@ - @0F@To ";GamePlay.Player(val(RetInp) - 1).PlayerName;"@08@: @0F@";
                        col = len(GamePlay.Player(val(RetInp) - 1).PlayerName) + 9
                        
                        if WhisperMode then
                           OurMsg.WhisperTo = val(RetInp)
                           OurMsg.DirectedTo = 0
                        end if
                        
                        if DirectionMode then
                           OurMsg.DirectedTo = val(RetInp)
                           OurMsg.WhisperTo = 0
                        end if
                        PageMode=false : WhisperMode=false : DirectionMode=false
                        OurMsg.ChatMsg = ""
                     end if
                  end if
               else
                  if not (WhisperMode or DirectionMode or PageMode) then
                     if len(OurMsg.ChatMsg) < 78 and col < 78 - len(user.info.name) then
                        if asc(RetInp) > 31 and asc(RetInp) < 127 then
                           if RetInp <> "" then
                              print RetInp;
                              inc(col)
                              OurMsg.ChatMsg = OurMsg.ChatMsg + RetInp
                              RetInp = ""
                           end if
                        end if
                     end if
                  else
                     if RetInp <> "" then
                        dim GrabTheirNumber as byte
                        dim TheirPlayerName as string
                        TheirPlayerName = InputPlayerName(GamePlay, asc(RetInp))
                        if TheirPlayerName <> "" then
                           for GrabTheirNumber = 0 to GamePlay.NumPlayers - 1
                              if ucase(GamePlay.Player(GrabTheirNumber).PlayerName)=ucase(TheirPlayerName) then exit for
                           next
                           
                           if GamePlay.Player(GrabTheirNumber).id = user.info.id then
                              ClearHelpWindow
                              UpdateMsgBuffer("@0F@Umm, that would be you :)")
                              exit function
                           end if
                           
                           PLocate row, 1
                           print string(80, 32);
                           PLocate row, 1
                           print "@08@ - @0F@To ";GamePlay.Player(GrabTheirNumber).PlayerName;"@08@: @0F@";
                           col = len(GamePlay.Player(GrabTheirNumber).PlayerName) + 9
                           
                           if WhisperMode then
                              OurMsg.WhisperTo = GrabTheirNumber + 1
                              OurMsg.DirectedTo = 0
                           end if
                           
                           if DirectionMode then
                              OurMsg.DirectedTo = GrabTheirNumber + 1
                              OurMsg.WhisperTo = 0
                           end if
                           PageMode=false : WhisperMode=false : DirectionMode=false
                           OurMsg.ChatMsg = ""
                        else
                           ClearHelpWindow
                           UpdateMsgBuffer
                           PLocate 20, 1
                           exit function
                        end if
                     end if
                  end if
               end if
             else
               exit do
             end if
         end if
      end if
   loop
   
   OurMsg.Private = (OurMsg.WhisperTo > 0)
   if mid(OurMsg.ChatMsg, 1, 1) = "/" or mid(OurMsg.ChatMsg, 1, 1) = ">" then OurMsg.ChatMsg = right(OurMsg.ChatMsg, len(OurMsg.ChatMsg) - 1)
   
   dim TempChatMsg as string = OurMsg.ChatMsg
   if trim(OurMsg.ChatMsg) <> "" and Not BadAts(TempChatMsg) then
      if trim(ucase(OurMsg.ChatMsg)) = "-MOMENTUM" then
         dim PlayerUpdate as TPlayerRecord
         GetPlayerInfo(PlayerUpdate)
         PlayerUpdate.DisableMomentum = not PlayerUpdate.DisableMomentum
         UseMomentum = not PlayerUpdate.DisableMomentum
         UpdatePlayerInfo(PlayerUpdate)
         if PlayerUpdate.DisableMomentum then
            UpdateMsgBuffer("@07@Tile Placement Momentum Is Now@08@: @0F@OFF")
         else
            UpdateMsgBuffer("@07@Tile Placement Momentum Is Now@08@: @0F@ON")
         end if
      else
         OurMsg.Sender = UpperLower(user.info.name)
         WriteChannel(GameChannel, 0, ONLINEGAME_CHATMSG, OurMsg, sizeof(OurMsg))
         ClearHelpWindow
         UpdateMsgBuffer
      end if
   end if
end function

function MultinodeGame(WhichGame as TOnlineGame, Rejoining as boolean)
   dim GamePlay as TGame
   dim GamePlayShort as TGameShort
   dim InputChar as integer
   dim Play as TPlay
   dim OurPlayerNum as byte
   dim GameChannel as integer = OpenChannel("Scrabble.Game" + str(WhichGame.GameNumber))
   dim IsBlinking as boolean = true
   dim ShowChatHelp as boolean = true
   dim PlaysTried as byte = 0
   redim WinMsgBuffer(-1) 'Clear out chat msgs from old games!
   dim PlayerUpdate as TPlayerRecord
   GetPlayerInfo(PlayerUpdate)
   dim UseMomentum as boolean = not PlayerUpdate.DisableMomentum
   
   dim LookupOurPlayer as byte
   for LookupOurPlayer = 0 to 3
      if WhichGame.Player(LookupOurPlayer).Id = user.info.id then
         OurPlayerNum = LookupOurPlayer
         exit for
      end if
   next
   
   if Rejoining then WriteChannel(GameChannel, 0, ONLINEGAME_REJOIN, WhichGame.Player(OurPlayerNum), sizeof(WhichGame))
   if WhichGame.Player(0).Id = user.info.id and not Rejoining then
      WriteChannel(GameControl, 0, SCRABBLE_GAMESTART, WhichGame, sizeof(WhichGame))
      sleep(250)
      WhichGame.Status = 1
   
      GamePlay.Player(0) = WhichGame.Player(0)
      GamePlay.Player(1) = WhichGame.Player(1)
      GamePlay.Player(2) = WhichGame.Player(2)
      GamePlay.Player(3) = WhichGame.Player(3)
      
      GamePlay.GameNumber = WhichGame.GameNumber
      GamePlay.OpenGame = False
      GamePlay.BeingPlayed = True
      GamePlay.PlayNumber = 0
      GamePlay.NumPlayers = CountPlayersInOnlineGame(WhichGame)
      GamePlay.WhosTurn = int(rnd(timer) * GamePlay.NumPlayers)
      GetCurrentDateTime(GamePlay.DateStarted)
      GamePlay.Completed = False
      memcpy(@GamePlay.Tiles, @DefaultTileArray, sizeof(DefaultTileArray))
      GamePlay.TilesLeft = NUM_TILES
      GamePlay.TotalScore = 0
      
      for LookupOurPlayer = 0 to GamePlay.NumPlayers - 1
         RefillHand(GamePlay, LookupOurPlayer)
      next
      
      sleep(1000)
      ConvertLongGameToShort(GamePlay, GamePlayShort)
      WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
      WriteOnlineGame(WhichGame)
   else
      if Rejoining then
         sleep(2000)
         dim WriteBoardData as integer = open GetPath + "TempFile." + str(WhichGame.GameNumber) for random len=sizeof(TGame)
         if WriteBoardData > 0 then
            get #WriteBoardData, 1, GamePlay
            close #WriteBoardData
         end if
      else
         GamePlay.GameNumber = WhichGame.GameNumber
         GamePlay.OpenGame = False
         GamePlay.BeingPlayed = True
         GamePlay.WhosTurn = 0
         GamePlay.PlayNumber = 0
         GamePlay.NumPlayers = CountPlayersInOnlineGame(WhichGame)
         GetCurrentDateTime(GamePlay.DateStarted)
         memcpy(@GamePlay.Tiles, @DefaultTileArray, sizeof(DefaultTileArray))
         GamePlay.TilesLeft = NUM_TILES
         GamePlay.TotalScore = 0
   
         dim TimeoutCheck as DateTime
         GetCurrentDateTime(TimeoutCheck)
         
         do
            if GetSecondsSince(TimeoutCheck) > 10 then
               print "@03@Error: Timeout requesting game from host.  Game will exit."
               sleep(2000)
               exit function
            end if
         loop until GetGameFromHost(GameChannel, GamePlay)
      end if
   end if
         
   Our.GameStruct.GameNumber = GamePlay.GameNumber
   Our.GameStruct.Player(0) = GamePlay.Player(0)
   Our.GameStruct.Player(1) = GamePlay.Player(1)
   Our.GameStruct.Player(2) = GamePlay.Player(2)
   Our.GameStruct.Player(3) = GamePlay.Player(3)
   Our.GameStruct.Status = 1
   if GamePlay.Player(0).id = user.info.id then WriteOnlineGame(Our.GameStruct)
   
   RefreshNodeData
   Cls
   ShowBoard

   ClearHelpWindow
   ClearBox
   DispHandInfo(GamePlay, true, true)
   IsBlinking = true
   HilightWhosTurn(GamePlay)
   DoorwayMode(true)

   if not Rejoining then
      PLocate 20, 1
      Print " @03@PSScrabble@08@: @0B@";GamePlay.Player(GamePlay.WhosTurn).PlayerName;"@0F@ drew the highest tile@08@,@0F@ and will go first@08@."

      dim WaitABit as DateTime
      GetCurrentDateTime(WaitABit)
      do : loop until GetSecondsSince(WaitABit) > 5 or ReadKey(100) > 0
   end if
   
   do while GamePlay.BeingPlayed
      if GamePlay.WhosTurn <> OurPlayerNum then
         ClearHelpWindow
         PLocate 20, 4
         print "@03@Waiting for your turn...  Press @0B@ESC@03@ to leave the game."
      end if
      
      do while GamePlay.WhosTurn <> OurPlayerNum
         dim KeyPress as integer
         dim TurnBackup as byte
         
         if ReadChannel(0, msg) then
            if msg.Channel = GameChannel then
               TurnBackup = GamePlay.WhosTurn
               ProcessGamePlayMsg(msg, GamePlay)
               if GamePlay.WhosTurn <> TurnBackup then
                  DispHandInfo(GamePlay, true, true)
                  HilightWhosTurn(GamePlay)
               end if
               if GamePlay.Completed then
                  DoorwayMode(false)
                  exit function
               end if
            else
               ProcessGameControlMsg(msg)
            end if
         end if
         KeyPress = readkey(100)
         CheckMultinodeTimeLeft(GamePlay, OurPlayerNum, GameChannel)
         if KeyPress > 0 then
            select case KeyPress
               case CTRL_T
                  ShowTimeLeft
               case asc("\")
                  OnlinePage
               case CTRL_R, asc("?"), CTRL_W
                  if InputChar = asc("?") then HelpSection(HELP_MULTINODEGAMES)
                  if InputChar = CTRL_W then WhoIsOnline
                  cls
                  ShowBoard
                  DispHandInfo(GamePlay, true, false)
                  PLocate 20,4
                  print "@03@Waiting for your turn...  Press @0B@ESC@03@ to leave the game."
               case else
                  dim ShouldWeConcede as boolean = false
                  if KeyPress <> 27 then ShouldWeConcede = SendChatMsg(GamePlay, GameChannel, UseMomentum, KeyPress)
                  if KeyPress = 27 or ShouldWeConcede then
                     ClearHelpWindow
                     PLocate 20,1
                     if AskYesNo("  @03@Are you sure you want to concede?",false) then
                        WriteChannel(GameChannel, 0, ONLINEGAME_CONCEDE, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                        GamePlay.Player(OurPlayerNum).Id = 0
                        ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
                        ConvertLongGameToShort(GamePlay, GamePlayShort)
                        WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
                        CloseChannel(GameChannel)
                        ClearHelpWindow
                        Our.GameStruct.Player(OurPlayerNum) = GamePlay.Player(OurPlayerNum)
                        WriteOnlineGame(Our.GameStruct)
                        DoorwayMode(false)
                        exit function
                     else
                        ClearHelpWindow
                        PLocate 20, 4
                        print "@03@Waiting for your turn...  Press @0B@ESC@03@ to leave the game."
                     end if
                  end if
            end select
         end if
      loop

      ClearHelpWindow
      ClearBox
      DispHandInfo(GamePlay, true, true)
      IsBlinking = true
      print "@BELL@";
      HilightWhosTurn(GamePlay)
      PlaysTried = 0
      
      'I decided to make it leave the game if you're the last person in, even if people have
      'dropped and the game is waiting for them to call back.  This way, the player can't play
      'over and over again building up points.  change each > 0 to <> 0 to change this behavior.
      dim AnyoneElse as boolean = false
      AnyoneElse = (GamePlay.Player(0).ID > 0 and OurPlayerNum <> 0)
      AnyoneElse = AnyoneElse or (GamePlay.Player(1).ID > 0 and OurPlayerNum <> 1)
      AnyoneElse = AnyoneElse or (GamePlay.Player(2).ID > 0 and OurPlayerNum <> 2)
      AnyoneElse = AnyoneElse or (GamePlay.Player(3).ID > 0 and OurPlayerNum <> 3)
      if not AnyoneElse then
         ClearHelpWindow
         PLocate 20, 3
         print "@0F@There is no one but you left in the game.  Leaving game...";
         Our.GameStruct.Status = 4
         Our.GameStruct.Player(0).Id = 0
         Our.GameStruct.Player(1).Id = 0
         Our.GameStruct.Player(2).Id = 0
         Our.GameStruct.Player(3).Id = 0
         WriteOnlineGame(Our.GameStruct)
         Clear Our.GameStruct
         Our.InGame = false
         sleep(2500)
         CloseChannel(GameChannel)
         ClearHelpWindow
         ClearBox
         RedrawBoard
         ClearHelpWindow
         DoorwayMode(false)
         exit function
      end if
      
      PLocate 20,4
      print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
      print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
      PLocate 21,4
      print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
      
      if ShowChatHelp then
         PLocate 23,4
         print "@03@Press @0B@$@03@ during your turn to chat@08@...";
      end if
      
      InputChar = 0
      dim XPos as byte, Ypos as byte
      dim Momentum as byte = MOMENTUM_OFF 'MOMENTUM_OFF, MOMENTUM_UP, MOMENTUM_DOWN, MOMENTUM_LEFT, MOMENTUM_RIGHT
      dim GameBackup as TGame = GamePlay
      
      Play.LettersPlaced = 0
      
      XPos = 8
      YPos = 8
      
      do
         PLocate YPos + 3, (XPos * 3) + 31
         
         do
            InputChar = ReadKey(100)
            if ReadChannel(0, msg) then
               if msg.Channel = GameChannel then
                  ProcessGamePlayMsg(msg, GamePlay)
                  AnyoneElse = (GamePlay.Player(0).ID > 0 and OurPlayerNum <> 0)
                  AnyoneElse = AnyoneElse or (GamePlay.Player(1).ID > 0 and OurPlayerNum <> 1)
                  AnyoneElse = AnyoneElse or (GamePlay.Player(2).ID > 0 and OurPlayerNum <> 2)
                  AnyoneElse = AnyoneElse or (GamePlay.Player(3).ID > 0 and OurPlayerNum <> 3)
                  if not AnyoneElse then
                     ClearHelpWindow
                     PLocate 20, 3
                     print "@0F@There is no one but you left in the game.  Leaving game...";
                     sleep(2500)
                     CloseChannel(GameChannel)
                     ClearHelpWindow
                     ClearBox
                     RedrawBoard
                     ClearHelpWindow
                     Our.GameStruct.Status = 4
                     WriteOnlineGame(Our.GameStruct)
                     DoorwayMode(false)
                     exit function
                  end if
               else
                  ProcessGameControlMsg(msg)
               end if
            end if
            CheckMultinodeTimeLeft(GamePlay, OurPlayerNum, GameChannel)
         loop until InputChar <> 0
         
         if IsBlinking then
               PLocate 6 + OurPlayerNum, 3
               print "@1F@";GamePlay.Player(OurPlayerNum).PlayerName;"@07@";
               IsBlinking = false
         end if
         
         select case InputChar
            case CTRL_T
               ShowTimeLeft
            case asc("\")
               OnlinePage
            case asc("!")
               ClearHelpWindow
               PLocate 20,1
               if AskYesNo("  @03@Are you sure you want to concede?",false) then
                  do
                     inc(GamePlay.WhosTurn)
                     if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                  loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
               
                  ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
                  GamePlay.Player(OurPlayerNum).Id = 0
                  ConvertLongGameToShort(GamePlay, GamePlayShort)
                  WriteChannel(GameChannel, 0, ONLINEGAME_CONCEDE, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                  WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))

                  CloseChannel(GameChannel)
                  ClearHelpWindow
                  ClearBox
                  RedrawBoard
                  
                  ClearHelpWindow
                  Our.GameStruct.Player(OurPlayerNum) = GamePlay.Player(OurPlayerNum)
                  WriteOnlineGame(Our.GameStruct)
                  clear Our.GameStruct
                  Our.InGame = false
                  DoorwayMode(false)
                  exit function
               else
                  ClearHelpWindow
                  PLocate 20,4
                  print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
                  print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
                  PLocate 21,4
                  print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
               end if
            case asc("@")
               if Play.LettersPlaced = 0 then
                  ClearHelpWindow
                  PLocate 20,1
                  if AskYesNo("  @03@Are you sure you want to pass your turn?",false) then
                     do
                        inc(GamePlay.WhosTurn)
                        if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                     loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                     
                     HilightWhosTurn(GamePlay)
                     ConvertLongGameToShort(GamePlay, GamePlayShort)
                     WriteChannel(GameChannel, 0, ONLINEGAME_PASSTURN, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                     WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
                     InputChar = 27
                  else
                     ClearHelpWindow
                     PLocate 20,4
                     print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
                     print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
                     PLocate 21,4
                     print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
                  end if
               end if
            case asc("#")
               if Play.LettersPlaced <= 0 then
                  dim TempShuffle(7) as string * 1
                  dim PutSomethingThere(7) as boolean
                  dim ShuffleCounter as byte
                  dim WhichPlace as byte
                  
                  clear TempShuffle
                  clear PutSomethingThere
      
                  for ShuffleCounter = 0 to 6
                     do
                        WhichPlace = int(rnd(timer) * 7)
                        
                        if not PutSomethingThere(WhichPlace) then
                           PutSomethingThere(WhichPlace) = true
                           TempShuffle(WhichPlace) = GamePlay.Player(OurPlayerNum).TilesInHand(ShuffleCounter)
                           exit do
                        end if
                     loop
                  next
                  
                  memcpy(@GamePlay.Player(OurPlayerNum).TilesInHand, @TempShuffle, sizeof(TempShuffle))
                  DispHandInfo(GamePlay, true, true)
               end if
            case asc("$")
               ShowChatHelp = false
               SendChatMsg(GamePlay, GameChannel, UseMomentum)
            case asc("%")
               if Play.LettersPlaced = 0 then
                  if DiscardTiles(GamePlay, OurPlayerNum) then
                     do
                        inc(GamePlay.WhosTurn)
                        if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                     loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                     inc(GamePlay.PlayNumber)
                        
                     HilightWhosTurn(GamePlay)
                     DispHandInfo(GamePlay, true, true)
                     ConvertLongGameToShort(GamePlay, GamePlayShort)
                     WriteChannel(GameChannel, 0, ONLINEGAME_SHUFFLEPASS, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                     WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
                     InputChar = 27
                  end if
               end if
            case asc("^")
               if OurPlayerNum = 0 then
                  dim GameNum as integer = 0
                  if ConvertOnlineGameToOfflineGame(GamePlay, GameNum) then 'They did it, everyone can leave now...
                     ConvertLongGameToShort(GamePlay, GamePlayShort)
                     WriteChannel(GameChannel, 0, ONLINEGAME_GAMESAVED, GamePlayShort, sizeof(GamePlayShort))
                     
                     CloseChannel(GameChannel)
                     ClearHelpWindow
                     ClearBox
                     RedrawBoard
                     
                     ClearHelpWindow
                     DoorwayMode(false)
   
                     exit function
                  end if
               else
                  ClearHelpWindow
                  PLocate 20, 2
                  print "@0F@Only the Game Host can save a multinode game for offline play.";
               end if
            case asc("5")
               YPos = 8
               XPos = 8
            case asc("7")
               if YPos > 1 then
                  dec(YPos)
               end if
               if XPos > 1 then
                  dec(XPos)
               end if
            case asc("9")
               if YPos > 1 then
                  dec(YPos)
               end if
               if XPos < 15 then
                  inc(XPos)
               end if
            case asc("1")
               if YPos < 15 then
                  inc(YPos)
               end if
               if XPos > 1 then
                  dec(XPos)
               end if
            case asc("3")
               if YPos < 15 then
                  inc(YPos)
               end if
               if XPos < 15 then
                  inc(XPos)
               end if
            case KEY_UP, asc("8")
               if YPos > 1 then
                  dec(YPos)
                  Momentum = MOMENTUM_UP
               end if
            case KEY_DOWN, asc("2")
               if YPos < 15 then
                  inc(YPos)
                  Momentum = MOMENTUM_DOWN
               end if
            case KEY_LEFT, asc("4")
               if XPos > 1 then
                  dec(XPos)
                  Momentum = MOMENTUM_LEFT
               end if
            case KEY_RIGHT, asc("6")
               if XPos < 15 then
                  inc(XPos)
                  Momentum = MOMENTUM_RIGHT
               end if
            case KEY_DEL, 32
               if not OpenSpot(GamePlay, XPos - 1, YPos - 1) then
                  If InPlay(Play, XPos - 1, YPos - 1) then
                     dim FindHandPos as byte
                     dim DeleteFromStack as byte
      
                     select case GetPlaceValueIgnore(YPos - 1, XPos - 1) 
                        case 1
                           print "@0D@";string(2, 219);
                        case 2
                           print "@0B@";string(2, 219);
                        case 3
                           print "@0C@";string(2, 219);
                        case 4
                           print "@09@";string(2, 219);
                        case else
                           print "@03@__";
                     end select
                     
                     For FindHandPos = 0 to Play.LettersPlaced - 1
                        if Play.TilesPlaced(FindHandPos).XCor = XPos - 1 then
                           if Play.TilesPlaced(FindHandPos).YCor = YPos - 1 then
                              if Play.TilesPlaced(FindHandPos).Wildcard then
                                 GamePlay.Player(OurPlayerNum).TilesInHand(Play.TilesPlaced(FindHandPos).HandPos) = "?"
                              else
                                 GamePlay.Player(OurPlayerNum).TilesInHand(Play.TilesPlaced(FindHandPos).HandPos) = Play.TilesPlaced(FindHandPos).Letter
                              end if
                              PLocate 17, 5 + (Play.TilesPlaced(FindHandPos).HandPos * 3)
                              if Play.TilesPlaced(FindHandPos).Wildcard then
                                 print "@70@? @07@";
                              else
                                 print "@70@";Play.TilesPlaced(FindHandPos).Letter;" @07@";
                              end if
                              Play.TilesPlaced(FindHandPos).Letter = chr(32)
                              Play.TilesPlaced(FindHandPos).UserID = user.info.id
                              WriteChannel(GameChannel, 0, ONLINEGAME_TILEPLACED, Play.TilesPlaced(FindHandPos), sizeof(Play.TilesPlaced(FindHandPos)))
                              GamePlay.Col(XPos - 1).Row(YPos - 1) = chr(32)
                              for DeleteFromStack = FindHandPos to Play.LettersPlaced - 1
                                 Play.TilesPlaced(DeleteFromStack) = Play.TilesPlaced(DeleteFromStack + 1)
                              next
                              dec(Play.LettersPlaced)
                              if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                              exit for
                           end if
                        end if
                     next
                  end if
               end if
            case asc("A") to asc("Z"), asc("a") to asc("z")
               dim FindLetter as byte
               dim LetterFound as boolean = false
               
               if OpenSpot(GamePlay, XPos - 1, YPos - 1) then
                  for FindLetter = 0 to 6
                     if GamePlay.Player(OurPlayerNum).TilesInHand(FindLetter) = ucase(chr(InputChar)) then
                        LetterFound = true
                        if csrlin <> YPos + 3 or pos <> (XPos * 3) + 31 then PLocate YPos + 3, (XPos * 3) + 31
                        Print "@70@";ucase(chr(InputChar));" @0F@";
                        GamePlay.Player(OurPlayerNum).TilesInHand(FindLetter) = chr(32)
                        PLocate 17, 5 + (FindLetter * 3)
                        print "@07@  ";
                        GamePlay.Col(XPos - 1).Row(YPos - 1) = ucase(chr(InputChar))
                        Play.TilesPlaced(Play.LettersPlaced).XCor = XPos - 1
                        Play.TilesPlaced(Play.LettersPlaced).YCor = YPos - 1
                        Play.TilesPlaced(Play.LettersPlaced).Letter = ucase(chr(InputChar))
                        Play.TilesPlaced(Play.LettersPlaced).Wildcard = false
                        Play.TilesPlaced(Play.LettersPlaced).HandPos = FindLetter
                        Play.TilesPlaced(Play.LettersPlaced).UserID = user.info.id
                        WriteChannel(GameChannel, 0, ONLINEGAME_TILEPLACED, Play.TilesPlaced(Play.LettersPlaced), sizeof(Play.TilesPlaced(Play.LettersPlaced)))
                        
                        inc(Play.LettersPlaced)
                        if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                        exit for
                     end if
                  next
                  
                  if not LetterFound and WildcardInHand(GamePlay.Player(OurPlayerNum)) <= 6 then
                     dim WhichWildcard as byte = WildcardInHand(GamePlay.Player(OurPlayerNum))
                     Print "@70@";ucase(chr(InputChar));chr(168);"@0F@";
                     GamePlay.Player(OurPlayerNum).TilesInHand(WhichWildcard) = chr(32)
                     PLocate 17, 5 + (WhichWildcard * 3)
                     print "@07@  ";
                     GamePlay.Col(XPos - 1).Row(YPos - 1) = ucase(chr(InputChar)) + "?"
                     Play.TilesPlaced(Play.LettersPlaced).XCor = XPos - 1
                     Play.TilesPlaced(Play.LettersPlaced).YCor = YPos - 1
                     Play.TilesPlaced(Play.LettersPlaced).Letter = ucase(chr(InputChar))
                     Play.TilesPlaced(Play.LettersPlaced).Wildcard = true
                     Play.TilesPlaced(Play.LettersPlaced).HandPos = WhichWildcard
                     Play.TilesPlaced(Play.LettersPlaced).UserID = user.info.id
                     WriteChannel(GameChannel, 0, ONLINEGAME_TILEPLACED, Play.TilesPlaced(Play.LettersPlaced), sizeof(Play.TilesPlaced(Play.LettersPlaced)))
                     
                     inc(Play.LettersPlaced)
                     if UseMomentum then AdvanceMomentum(Momentum, XPos, YPos)
                  end if
               end if
            case 13
               dim ScoreIncrease as byte = 0
               dim TilesNeeded as byte = 0
               dim SearchHand as byte
               dim CheckHighScore as THighScore
               
               if Play.LettersPlaced > 0 then
                  if VerifyPlay(GamePlay, Play, ScoreIncrease, OurPlayerNum) then
                     for SearchHand = 0 to 6
                        if asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) < 65 or asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) > 90 and asc(GamePlay.Player(OurPlayerNum).TilesInHand(SearchHand)) <> 63 then
                           inc(TilesNeeded)
                        end if
                     next
                     
                     GamePlay.Player(OurPlayerNum).Score = GamePlay.Player(OurPlayerNum).Score + ScoreIncrease
                     If TilesNeeded >= 7 then
                        GamePlay.Player(OurPlayerNum).Score = GamePlay.Player(OurPlayerNum).Score + 50
                     end if
                     
                     PLocate 6 + OurPlayerNum, 26
                     print "@0D@";GamePlay.Player(OurPlayerNum).Score
                     
                     ClearHelpWindow
                     locate 20, 3
                     color 7, 0
                     select case rnd(timer)
                        case is < .3
                           print "That's @0F@";ScoreIncrease;"@07@ points for that turn!"
                        case is < .5
                           print "You've received @0F@";ScoreIncrease;"@07@ points for the play!"
                        case is < .7
                           print "Your score has increased by @0F@";ScoreIncrease;"@07@ points!"
                        case is < .9
                           print "This play gives you @0F@";ScoreIncrease;"@07@ points!"
                        case else
                           print "Impressive, @0F@";ScoreIncrease;"@07@ points for your move!"
                     end select

                     Delay 2
                     if Not RefillHand(GamePlay, OurPlayerNum) then
                        WriteChannel(GameChannel, 0, ONLINEGAME_GAMEOVER, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                        GameOver(GamePlay)
                        Our.GameStruct.Status = 4
                        WriteOnlineGame(Our.GameStruct)
                        Clear Our.GameStruct
                        Our.InGame = false
                     end if
                     inc(GamePlay.PlayNumber)
                     
                     do
                        inc(GamePlay.WhosTurn)
                        if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                     loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                     
                     dim LookupTheirRecord as TPlayerRecord
                     GetPlayerInfo(LookupTheirRecord)
                     if ScoreIncrease > LookupTheirRecord.HighestScoringPlay then
                        if LookupTheirRecord.HighestScoringPlay > 0 then
                           ClearHelpWindow
                           PLocate 20, 3 : Print "@0F@You have beaten your all time highest score of ";LookupTheirRecord.HighestScoringPlay;"!!!"
                           sleep(2500)
                        end if
                        LookupTheirRecord.HighestScoringPlay = ScoreIncrease
                        UpdatePlayerInfo(LookupTheirRecord)
                     end if

                     ConvertLongGameToShort(GamePlay, GamePlayShort)
                     WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
                     DispHandInfo(GamePlay, true, true)
                     HilightWhosTurn(GamePlay)
                     exit do
                  else
                     Inc(PlaysTried)
                     if cf.MaxIncorrectWords > 0 then
                        if PlaysTried = cf.MaxIncorrectWords then
                           ClearHelpWindow
                           PLocate 20, 1
                           print "  @0C@Warning@08@: @07@If you make one more invalid move, you will lose your turn!"
                           sleep(1000)
                           print "  ";
                           Pause
                           ClearHelpWindow
                        end if
                        if PlaysTried > cf.MaxIncorrectWords then
                           ClearHelpWindow
                           PLocate 20, 1
                           print "  @07@You have exceeded the number of tries allowed, and will now lose your turn."
                           sleep(1000)
                           print "  ";
                           Pause
                           ClearHelpWindow
                           do
                              inc(GamePlay.WhosTurn)
                              if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
                           loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
                           
                           HilightWhosTurn(GamePlay)
                           ConvertLongGameToShort(GamePlay, GamePlayShort)
                           WriteChannel(GameChannel, 0, ONLINEGAME_BADMOVELIMIT, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
                           WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
                           InputChar = 27
                        end if
                     end if
                     WriteChannel(GameChannel, 0, ONLINEGAME_BADMOVE, Play, sizeof(Play))
                     GamePlay = GameBackup
                     clear Play
                     RedrawBoard
                     ClearBox
                     DispHandInfo(GamePlay, true, true)
                  end if
               else
                  InputChar = 27
               end if
            case CTRL_R, asc("?"), CTRL_W
               if InputChar = asc("?") then HelpSection(HELP_MULTINODEGAMES)
               if InputChar = CTRL_W then WhoIsOnline
               cls
               ShowBoard
               DispHandInfo(GamePlay, true, false)
               PLocate 20,4
               print "@0B@(@03@DEL@0B@) @03@Remove Tile  @0B@(@03@ESC@0B@) @03@Cancel  @0B@(@03@Arrows@0B@) @03@Move Cursor  ";
               print "@0B@(@03@A@08@-@03@Z@0B@) @03@Place Tile";
               PLocate 21,4
               print "@0B@(@03@!@0B@) @03@Concede  @0B@(@03@@@0B@) @03@Pass Turn  @0B@(@03@#@0B@) @03@Shuffle Tiles  @0B@(@03@%@0B@) @03@Discard Tile(s)"
            case 27
               InputChar = 0
         end select
      loop until InputChar = 27
   loop
   
   DoorwayMode(false)
   CloseChannel(GameChannel)
   ClearHelpWindow
   ClearBox
   RedrawBoard
   
   exit function
   
   catch ERR_NOCARRIER:
      WriteChannel(GameChannel, 0, ONLINEGAME_DROPCARRIER, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
      if GamePlay.WhosTurn = OurPlayerNum then
         do
            inc(GamePlay.WhosTurn)
            if GamePlay.WhosTurn >= GamePlay.NumPlayers then GamePlay.WhosTurn = 0
         loop until GamePlay.Player(GamePlay.WhosTurn).Id > 0
         
         GamePlay.Player(OurPlayerNum).id = user.info.id * -1
         ConvertLongGameToShort(GamePlay, GamePlayShort)
         WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
      end if
      
      CloseChannel(GameChannel)
      ControlMessage(SCRABBLE_LEAVE)
      CloseChannel(GameControl)
      RemoveUsFromNodeFile
      end
end function

function GetOnlineGameStatus(Status as byte) as string
   if Status = 0 then 
      GetOnlineGameStatus = "Waiting For Players"
   else
      GetOnlineGameStatus = "In Progress"
   end if
end function

function CountPlayersInOnlineGame(WhichGame as TOnlineGame) as byte
   dim HowMany as byte = 0
   dim Counter as byte

   for Counter = 0 to 3
      if WhichGame.Player(Counter).Id > 0 then inc(HowMany)
   next
   
   CountPlayersInOnlineGame = HowMany
end function

function LobbyGameMonitor(WhichGame as TOnlineGame)
   dim InputChar as integer
   dim SideCounter as byte
   dim Startable as boolean = false
   dim OnlineGameCounter as short
   
   ClearHelpWindow
   RefreshNodeData

   PLocate 4,15  : print "@1F@";chr(218);string(2,196);" @1D@PSScrabble Multinode Game Control@1F@ ";string(10,196);chr(191)
   PLocate 5,15  : Print "@1F@";chr(179);string(47,32);chr(179);"@00@ "
   PLocate 6,15  : Print "@1F@";chr(179);"@1F@  Current Status      @18@:@1B@ ";pad(GetOnlineGameStatus(WhichGame.Status), 23);"@1F@";chr(179);"@00@ "
   PLocate 7,15  : Print "@1F@";chr(179);string(47,32);chr(179);"@00@ "
   PLocate 8,15  : Print "@1F@";chr(179);"@1F@  Player 1            @18@:@1B@ ";pad(WhichGame.Player(0).PlayerName, 23);"@1F@";chr(179);"@00@ "
   PLocate 9,15  : Print "@1F@";chr(179);"@1F@  Player 2            @18@:@1B@ ";pad(WhichGame.Player(1).PlayerName, 23);"@1F@";chr(179);"@00@ "
   PLocate 10,15 : Print "@1F@";chr(179);"@1F@  Player 3            @18@:@1B@ ";pad(WhichGame.Player(2).PlayerName, 23);"@1F@";chr(179);"@00@ "
   PLocate 11,15 : Print "@1F@";chr(179);"@1F@  Player 4            @18@:@1B@ ";pad(WhichGame.Player(3).PlayerName, 23);"@1F@";chr(179);"@00@ "
   PLocate 12,15 : Print "@1F@";chr(179);string(47,32);chr(179);"@00@ "
   PLocate 13,15 : Print "@1F@";chr(179);"@18@  (@1F@P@18@)@1F@age User    ";string(30, 32);chr(179);"@00@ "
   PLocate 14,15 : Print "@1F@";chr(179);"@18@  (@1F@A@18@)@1F@bort Game   ";string(30, 32);chr(179);"@00@ "
   if WhichGame.Player(0).Id = user.info.Id then
      PLocate 15,15 : Print "@1F@";chr(179);"@18@  (@17@S@18@)@1F@tart Now    ";string(30, 32);chr(179);"@00@ "
   else
      PLocate 15,15 : Print "@1F@";chr(179);"@18@  (@17@S@18@)@1F@tart Now    ";string(30, 32);chr(179);"@00@ "
   end if
   
   if WhichGame.Player(0).Id = user.info.Id then
      PLocate 16,15 : Print "@1F@";chr(179);"@18@  (@1F@K@18@)@1F@ick User Out";string(30, 32);chr(179);"@00@ "
   else
      PLocate 16,15 : Print "@1F@";chr(179);"@18@  (@17@K@18@)@1F@ick User Out";string(30, 32);chr(179);"@00@ "
   end if
   
   PLocate 17,15 : Print "@1F@";chr(179);string(47,32);chr(179);"@00@ "
   PLocate 18,15 : print "@1F@";chr(192);"@10@";string(47,196);chr(217);"@00@ "
   PLocate 19,16 : print "@08@";string(49,196)
   
   do
      InputChar = 0
      do
         InputChar = ReadKey(100)
         CheckTimeLeft
         if ReadChannel(0, msg) then
            select case ProcessGameControlMsg(msg)
               case RESULT_NOTIFIEDGAMEUPDATE
                  WhichGame = OnlineGames(WhichGame.GameNumber - 1)
                  Our.GameStruct = WhichGame
                  
                  PLocate 6,15  : Print "@1F@";chr(179);"@1F@  Current Status      @18@:@1B@ ";pad(GetOnlineGameStatus(WhichGame.Status), 23);"@1F@";chr(179);"@00@ "
                  PLocate 7,15  : Print "@1F@";chr(179);string(47,32);chr(179);"@00@ "
                  PLocate 8,15  : Print "@1F@";chr(179);"@1F@  Player 1            @18@:@1B@ ";pad(WhichGame.Player(0).PlayerName, 23);"@1F@";chr(179);"@00@ "
                  PLocate 9,15  : Print "@1F@";chr(179);"@1F@  Player 2            @18@:@1B@ ";pad(WhichGame.Player(1).PlayerName, 23);"@1F@";chr(179);"@00@ "
                  PLocate 10,15 : Print "@1F@";chr(179);"@1F@  Player 3            @18@:@1B@ ";pad(WhichGame.Player(2).PlayerName, 23);"@1F@";chr(179);"@00@ "
                  PLocate 11,15 : Print "@1F@";chr(179);"@1F@  Player 4            @18@:@1B@ ";pad(WhichGame.Player(3).PlayerName, 23);"@1F@";chr(179);"@00@ "
                  if CountPlayersInOnlineGame(WhichGame) >= 2 and WhichGame.Player(0).Id = user.info.id then
                     PLocate 15, 19
                     print "@1F@S@07@";
                     PLocate 20, 1
                     Startable = true
                  end if
                  
                  if Startable = true and CountPlayersInOnlineGame(WhichGame) <= 1 then
                     PLocate 15, 19
                     print "@17@S@07@";
                     PLocate 20, 1
                     Startable = false
                  end if
                  
                  if WhichGame.Status = 2 then
                     ClearHelpWindow
                     PLocate 20, 1
                     if WhichGame.Player(0).Id <> user.info.id then
                        Print "@03@The @0B@Host@03@ has left the game, @0B@";WhichGame.Player(0).PlayerName;"@03@ will now be the host."
                     else
                        Print "@03@The @0B@Host@03@ has left the game, @0B@you@03@ will now be the host."
                        WhichGame.Status = 0
                        WriteOnlineGame(WhichGame)
                     end if
                  end if
                  WriteOnlineGame(Our.GameStruct)
               case RESULT_NOTIFIEDGAMESTART
                  ClearHelpWindow
                  PLocate 20, 1
                  Print "@03@The @0B@Host@03@ has started the game, one moment..."
                  WriteOnlineGame(Our.GameStruct)
                  MultinodeGame(WhichGame)
                  exit function
               case RESULT_KICKOUT
                  ClearHelpWindow
                  PLocate 20, 1
                  Print "@03@The @0B@Host@03@ has removed you from the game..."
                  Sleep(3000)
                  InputChar = asc("A")
                  WriteOnlineGame(Our.GameStruct)
            end select
         end if
      loop until InputChar <> 0
      
      select case InputChar
         case asc("p"), asc("P")
            OnlinePage
         case asc("a"), asc("A")
            exit do
         case asc("s"), asc("S")
            if WhichGame.Player(0).Id = user.info.id and Startable then
               MultinodeGame(WhichGame)
               exit do
            end if
         case asc("k"), asc("K")
            if WhichGame.Player(0).Id = user.info.id then
               dim RemoveWhatUser as TPlayer
               dim AskUser as string * 1
               ClearHelpWindow
               PLocate 20, 1
               print "@0F@  Remove Which Player Number@08@: @07@";
               do
                  AskUser = chr(ReadKey(100))
                  CheckTimeLeft
               loop until (val(AskUser) > 0 and val(AskUser) < 5) or AskUser = chr(13)
               if AskUser <> chr(13) then
                  if WhichGame.Player(val(AskUser) - 1).Id > 0 then
                     print WhichGame.Player(val(AskUser) - 1).PlayerName
                     Sleep(300)
                     if WhichGame.Player(val(AskUser) - 1).Id = user.info.id then
                        PLocate 22, 1
                        print "  @03@Umm, you are free to leave any time you wish."
                        Sleep(2000)
                        ClearHelpWindow
                     else
                        RemoveWhatUser = WhichGame.Player(val(AskUser) - 1)
                        WriteChannel(GameControl, 0, SCRABBLE_KICKOUT, RemoveWhatUser, sizeof(RemoveWhatUser))
                        PLocate 22, 1
                        print "  @0B@";WhichGame.Player(val(AskUser) - 1).PlayerName; " @03@has been removed from the game."
                        Sleep(2000)
                        ClearHelpWindow
                     end if
                  else
                     PLocate 22, 1
                     print "  @0B@Invalid player number."
                     Sleep(2000)
                     ClearHelpWindow
                  end if
               else
                  ClearHelpWindow
               end if
            end if
      end select
   loop

   dim FindOurSlot as byte
   dim DeleteArray as byte
   dim GameEnded as boolean = true

   if WhichGame.Player(0).Id = user.info.id then
      WhichGame.Status = 2
   end if

   for FindOurSlot = 0 to 3
      if WhichGame.Player(FindOurSlot).Id = user.info.id then
         exit for
      end if
   next
   
   WhichGame.Player(FindOurSlot).ID = 0
   WhichGame.Player(FindOurSlot).PlayerName = ""
   WhichGame.Player(FindOurSlot).Score = 0
   
   if FindOurSlot < 3 then
      for DeleteArray = FindOurSlot to 2
         WhichGame.Player(DeleteArray) = WhichGame.Player(DeleteArray + 1)
      next
      clear WhichGame.Player(3)
   end if
   
   for FindOurSlot = 0 to 3
      if WhichGame.Player(FindOurSlot).Id > 0 then
         GameEnded = false
         exit for
      end if
   next
   
   if GameEnded then WhichGame.Status = 3
   WriteOnlineGame(WhichGame)
 
   Our.InGame = False
   clear Our.GameStruct
   ChangeActivity("Multiplayer Lobby")

   print "@0F@";
   cls
   PLocate 2,1
   print "@0F@";CenterText("PSScrabble Multinode Lobby");
   PLocate 3,1
   print "@03@";chr(218);string(76, 196);chr(191);
   for SideCounter = 4 to 18
      PLocate SideCounter, 1
      print chr(179);
      PLocate SideCounter, 78
      print chr(179);
   next
   if high(OnlineGames) > 0 then PLocate 3, 58 : PLocate 3, 58 : print " @0F@Current Games@08@: @0B@";high(OnlineGames);
   PLocate 19,1
   print "@03@";chr(192);string(76, 196);chr(217)
   PLocate 20,1
   print "@03@Use the @0B@Arrow Keys@03@ to select a game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
   
   if high(OnlineGames) > 0 then
      for OnlineGameCounter = 0 to high(OnlineGames) - 1
         if OnlineGameCounter >= 6 then exit for
         DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter + 1)
      next
   end if

   PLocate 21, 1
end function

function DrawOnlineGame(WhichGame as TOnlineGame, WhichPos as byte)
   dim row as byte = 1, col as byte = 1
   if WhichPos <= 3 then row = 4 else row = 11
   select case WhichPos
      case 1, 4
         col = 3
      case 2, 5
         col = 28
      case 3, 6
         col = 53
   end select
   
   PLocate row, col     : print "@0F@       Game ";pad(str(WhichGame.GameNumber), 8);"@0F@";
   PLocate row + 1, col : print "@07@P1@08@: ";
   if WhichGame.Player(0).ID > 0 then
      print "@03@";pad(WhichGame.Player(0).PlayerName, 16);
   else
      print "@08@";pad(WhichGame.Player(0).PlayerName, 16);
   end if
   PLocate row + 2, col : print "@07@P2@08@: ";
   if WhichGame.Player(1).ID > 0 then
      print "@03@";pad(WhichGame.Player(1).PlayerName, 16);
   else
      print "@08@";pad(WhichGame.Player(1).PlayerName, 16);
   end if
   PLocate row + 3, col : print "@07@P3@08@: ";
   if WhichGame.Player(2).ID > 0 then
      print "@03@";pad(WhichGame.Player(2).PlayerName, 16);
   else
      print "@08@";pad(WhichGame.Player(2).PlayerName, 16);
   end if
   PLocate row + 4, col : print "@07@P4@08@: ";
   if WhichGame.Player(3).ID > 0 then
      print "@03@";pad(WhichGame.Player(3).PlayerName, 16);
   else
      print "@08@";pad(WhichGame.Player(3).PlayerName, 16);
   end if
   PLocate row + 5, col : print "@0F@Status@08@ : ";
   
   select case WhichGame.Status
      case 0, 2
         print "@0B@Waiting";
      case 1
         print "@03@In Progress";
      case 3
         print "@03@Canceled";
      case 4
         print "@03@Game Over";
   end select
end function

function DispLightBar(DisplayIt as boolean, WhichGame as byte, LeftCornerGameNum as short)
   if DisplayIt then
      print "@1F@";
   else
      print "@0F@";
   end if
   select case WhichGame
      case 1
         PLocate 4, 3   : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
      case 2
         PLocate 4, 28  : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
      case 3
         PLocate 4, 53  : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
      case 4
         PLocate 11, 3  : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
      case 5
         PLocate 11, 28 : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
      case 6
         PLocate 11, 53 : print "       Game ";pad(str(WhichGame + LeftCornerGameNum - 1), 8);"@0F@";
   end select
end function

function EnterLobby
   dim SideCounter as byte
   dim InputChar as integer
   dim OnlineGameCounter as short
   dim LightBar as byte = 1
   dim LeftCornerGameNum as short = 1
   redim WinMsgBuffer(-1) 'Clear out chat msgs from old games!
   
   TryToKillGameData
   RefreshOnlineGames
   cls
   PLocate 2,1
   print "@0F@";CenterText("PSScrabble Multinode Lobby");
   PLocate 3,1
   print "@03@";chr(218);string(76, 196);chr(191);
   for SideCounter = 4 to 18
      PLocate SideCounter, 1
      print chr(179);
      PLocate SideCounter, 78
      print chr(179);
   next
   if high(OnlineGames) > 0 then PLocate 3, 58 : print " @0F@Current Games@08@: @0B@";high(OnlineGames);
   PLocate 19,1
   print "@03@";chr(192);string(76, 196);chr(217)
   PLocate 20,1
   
   if high(OnlineGames) <0 then
      print "@03@Press @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
   else
      if high(OnlineGames) = 1 then
         print "@03@Press @0B@Enter@03@ to join this game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
      else
         print "@03@Use the @0B@Arrow Keys@03@ to select a game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
      end if
   end if
   
   if high(OnlineGames) > 0 then
      for OnlineGameCounter = 0 to high(OnlineGames) - 1
         if OnlineGameCounter >= 6 then exit for
         DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter + 1)
      next
   end if

   PLocate 21, 1

   do
      if high(OnlineGames) > 0 then DispLightBar(true, LightBar, LeftCornerGameNum)
      
      do
         InputChar = ReadKey(100)
         CheckTimeLeft
         if ReadChannel(0, msg) then
            select case ProcessGameControlMsg(msg)
               case RESULT_NOTIFIEDNEWGAME
                  DrawOnlineGame(OnlineGames(high(OnlineGames) - 1), high(OnlineGames))
               case RESULT_NOTIFIEDGAMEUPDATE
                  ClearLobbyWindow
                  if high(OnlineGames) > 0 then
                     for OnlineGameCounter = 0 to high(OnlineGames) - 1
                        if OnlineGameCounter >= 6 then exit for
                        DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter + 1)
                     next
                  end if
            end select
         end if
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case CTRL_R, CTRL_W, asc("?")
            if InputChar = asc("?") then HelpSection(HELP_MULTIPLAYERMENU)
            if InputChar = CTRL_W then WhoIsOnline
            cls
            PLocate 2,1
            print "@0F@";CenterText("PSScrabble Multinode Lobby");
            PLocate 3,1
            print "@03@";chr(218);string(76, 196);chr(191);
            for SideCounter = 4 to 18
               PLocate SideCounter, 1
               print chr(179);
               PLocate SideCounter, 78
               print chr(179);
            next
            if high(OnlineGames) > 0 then PLocate 3, 58 : print " @0F@Current Games@08@: @0B@";high(OnlineGames);
            PLocate 19,1
            print "@03@";chr(192);string(76, 196);chr(217)
            PLocate 20,1
            
            if high(OnlineGames) <0 then
               print "@03@Press @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
            else
               if high(OnlineGames) = 1 then
                  print "@03@Press @0B@Enter@03@ to join this game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
               else
                  print "@03@Use the @0B@Arrow Keys@03@ to select a game, @0B@N@03@ to create a new game or @0B@Q@03@ to Quit."
               end if
            end if
            
            if high(OnlineGames) > 0 then
               for OnlineGameCounter = LeftCornerGameNum - 1 to LeftCornerGameNum + 4
                  if high(OnlineGames) <= OnlineGameCounter then exit for
                  DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter - LeftCornerGameNum + 2)
               next
               if LeftCornerGameNum + LightBar > high(OnlineGames) then
                  LightBar = high(OnlineGames) - LeftCornerGameNum + 1
               end if
            end if
         
            PLocate 21, 1
         case 27, asc("q"), asc("Q")
            exit do
         case KEY_UP, asc("8")
            if high(OnlineGames) > 1 and LightBar > 3 then
               DispLightBar(false, LightBar, LeftCornerGameNum)
               LightBar = LightBar - 3
            else
               if LeftCornerGameNum > 3 then
                  ClearLobbyWindow
                  LeftCornerGameNum = LeftCornerGameNum - 3
                  for OnlineGameCounter = LeftCornerGameNum - 1 to LeftCornerGameNum + 4
                     if high(OnlineGames) <= OnlineGameCounter then exit for
                     DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter - LeftCornerGameNum + 2)
                  next
               end if
            end if
         case KEY_DOWN, asc("2")
            if LightBar + LeftCornerGameNum - 2 < high(OnlineGames) then
               if high(OnlineGames) > 3 and LightBar < 4 then
                  if LeftCornerGameNum + LightBar + 2 <= high(OnlineGames) then
                     DispLightBar(false, LightBar, LeftCornerGameNum)
                     LightBar = LightBar + 3
                  else
                     DispLightBar(false, LightBar, LeftCornerGameNum)
                     LightBar = high(OnlineGames) - LeftCornerGameNum + 1
                  end if
               else
                  if high(OnlineGames) > 5 and LightBar > 3 then
                     if LeftCornerGameNum + 5 < high(OnlineGames) then 'This isn't the last page
                        ClearLobbyWindow
                        LeftCornerGameNum = LeftCornerGameNum + 3
                        for OnlineGameCounter = LeftCornerGameNum - 1 to LeftCornerGameNum + 4
                           if high(OnlineGames) <= OnlineGameCounter then exit for
                           DrawOnlineGame(OnlineGames(OnlineGameCounter), OnlineGameCounter - LeftCornerGameNum + 2)
                        next
                        if LeftCornerGameNum + LightBar > high(OnlineGames) then
                           LightBar = high(OnlineGames) - LeftCornerGameNum + 1
                        end if
                     end if
                  end if
               end if
            end if
         case KEY_LEFT, asc("4")
            if high(OnlineGames) > 1 then
               if LightBar > 1 then
                  DispLightBar(false, LightBar, LeftCornerGameNum)
                  dec(LightBar)
               end if
            end if
         case KEY_RIGHT, asc("6")
            if high(OnlineGames) > 1 and high(OnlineGames) > LightBar + LeftCornerGameNum - 1 then
               if LightBar < 6 then
                  DispLightBar(false, LightBar, LeftCornerGameNum)
                  inc(LightBar)
               end if
            end if
         case 13
            if high(OnlineGames) > 0 then
               if OnlineGames(LeftCornerGameNum + LightBar - 2).Status = 0 or OnlineGames(LeftCornerGameNum + LightBar - 2).Status = 2 then
                  dim FindOurSlot as byte
                  
                  for FindOurSlot = 0 to 3
                     if trim(OnlineGames(LeftCornerGameNum + LightBar - 2).Player(FindOurSlot).PlayerName) = "" then
                        exit for
                     end if
                  next
                  
                  OnlineGames(LeftCornerGameNum + LightBar - 2).Player(FindOurSlot).ID = user.info.id
                  OnlineGames(LeftCornerGameNum + LightBar - 2).Player(FindOurSlot).PlayerName = UpperLower(user.info.name)
                  OnlineGames(LeftCornerGameNum + LightBar - 2).Player(FindOurSlot).Score = 0
                  if OnlineGames(LeftCornerGameNum + LightBar - 2).Status = 3 then OnlineGames(LeftCornerGameNum + LightBar - 2).Status = 0
                  WriteOnlineGame(OnlineGames(LeftCornerGameNum + LightBar - 2))
      
                  Our.InGame = True
                  Our.GameStruct = OnlineGames(LeftCornerGameNum + LightBar - 2)
                  ChangeActivity("Playing In Multinode Game " + str(LightBar))
                  
                  LobbyGameMonitor(OnlineGames(high(OnlineGames) - 1))
                  exit do
               else
                  ClearHelpWindow
                  PLocate 20,1
                  select case OnlineGames(LeftCornerGameNum + LightBar - 2).Status
                  //0 = Waiting For Players   1 = In Progress   2 = New Host   3 = All Users Have Quit   4 = Game over
                     case 1
                        dim SeeIfWereIn as byte
                        dim AreWeIn as boolean = false
                        for SeeIfWereIn = 0 to 3
                           if abs(OnlineGames(LeftCornerGameNum + LightBar - 2).Player(SeeIfWereIn).Id) = user.info.id then
                              AreWeIn = true
                              exit for
                           end if
                        next
                        if AreWeIn then
                           if AskYesNo("@03@  Do you wish to rejoin this game where you left off?", true) then
                              ChangeActivity("Playing In Multinode Game " + str(LightBar))
                              MultinodeGame(OnlineGames(LeftCornerGameNum + LightBar - 2), true)
                              exit do
                           end if
                        else
                           if AskYesNo("@03@  This game is already under way, would you like to spectate?", true) then
                              ChangeActivity("Spectating Multinode Game " + str(LightBar))
                              SpectateGame(OnlineGames(LeftCornerGameNum + LightBar - 2))
                              ChangeActivity("Multiplayer Lobby")
                              exit do
                           end if
                        end if
                     case 3
                        print "  @03@This game was canceled, please create a new game."
                     case 4
                        print "  @03@This game has ended.  Please create a new game."
                  end select
                  print "  ";
                  Pause
                  ClearHelpWindow
               end if
            end if
         case asc("n"), asc("N")
            if Regged or high(OnlineGames) < 2 then
               if high(OnlineGames) < 0 then
                  redim OnlineGames(1)
               else
                  redim OnlineGames(high(OnlineGames) + 1)
               end if
               OnlineGames(high(OnlineGames) - 1).GameNumber = GetFirstOpenOnlineGameNumber
               OnlineGames(high(OnlineGames) - 1).Player(0).ID = user.info.id
               OnlineGames(high(OnlineGames) - 1).Player(0).PlayerName = UpperLower(user.info.name)
               OnlineGames(high(OnlineGames) - 1).Player(0).Score = 0
               OnlineGames(high(OnlineGames) - 1).Status = 0
               OnlineGames(high(OnlineGames) - 1).TellOthers = true
               Our.InGame = True
               Our.GameStruct = OnlineGames(high(OnlineGames) - 1)
               ChangeActivity("Playing In Multinode Game " + str(high(OnlineGames)))
               
               WriteOnlineGame(Our.GameStruct)
               NotifyGame(Our.GameStruct)
               LobbyGameMonitor(Our.GameStruct)
               exit do
            else
               ClearHelpWindow
               PLocate 20,1
               print "@03@Unregistered: There can only be a max of 2 multinode games.  Please"
               print "ask your system to register this product!"
               Pause
               ClearHelpWindow
            end if
      end select
      'Debug Code to track lightbar data
      'ClearHelpWindow
      'PLocate 20, 1
      'print "High(OnlineGames): ";High(OnlineGames); " ";
      'print "LightBar: ";LightBar; " ";
      'print "LeftCornerGameNum: ";LeftCornerGameNum;
      '----------------------------------------
      
   loop
   
   Cls
   ShowBoard
   ClearBox
 
   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
   PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
   PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
   PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";
end function

function ChallengePlayer
   dim ChallengeWho as string
   
   Cls
   Print
   Print "  @0F@Please Select Player To Challenge"
   print Bar(75,0,9)
   print "@0D@  ";pad("Player Name", 30);" Activity"
   
   dim counter as short
   for counter = 0 to high(PlayersOnline) - 1
      if trim(PlayersOnline(counter).PlayerName) <> "" then
         print "@0F@  ";pad(PlayersOnline(counter).PlayerName, 30)" @07@";PlayersOnline(counter).Activity
      end if
   next

   print Bar(75,0,1)
   print
   print "@0F@  Challenge Which Player? @08@: @0F@";
   ChallengeWho = SelectPlayer
   
   if ucase(ChallengeWho) = ucase(user.info.name) then
      print
      print
      print "  @03@Do not be @0B@Afraid@03@ to challenge yourself@08@... @03@But not in @0B@THIS@03@ game@08@."
      print
      print "  ";
      Pause
   else
      dim FindChallengeWho as short
      dim FoundThem as boolean = false

      do while ReadChannel(0, msg)
         ProcessGameControlMsg(msg)
      loop

      for FindChallengeWho = 0 to high(PlayersOnline) - 1
         if ucase(PlayersOnline(FindChallengeWho).PlayerName) = ucase(ChallengeWho) then
            FoundThem = true
            exit for
         end if
      next
      
      if not FoundThem then
         if trim(ChallengeWho) <> ""  then
            print
            print "  @03@Sorry, this player is no longer in the game@08@..."
            print
            print "  ";
            Pause
         end if
      else
         if PlayersOnline(FindChallengeWho).InGame then
            print
            print "  @03@Sorry, this player is currently involved in a multinode game@08@..."
            print
            print "  ";
            Pause
         else
            if Regged or high(OnlineGames) < 2 then
               dim ChallengeInfo as TChallengeInfo
               dim GotBackResult as boolean = false
               dim Accepted as boolean = false
               ChallengeInfo.FromNode = GetNode
               ChallengeInfo.From = Our.PlayerName
               ChallengeInfo.ToPlayer = PlayersOnline(FindChallengeWho).Id
            
               if high(OnlineGames) < 0 then
                  redim OnlineGames(1)
               else
                  redim OnlineGames(high(OnlineGames) + 1)
               end if
               OnlineGames(high(OnlineGames) - 1).GameNumber = high(OnlineGames)
               OnlineGames(high(OnlineGames) - 1).Player(0).ID = user.info.id
               OnlineGames(high(OnlineGames) - 1).Player(0).PlayerName = UpperLower(user.info.name)
               OnlineGames(high(OnlineGames) - 1).Player(0).Score = 0
               OnlineGames(high(OnlineGames) - 1).Status = 0
               OnlineGames(high(OnlineGames) - 1).TellOthers = false
               Our.InGame = True
               Our.GameStruct = OnlineGames(high(OnlineGames) - 1)
               ChangeActivity("Playing In Multinode Game " + str(high(OnlineGames)))
               
               ChallengeInfo.WhichGame = OnlineGames(high(OnlineGames) - 1)
               WriteChannel(GameControl, 0, SCRABBLE_CHALLENGE, ChallengeInfo, sizeof(ChallengeInfo))
               NotifyGame(OnlineGames(high(OnlineGames) - 1))

               our.IsChallenging = true
               RefreshNodeData
               print
               print
               print "  @07@Press @0F@ESC@07@ to abort request."
               print "  @03@Notifying @0B@";PlayersOnline(FindChallengeWho).PlayerName;"@03@ Of Your Proposal@08@...";

               do
                  CheckTimeLeft
                  if ReadKey(100) = 27 then exit do
                  do while ReadChannel(0, msg)
                     select case ProcessGameControlMsg(msg)
                        case RESULT_ACCEPTEDCHALLENGE
                           print
                           print "  @0B@";PlayersOnline(FindChallengeWho).PlayerName;"@03@ accepts your challenge."
                           Sleep(1000)
                           GotBackResult = true
                           Accepted = true
                        case RESULT_REFUSEDCHALLENGE
                           print
                           print "  @0B@";PlayersOnline(FindChallengeWho).PlayerName;"@03@ did not accept your challenge."
                           print
                           print "  ";
                           Pause
                           GotBackResult = true
                     end select
                  loop
               loop until GotBackResult
               our.IsChallenging = false
               RefreshNodeData
               
               if Accepted then
                  MultinodeGame(OnlineGames(high(OnlineGames) - 1))
               end if
            else
               print "@03@Unregistered: There can only be a max of 2 multinode games.  Please"
               print "ask your system to register this product!"
               Pause
            end if
         end if
      end if
   end if

   Cls
   ShowBoard
   ClearBox
 
   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
   PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
   PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
   PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";
end function

function ShowWhosPlaying
   Cls
   Print
   Print "  @0F@Who's Currently Online Playing PSScrabble"
   print Bar(75,0,9)
   print "@0D@  ";pad("Player Name", 30);" Activity"
   
   dim counter as short
   for counter = 0 to high(PlayersOnline) - 1
      if trim(PlayersOnline(counter).PlayerName) <> "" then
         print "@0F@  ";pad(PlayersOnline(counter).PlayerName, 30)" @07@";PlayersOnline(counter).Activity
      end if
   next

   print Bar(75,0,1)
   print
   pause
end function

function MultiplayerMenu as boolean
   dim SelectedOption as byte = 1
   dim InputChar as integer
   ClearBox
   
   if not Cf.AllowMultinode then
      PLocate 5, 3 : Print "@0F@Multinode Games Have Been";
      PLocate 6, 3 : Print "Disabled.";
      PLocate 8, 3 : print "@07@Press Enter @08@:";
      do
         CheckTimeLeft
      loop until ReadKey(100) <> 0
      PLocate 5, 3 : print "                         ";
      PLocate 6, 3 : Print "         ";
      PLocate 8, 3 : print "             ";
      
      PLocate 5, 3  : print "@0F@Select An Option @08@:";
      PLocate 6, 3  : print Bar(16, 0, 8);
      PLocate 8, 3  : Print "@0B@P@03@lay Hand";
      PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
      PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
      PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
      PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   
      exit function
   end if

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
   PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
   PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
   PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";

   do
      select case SelectedOption
         case 1
            PLocate 8, 3   : Print "@1B@E@1F@nter Lobby              @0F@";
         case 2          
            PLocate 10, 3  : Print "@1B@C@1F@hallenge Player To Game @0F@";
         case 3
            PLocate 12, 3  : Print "@1B@W@1F@ho's In Game Now?       @0F@";
         case 4
            PLocate 14, 3  : Print "@1B@Q@1F@uit To Main Menu        @0F@";
      end select
      
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case CTRL_R, asc("?"), CTRL_W
            if InputChar = asc("?") then HelpSection(HELP_MULTIPLAYERMENU)
            if InputChar = CTRL_W then WhoIsOnline
            Cls
            ShowBoard
            ClearBox
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
            PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
            PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
            PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";
         case KEY_UP, asc("8")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@E@03@nter Lobby              @0F@";
               case 2          
                  PLocate 10, 3  : Print "@0B@C@03@hallenge Player To Game @0F@";
               case 3
                  PLocate 12, 3  : Print "@0B@W@03@ho's In Game Now?       @0F@";
               case 4
                  PLocate 14, 3  : Print "@0B@Q@03@uit To Main Menu        @0F@";
            end select
         
            if SelectedOption > 1 then
               dec(SelectedOption)
            end if
         case KEY_DOWN, asc("2")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@E@03@nter Lobby              @0F@";
               case 2          
                  PLocate 10, 3  : Print "@0B@C@03@hallenge Player To Game @0F@";
               case 3
                  PLocate 12, 3  : Print "@0B@W@03@ho's In Game Now?       @0F@";
               case 4
                  PLocate 14, 3  : Print "@0B@Q@03@uit To Main Menu        @0F@";
            end select

            if SelectedOption < 4 then
               inc(SelectedOption)
            end if
         case 13
            dim ViewWhichGame as TGame
            dim WhichGameNum as integer = 1
            dim ScrollChoice as integer
            dim QuitViewGame as boolean = false
            
            select case SelectedOption
               case 1
                  ChangeActivity("Multiplayer Lobby")
                  EnterLobby
                  ChangeActivity("Multiplayer Menu")
               case 2
                  ChangeActivity("Multiplayer: Challenge Other Player")
                  ChallengePlayer
                  ChangeActivity("Multiplayer Menu")
               case 3
                  ChangeActivity("Who's In Game?")
                  ShowWhosPlaying
                  ChangeActivity("Multiplayer Menu")
                  Cls
                  ShowBoard
                  ClearBox
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
                  PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
                  PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
                  PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";
               case 4
                  exit do
            end select
         case asc("e"), asc("E"), asc("c"), asc("C"), asc("w"), asc("W"), asc("q"), asc("Q")
            select case ucase(chr(InputChar))
               case "E"
                  ChangeActivity("Multiplayer Lobby")
                  EnterLobby
                  ChangeActivity("Multiplayer Menu")
               case "C"
                  ChangeActivity("Multiplayer: Challenge Other Player")
                  ChallengePlayer
                  ChangeActivity("Multiplayer Menu")
               case "W"
                  ChangeActivity("Who's In Game?")
                  ShowWhosPlaying
                  ChangeActivity("Multiplayer Menu")
                  Cls
                  ShowBoard
                  ClearBox
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@E@03@nter Lobby";
                  PLocate 10, 3 : Print "@0B@C@03@hallenge Player To Game";
                  PLocate 12, 3 : Print "@0B@W@03@ho's In Game Now?";
                  PLocate 14, 3 : Print "@0B@Q@03@uit To Main Menu";
               case "Q"
                  exit do
            end select
         case 27
            exit do
      end select
   loop
   
   ClearBox

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
end function

function ScoresMenu as boolean
   dim SelectedOption as byte = 1
   dim InputChar as integer
   ClearBox

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@G@03@ame Status";
   PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
   PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
   PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
   PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";

   do
      select case SelectedOption
         case 1
            PLocate 8, 3   : Print "@1B@G@1F@ame Status            @0F@";
         case 2          
            PLocate 10, 3  : Print "@1B@C@1F@heck Game In Progress @0F@";
         case 3
            PLocate 12, 3  : Print "@1B@W@1F@inners Bulletin       @0F@";
         case 4
            PLocate 14, 3  : Print "@1B@V@1F@iew Game In Progress  @0F@";
         case 5
            PLocate 16, 3  : Print "@1B@Q@1F@uit To Main Menu      @0F@";
      end select
      
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case CTRL_R, asc("?"), CTRL_W
            if InputChar = asc("?") then HelpSection(HELP_SCORESMENU)
            if InputChar = CTRL_W then WhoIsOnline
            Cls
            ShowBoard
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@G@03@ame Status";
            PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
            PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
            PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
            PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
         case KEY_UP, asc("8")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@G@03@ame Status            @0F@";
               case 2          
                  PLocate 10, 3  : Print "@0B@C@03@heck Game In Progress @0F@";
               case 3
                  PLocate 12, 3  : Print "@0B@W@03@inners Bulletin       @0F@";
               case 4
                  PLocate 14, 3  : Print "@0B@V@03@iew Game In Progress  @0F@";
               case 5
                  PLocate 16, 3  : Print "@0B@Q@03@uit To Main Menu      @0F@";
            end select
         
            if SelectedOption > 1 then
               dec(SelectedOption)
            end if
         case KEY_DOWN, asc("2")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@G@03@ame Status            @0F@";
               case 2          
                  PLocate 10, 3  : Print "@0B@C@03@heck Game In Progress @0F@";
               case 3
                  PLocate 12, 3  : Print "@0B@W@03@inners Bulletin       @0F@";
               case 4
                  PLocate 14, 3  : Print "@0B@V@03@iew Game In Progress  @0F@";
               case 5
                  PLocate 16, 3  : Print "@0B@Q@03@uit To Main Menu      @0F@";
            end select

            if SelectedOption < 5 then
               inc(SelectedOption)
            end if
         case 13
            select case SelectedOption
               case 1
                  ChangeActivity("Show Game Status")
                  ShowGameStatus(true)
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case 2
                  ChangeActivity("Check Games In Progress")
                  CheckGameInProgress
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case 3
                  ChangeActivity("Winners Bulletin")
                  WinnersBulletin
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case 4
                  ViewGamesInProgress
               case 5
                  exit do
            end select
         case asc("g"), asc("G"), asc("c"), asc("C"), asc("w"), asc("W"), asc("v"), asc("V"), asc("q"), asc("Q")
            select case ucase(chr(InputChar))
               case "G"
                  ChangeActivity("Show Game Status")
                  ShowGameStatus(true)
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case "C"
                  ChangeActivity("Check Games In Progress")
                  CheckGameInProgress
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case "W"
                  ChangeActivity("Winners Bulletin")
                  WinnersBulletin
                  ChangeActivity("Scores Menu")
                  Cls
                  ShowBoard
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@G@03@ame Status";
                  PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
                  PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
                  PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
               case "V"
                  ViewGamesInProgress
               case "Q"
                  exit do
            end select
         case 27
            exit do
      end select
   loop
end function
   
function PlayMenu as boolean
   dim SelectedOption as byte = 1
   dim InputChar as integer
   if CountGames > 10 and not Regged then
      cls
      print
      print "@0F@Active game count exceeds unregistered limit@08@."
      print
      print "@07@You must enter a valid registration code to continue@08@:";
      cf.RegCode = InputString(15)
      WriteConfig
      if not Regged then
         print "@0C@Invalid reg code.  Exiting in @0F@5@0C@ Seconds"
         Sleep(5000)
         end
      end if
   end if
   CheckForIdlePlayers
   Cls
   ShowBoard

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
   
   if not cf.ShowIntro then
      dim TimeStarted as DateTime
      GetCurrentDateTime(TimeStarted)
      dim DaysSinceLastUpdate as integer = 0
      dim SecondsSinceLastUpdate as integer = 0
      dim ShouldWeCheck as boolean = false
      DateTimeDiff(TimeStarted, cf.LastDateChecked, DaysSinceLastUpdate, SecondsSinceLastUpdate)
      select case cf.VersionCheckFreq
         case 1 'Sysop Entry Only
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) > 0 then ShouldWeCheck = true
         case 2 'Every Time
            ShouldWeCheck = true
         case 3 'Once a Day
            if DaysSinceLastUpdate >= 1 then ShouldWeCheck=true
         case 4 'Once a Week
            if DaysSinceLastUpdate >= 7 then ShouldWeCheck=true
      end select
      if ShouldWeCheck then
         DoAutoUpdate
         ClearHelpWindow
      end if
   end if

   do
      select case SelectedOption
         case 1
            PLocate 8, 3   : Print "@1B@P@1F@lay Hand         @0F@";
         case 2          
            PLocate 10, 3  : Print "@1B@J@1F@oin@18@/@1F@New Game     @0F@";
         case 3
            PLocate 12, 3  : Print "@1B@S@1F@cores@18@/@1F@Status     @0F@";
         case 4
            PLocate 14, 3  : Print "@1B@M@1F@ultiplayer Menu  @0F@";
         case 5
            PLocate 16, 3  : Print "@1B@Q@1F@uit To BBS       @0F@";
         case 6
            PLocate 18, 3  : Print "@1B@R@1F@eport A Bug      @0F@";
      end select
      
      do
         CheckTimeLeft
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            if ProcessGameControlMsg(msg) = RESULT_MUSTREFRESH then
               Cls
               ShowBoard
            
               PLocate 5, 3  : print "@0F@Select An Option @08@:";
               PLocate 6, 3  : print Bar(16, 0, 8);
               PLocate 8, 3  : Print "@0B@P@03@lay Hand";
               PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
               PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
               PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
               PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
               PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
               
               select case SelectedOption
                  case 1
                     PLocate 8, 3   : Print "@1B@P@1F@lay Hand         @0F@";
                  case 2          
                     PLocate 10, 3  : Print "@1B@J@1F@oin@18@/@1F@New Game     @0F@";
                  case 3
                     PLocate 12, 3  : Print "@1B@S@1F@cores@18@/@1F@Status     @0F@";
                  case 4
                     PLocate 14, 3  : Print "@1B@M@1F@ultiplayer Menu  @0F@";
                  case 5
                     PLocate 16, 3  : Print "@1B@Q@1F@uit To BBS       @0F@";
                  case 6
                     PLocate 18, 3  : Print "@1B@R@1F@eport A Bug      @0F@";
               end select
            end if
         end if
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("!")
            PlayerSettings
         case asc("*")
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) then
               ChangeActivity("Sysop Menu")
               SysopMenu
               ChangeActivity("Play Menu")
            end if
         case CTRL_W
            WhoIsOnline
            Cls
            ShowBoard
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@P@03@lay Hand";
            PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
            PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
            PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
            PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
            PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
         case CTRL_R, asc("?"), CTRL_W
            if InputChar = asc("?") then 
               cls
               ChangeActivity("Play Menu Help")
               DispHelpMain
               ChangeActivity("Play Menu")
            end if
            if InputChar = CTRL_W then WhoIsOnline
            Cls
            ShowBoard
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@P@03@lay Hand";
            PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
            PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
            PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
            PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
            PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
         case KEY_UP, asc("8")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@P@03@lay Hand         ";
               case 2          
                  PLocate 10, 3  : Print "@0B@J@03@oin@08@/@03@New Game     ";
               case 3
                  PLocate 12, 3  : Print "@0B@S@03@cores@08@/@03@Status     ";
               case 4
                  PLocate 14, 3  : Print "@0B@M@03@ultiplayer Menu  ";
               case 5
                  PLocate 16, 3  : Print "@0B@Q@03@uit To BBS         ";
               case 6
                  PLocate 18, 3  : Print "@0B@R@03@eport A Bug      ";
            end select
         
            if SelectedOption > 1 then
               dec(SelectedOption)
            end if
         case KEY_DOWN, asc("2")
            select case SelectedOption
               case 1
                  PLocate 8, 3   : Print "@0B@P@03@lay Hand         ";
               case 2          
                  PLocate 10, 3  : Print "@0B@J@03@oin@08@/@03@New Game     ";
               case 3
                  PLocate 12, 3  : Print "@0B@S@03@cores@08@/@03@Status     ";
               case 4
                  PLocate 14, 3  : Print "@0B@M@03@ultiplayer Menu  ";
               case 5
                  PLocate 16, 3  : Print "@0B@Q@03@uit To BBS         ";
               case 6
                  PLocate 18, 3  : Print "@0B@R@03@eport A Bug      ";
            end select

            if SelectedOption < 6 then
               inc(SelectedOption)
            end if
         case 13
            select case SelectedOption
               case 1
                  ChangeActivity("Play Hand")
                  PlayHand
                  ChangeActivity("Play Menu")
               case 2
                  ChangeActivity("Join Game")
                  JoinGame
                  ChangeActivity("Play Menu")
               case 3
                  ChangeActivity("Scores Menu")
                  ScoresMenu
                  ChangeActivity("Play Menu")
                  ClearBox

                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@P@03@lay Hand";
                  PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
                  PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
                  PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
                  PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
               case 4
                  ChangeActivity("Multiplayer Menu")
                  MultiplayerMenu
                  ChangeActivity("Play Menu")
               case 5
                  exit do
               case 6
                  ReportBug
            end select
         case asc("p"), asc("P"), asc("j"), asc("J"), asc("s"), asc("S"), asc("m"), asc("M"), asc("q"), asc("Q"), asc("R"), asc("r")
            select case ucase(chr(InputChar))
               case "P"
                  ChangeActivity("Play Hand")
                  PlayHand
                  ChangeActivity("Play Menu")
               case "J"
                  ChangeActivity("Join Game")
                  JoinGame
                  ChangeActivity("Play Menu")
               case "S"
                  ChangeActivity("Scores Menu")
                  ScoresMenu
                  ChangeActivity("Play Menu")
                  ClearBox
               
                  PLocate 5, 3  : print "@0F@Select An Option @08@:";
                  PLocate 6, 3  : print Bar(16, 0, 8);
                  PLocate 8, 3  : Print "@0B@P@03@lay Hand";
                  PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
                  PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
                  PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
                  PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
                  PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
               case "M"
                  ChangeActivity("Multiplayer Menu")
                  MultiplayerMenu
                  ChangeActivity("Play Menu")
               case "Q"
                  exit do
               case "R"
                  ReportBug
            end select
         case 27
            exit do
      end select
   loop
end function

function WriteBulletins as boolean
   print

   if trim(cf.AnsiHighScores) <> "" then
      print "@0F@Generating Scores Bulletins (ANSI)...";
      if WriteScoresFile then
         print "@0F@Done"
      end if
   end if

   if trim(cf.HtmlScores) <> "" then
      print "@0F@Generating Scores Bulletins (HTML)...";
      if WriteHtmlScoresFile then
         print "@0F@Done"
      end if
   end if
   
   if trim(cf.AnsiStatus) <> "" then
      print "@0F@Generating Status Bulletins (ANSI)...";
      if WriteStatusFile then
         print "@0F@Done"
      end if
   end if
end function

function RemoveUsFromNodeFile as boolean
    dim GetNodeFile as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
    if GetNodeFile > 0 then
       dim NullNodeData as TScrabbleNode
       clear NullNodeData
       put #GetNodeFile, GetNode, NullNodeData
       
       close #GetNodeFile
    end if
end function

function AutoUpdateSettings
   dim AutoUpdateChoice as string * 1
   dim TimeBackup as short = GetMinutesRemaining
   
   do while AutoUpdateChoice <> "Q"
      Color 15,0
      Cls
      print "@03@PSScrabble AutoUpdate Configuration        Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      Print

      print "@03@[@0F@ 1@03@]  @0F@Path To Scrabble.wcx        @08@: @0F@";
      
      if trim(cf.CodeBasePath) = "" then
         print "Auto-Detect"
      else
         print cf.CodeBasePath
      end if
      
      print "@03@[@0F@ 2@03@]  @0F@Backup File                 @08@: @0F@";
      
      if trim(cf.BackupCodeBaseFile) = "" then
         print "No Backups"
      else
         print cf.BackupCodeBaseFile
      end if
      
      print "@03@[@0F@ 3@03@]  @0F@Notify Sysop Of Upgrades?   @08@: @0F@";
      
      select case cf.NotifySysopOfUpgrades
         case 1 : print "Always"
         case 2 : print "Major Updates Only"
         case 3 : print "Never"
      end select

      print "@03@[@0F@ 4@03@]  @0F@Check For New Versions      @08@: @0F@";
      
      select case cf.VersionCheckFreq
         case 1 : print "Sysop Entry Only"
         case 2 : print "Every Time"
         case 3 : print "Once A Day"
         case 4 : print "Once A Week"
         case 5 : print "Manual"
      end select
      
      print "@03@[@0F@ 5@03@]  @0F@Show Upgrade Progress       @08@: @0F@";
      
      select case cf.ShowUpgradeProgress
         case 1 : print "Full Status"
         case 2 : print "Percent Only"
         case 3 : print "Byte Count Only"
         case 4 : print "None"
      end select
      
      print ""
      print "@03@[@0F@ !@03@]  @0F@Check For New Version Now"
      print ""
      print "@03@[@0F@ H@03@]  @0F@Help On Settings"
      print "@03@[@0F@ Q@03@]  @0F@Quit Configuration Manager"
      print
 
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          AutoUpdateChoice = ucase(CHR(readkey(100)))
          if AutoUpdateChoice <> "" then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case ucase(AutoUpdateChoice)
         case "1"
            PLocate 16, 1
            print "@0F@Note@08@: @07@Use exact paths or UNC paths@08@, @0F@DO NOT@07@ use wc:\"
            print "      Leave blank for Auto-Detect@08@.@07@  Auto@08@-@07@Detect may not be reliable on"
            print "      systems running on multiple computers over a network@08@."
            
            PLocate 4, 36
            SetInitialString(cf.CodeBasePath)
            cf.CodeBasePath = InputString(40)
            PLocate 16, 1 : print string(80, 32);
            PLocate 17, 1 : print string(80, 32);
            PLocate 18, 1 : print string(80, 32);
            
            PLocate 16, 1
            if AskYesNo("Do you wish to test AutoDetect?",true) then
            dim k as integer
               if RegOpenKeyEx(0x80000002, "SOFTWARE\MSI\Wildcat", 0, KEY_READ, @k) = ERROR_SUCCESS then
                  dim value as string * 255
                  dim n as integer = sizeof(value)
                  dim vtype as integer
                  RegQueryValueEx(k, "ServerDirectory", 0, @vtype, @value, @n)
                  RegCloseKey(k)
                  PLocate 17, 1
                  if trim(value)="" then
                     print "@0C@FAILED@08@: @07@Failed to open key"
                     print "@07@Please verify key value HKEY_LOCAL_MACHINE\SOFTWARE\MSI\Wildcat\ServerDirectory"
                     print "is defined in your registry."
                  else
                     print "@07@Registry reports ServerDirectory as ";value
                     if Exists(value + "\SCRABBLE.WCX") then
                        print "@0F@SUCCESS! PSScrabble CodeBase Found At ";value + "\SCRABBLE.WCX"
                     else
                        print "@0C@FAILED@08@: @07@PSScrabble CodeBase Not Found At ";value + "\SCRABBLE.WCX"
                     end if
                  end if
                  Pause
                  
               else
                  PLocate 17, 1
                  print "@0C@FAILED@08@: @07@Failed on RegOpenKeyEx()"
                  print "@07@Please verify key value HKEY_LOCAL_MACHINE\SOFTWARE\MSI\Wildcat\ServerDirectory"
                  print "is defined in your registry."
                  Pause
               end if
            end if
            ClearHelpWindow
            WriteConfig
         case "2"
            PLocate 16, 1
            print "@0F@Note@08@: @07@Use exact paths or UNC paths@08@, @0F@DO NOT@07@ use wc:\";
            do
               PLocate 5, 36
               SetInitialString(cf.BackupCodeBaseFile)
               cf.BackupCodeBaseFile = InputString(40)
               
               PLocate 16, 1
               print string(80, 32);
               
               if trim(cf.BackupCodeBaseFile) = "" then
                  PLocate 16, 1
                  print "@0C@Warning@04@: @0F@Without a backup path@07@,@0F@ if an AutoUpdate fails@07@,@0F@ SCRABBLE@07@.@0F@WCX will"
                  print "         be lost@07@!  ";
                  if AskYesNo("@0C@Do you wish to continue@04@?", false) then
                     PLocate 16, 1 : print string(80, 32);
                     PLocate 17, 1 : print string(80, 32);
                     exit do
                  else
                     PLocate 16, 1 : print string(80, 32);
                     PLocate 17, 1 : print string(80, 32);
                  end if
               else
                  exit do
               end if
            loop
            WriteConfig
         case "3"
            inc(cf.NotifySysopOfUpgrades)
            if cf.NotifySysopOfUpgrades > 3 then cf.NotifySysopOfUpgrades = 1
            WriteConfig
         case "4"
            inc(cf.VersionCheckFreq)
            if cf.VersionCheckFreq > 5 then cf.VersionCheckFreq = 1
            WriteConfig
         case "5"
            inc(cf.ShowUpgradeProgress)
            if cf.ShowUpgradeProgress > 4 then cf.ShowUpgradeProgress = 1
            WriteConfig
         case "!"
            DoAutoUpdate
         case "H", "?"
            HelpSection(SYSOPHELP_AUTOUPDATECONFIG)
      end select
   loop
end function

function InputPlayerName(OurGame as TGame, FirstKey as byte) as string
    dim RetInp as string = ""
    dim TotalInput as string = ""
    dim DefaultInput as string = ""
    dim ArrayLooper as integer
    dim col0 as byte
    dim row as byte
    dim col as byte
    
    col0 = (POS - 1)

    row = CSRLIN
    col = POS

    PushKey(FirstKey)
    do
        CheckTimeLeft
        RetInp = chr(ReadKey(100))
        if RetInp = chr(8) then
            if trim(TotalInput) = "" then
               InputPlayerName = ""
               exit function
            else
               if DefaultInput <> "" then
                  print string(len(DefaultInput) - len(TotalInput), 32);
                  PLocate row,col
               end if
               
               RetInp = ""
               if (col - 1) > col0 then
                   TotalInput = LEFT(TotalInput, (len(TotalInput) - 1))
                   dec(col)
                   PLocate row, col
                   print " ";
               end if
               
               if Trim(TotalInput) = "" then DefaultInput = ""
            end if
        end if
        if RetInp = chr(9) then
            RetInp = ""
        end if
        PLocate row, col
        if RetInp <> chr(13) then
            if RetInp <> "" then
               print RetInp;
               inc(col)
               TotalInput = TotalInput + RetInp
               RetInp = ""

               if DefaultInput <> "" then
                  if instr(DefaultInput, TotalInput) <> 1 then
                     if len(DefaultInput) - len(TotalInput) >= 0 then
                        print string(len(DefaultInput) - len(TotalInput), 32);
                        PLocate row,col
                     end if
                  end if
               end if
               
               DefaultInput = ""
               for ArrayLooper = 0 to OurGame.NumPlayers - 1
                  if instr(ucase(OurGame.Player(ArrayLooper).PlayerName), ucase(TotalInput)) = 1 then
                     if len(TotalInput) >= 1 then
                        print "@0B@";right(OurGame.Player(ArrayLooper).PlayerName, len(OurGame.Player(ArrayLooper).PlayerName) - len(TotalInput));"@0F@";
                        DefaultInput = OurGame.Player(ArrayLooper).PlayerName
                        exit for
                     end if
                  end if
               next
            end if
        else
           for ArrayLooper = 0 to high(PlayersOnline) - 1
              if ucase(OurGame.Player(ArrayLooper).PlayerName) = ucase(TotalInput) then
                 DefaultInput = OurGame.Player(ArrayLooper).PlayerName
                 InputPlayerName = DefaultInput
                 exit function
              end if
           next
          
           if DefaultInput <> "" then 
              print "@0F@";right(DefaultInput, len(DefaultInput) - len(TotalInput));
              InputPlayerName = DefaultInput
              exit function
           end if
          
           if trim(TotalInput) = "" then exit function
          
        end if
    loop
    InputPlayerName = TotalInput
   print
end function

function PageAnotherNode as string
    dim RetInp as string = ""
    dim TotalInput as string = ""
    dim DefaultInput as string = ""
    dim ArrayLooper as integer
    dim col0 as byte
    dim row as byte
    dim col as byte
    dim nc as TNodeConfig
    dim ni as TNodeInfo
    
    col0 = (POS - 1)

    row = CSRLIN
    col = POS

    do
        CheckTimeLeft
        RetInp = chr(ReadKey(100))
        if RetInp = chr(8) then
            if trim(TotalInput) = "" then
               PageAnotherNode = ""
               exit function
            else
               if DefaultInput <> "" then
                  print string(len(DefaultInput) - len(TotalInput), 32);
                  PLocate row,col
               end if
               
               RetInp = ""
               if (col - 1) > col0 then
                   TotalInput = LEFT(TotalInput, (len(TotalInput) - 1))
                   dec(col)
                   PLocate row, col
                   print " ";
               end if
               
               if Trim(TotalInput) = "" then DefaultInput = ""
            end if
        end if
        if RetInp = chr(9) then
            RetInp = ""
        end if
        PLocate row, col
        if RetInp <> chr(13) then
            if RetInp <> "" then
               print RetInp;
               inc(col)
               TotalInput = TotalInput + RetInp
               RetInp = ""

               if DefaultInput <> "" then
                  if instr(DefaultInput, TotalInput) <> 1 then
                     if len(DefaultInput) - len(TotalInput) >= 0 then
                        print string(len(DefaultInput) - len(TotalInput), 32);
                        PLocate row,col
                     end if
                  end if
               end if
               
               DefaultInput = ""
               for ArrayLooper = 1 to GetNodeCount
                  GetNodeConfig(ArrayLooper, nc)
                  GetNodeInfo(ArrayLooper, ni)
                  if ni.NodeStatus > nsSigningOn then
                     if instr(ucase(ni.User.Name), ucase(TotalInput)) = 1 then
                        if len(TotalInput) >= 1 then
                           print "@0B@";right(ni.User.Name, len(ni.User.Name) - len(TotalInput));"@0F@";
                           DefaultInput = ni.User.Name
                           exit for
                        end if
                     end if
                  end if
               next
            end if
        else
           'for ArrayLooper = 1 to GetNodeCount
           '   GetNodeConfig(ArrayLooper, nc)
           '   GetNodeInfo(ArrayLooper, ni)
           '   if ni.NodeStatus > nsSigningOn then
           '      if ucase(ni.User.Name) = ucase(TotalInput) then
           '         DefaultInput = ni.User.Name
           '         PageAnotherNode = DefaultInput
           '         exit function
           '      end if
           '   end if
           'next
          
           if DefaultInput <> "" then 
              print "@0F@";right(DefaultInput, len(DefaultInput) - len(TotalInput));
              PageAnotherNode = DefaultInput
              exit function
           end if
          
           if trim(TotalInput) = "" then exit function
        end if
    loop
    PageAnotherNode = TotalInput
   print
end function

function ReportBug
   if Exists(GetPath + "NO_REPORT.$$$") or (Makewild.InstalledComponents and WILDCAT_COMPONENT_ICP) = 0 then
      ClearHelpWindow
      PLocate 20, 2
      print "@0F@T@07@his BBS does not support Internet E@08@-@07@mail@08@.@07@  You can submit your bug reports"
      PLocate 21, 2
      print "to @0F@support@07@@@0F@piscessoft@07@.@0F@com@08@.  @07@Please mention that the version of PSScrabble you"
      PLocate 22, 2
      print "are running is @0F@"; SCRABBLE_VERSION;"@08@.  @07@Thanks@08@!"
      PLocate 24, 2
      Pause
      ClearHelpWindow
      Exit function
   else
      if GetObjectFlags(OBJECTID_ALLOW_INTERNET_EMAIL) = 0 and not Exists(GetPath + "ALLOW_REPORT.$$$") then
         ClearHelpWindow
         PLocate 20, 2
         print "@0F@Y@07@our user account is not allowed to send E@08@-@07@mail@08@.@07@  You can submit your bug"
         PLocate 21, 2
         print "reports to @0F@support@07@@@0F@piscessoft@07@.@0F@com@08@.  @07@Please mention that the version of"
         PLocate 22, 2
         print "PSScrabble you are running is @0F@"; SCRABBLE_VERSION;"@08@.  @07@Thanks@08@!"
         PLocate 24, 2
         Pause
         ClearHelpWindow
         Exit function
      else
         ClearHelpWindow
         PLocate 20, 2
         print "@0F@T@07@his feature will allow you to report bugs you have found with this"
         PLocate 21, 2
         print "version of PSScrabble@08@.@07@  Your reports will be e-mailed"
         PLocate 22, 2
         print "directly to Pisces Software@08@,@07@ and not the sysop of this BBS@08@.@0F@"
         PLocate 24, 2
         if AskYesNo("Do you wish to continue?", true) then
            cls
            dim BugMessageTemplate as TMsgHeader
            BugMessageTemplate.Conference = 0
            BugMessageTemplate.From = user.info
            BugMessageTemplate.To.Name = "support@piscessoft.com"
            BugMessageTemplate.Subject = "Bug Report Against Version " + SCRABBLE_VERSION
            BugMessageTemplate.Private = true
            if CreateMessage(BugMessageTemplate) then
               Color 15,0
               Cls
               print "@0F@Thank you for your feedback, you should be hearing from us soon!"
               print Bar(64,0,8)
               Print
               Pause
            end if
            
            Cls
            ShowBoard
         
            PLocate 5, 3  : print "@0F@Select An Option @08@:";
            PLocate 6, 3  : print Bar(16, 0, 8);
            PLocate 8, 3  : Print "@0B@P@03@lay Hand";
            PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
            PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
            PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
            PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
            PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
         else
            ClearHelpWindow
         end if
      end if
   end if
end function

function EmailSysopOfAutoUpdate
   dim FEmailMsg as integer = open "wc:\temp\ScrabTurn.Msg" for output
   if FEmailMsg > 0 then
      print #FEmailMsg, "PSScrabble has been automatically upgraded off the AutoUpdate Server.  For more"
      print #FEmailMsg, "information on what new features are included in this release, please check"
      print #FEmailMsg, "our AutoUpdate Website at http://autoupdate.piscessoft.com/Scrabble/ for"
      print #FEmailMsg, "complete details.  If you experience problems with PSScrabble, the old WCX file"
      print #FEmailMsg, "has been backed up in accordance with your game configuration."
      print #FEmailMsg, ""
      print #FEmailMsg, "Beta Note: Once the AutoUpdate Server is finished, a list of new features will"
      print #FEmailMsg, "be provided in this email message itself."
      print #FEmailMsg, ""
      print #FEmailMsg, "                Sincerely,"
      print #FEmailMsg, "                      Pisces Software PSScrabble"
      
      close #FEmailMsg
      
      dim UserEmail as TMsgHeader
      dim sysopinfo as TUserInfo
      if GetSysopInfo(0, sysopinfo) then
         UserEmail.From.Name = "PSScrabble (AutoUpdate)"
         UserEmail.To = sysopinfo
         UserEmail.Subject = "PSScrabble Upgrade"
         UserEmail.Conference = 0
         dim now as DateTime
         GetCurrentDateTime(now)
         UserEmail.Private = True
      
         AddMessage(UserEmail, "wc:\temp\ScrabTurn.Msg")
      end if

      del "wc:\temp\ScrabTurn.Msg"
   end if
end function

function TrimName(byval NameToTrim as string, TrimLen as byte) as string
   if len(NameToTrim) > TrimLen then
      dim SpaceOffset as byte = InStr(NameToTrim, chr(32))
      if SpaceOffset < (TrimLen - 2) then
         mid(NameToTrim, SpaceOffset + 2, 1) = "."
         TrimName = left(NameToTrim, SpaceOffset + 2)
      else
         TrimName = left(NameToTrim, TrimLen)
      end if
   else
      TrimName = NameToTrim
   end if
end function

function CheckSpelling(WhichWord as string) as boolean
   if Regged and Exists(GetPath + "OSPD.DAT") then
      CheckSpelling = LookupWord(WhichWord)
   else
      CheckSpelling = SpellCheckLine(WhichWord, 0, 0, 0)
   end if
end function

function ViewGamesInProgress
   if CountGames = 0 then
      ClearHelpWindow
      PLocate 20, 1
      print " @0F@There are no games in the database."
      Pause
      ClearHelpWindow
      exit function
   end if
   
   dim ViewWhichGame as TGame
   dim WhichGameNum as integer = 1
   dim ScrollChoice as integer
   dim QuitViewGame as boolean = false

   ChangeActivity("Viewing Game In Progress")
   do
      ClearBox
      RedrawBoard
      
      GetGame(WhichGameNum, ViewWhichGame)
      DispHandInfo(ViewWhichGame, false, false)
      PLocate 15, 3
      print "@0F@Game Number  @08@: @0F@";WhichGameNum
      PLocate 16, 3
      print "@0F@Started Yet? @08@: @0F@";DispYesNo(ViewWhichGame.BeingPlayed)
      PLocate 20,1
      print "  @03@Use @0B@Left@03@ and @0B@Right@03@ arrow keys to view different games or @0B@Q@03@ to Quit."
      print "  @03@Press @0B@J@03@ to Jump directly to a game number.";
      
      do
         do
            ScrollChoice = ReadKey(100)
            CheckTimeLeft
         loop until ScrollChoice <> 0
         
         select case ScrollChoice
            case CTRL_T
               ShowTimeLeft
            case asc("\")
               OnlinePage
            case KEY_LEFT, asc("4")
               if WhichGameNum > 1 then dec(WhichGameNum)
               exit do
            case KEY_RIGHT, asc("6")
               if WhichGameNum < CountGames then inc(WhichGameNum)
               exit do
            case asc("Q"), asc("q"), 27
               QuitViewGame = true
               exit do
            case asc("J"), asc("j")
               ClearHelpWindow
               PLocate 20, 1
               print " @0F@Game Number @07@(@0F@1@08@-@0F@";CountGames;"@07@) @08@:@07@";
               dim JumpTo as integer = AskNumber(0)
               if JumpTo > 0 and JumpTo <= CountGames then
                  WhichGameNum = JumpTo
                  ClearHelpWindow
                  PLocate 20,1
                  print "  @03@Use @0B@Left@03@ and @0B@Right@03@ arrow keys to view different games or @0B@Q@03@ to Quit."
                  print "  @03@Press @0B@J@03@ to Jump directly to a game number.";
                  exit do
               else
                  ClearHelpWindow
                  PLocate 20,1
                  print "  @03@Use @0B@Left@03@ and @0B@Right@03@ arrow keys to view different games or @0B@Q@03@ to Quit."
                  print "  @03@Press @0B@J@03@ to Jump directly to a game number.";
               end if
         end select
      loop
   loop until QuitViewGame = true
   
   ChangeActivity("Scores Menu")
   Cls
   ShowBoard
    
   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@G@03@ame Status";
   PLocate 10, 3 : Print "@0B@C@03@heck Game In Progress";
   PLocate 12, 3 : Print "@0B@W@03@inners Bulletin";
   PLocate 14, 3 : Print "@0B@V@03@iew Game In Progress";
   PLocate 16, 3 : Print "@0B@Q@03@uit To Main Menu";
end function

function GetFreeGameNumber as integer
   dim FoundExpiredGame as boolean = false
   dim ScrabFile as integer = Open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile > 0 then
      dim i as integer = 1
      dim PeekTGame as TGame
      do while not eof(ScrabFile)
         get #ScrabFile, i, PeekTGame
         if PeekTGame.Completed then
            dim now as DateTime
            dim Days as integer, Sec as integer
            GetCurrentDateTime(now)
            DateTimeDiff(now, PeekTGame.DateComplete, Days, Sec)
            if Days > cf.KeepFinishedGames then
               GetFreeGameNumber = i
               FoundExpiredGame = true
               exit do
            end if
         end if
         inc(i)
      loop
      
      if not FoundExpiredGame then GetFreeGameNumber = lof(ScrabFile) + 1
      close #ScrabFile
   end if
end function

function PlayerSettings
   dim PSChoice as string * 1
   dim TimeBackup as short = GetMinutesRemaining
   dim LookupPlayer as TPlayerRecord
   GetPlayerInfo(LookupPlayer)
   
   do while PSChoice <> "Q"
      Color 15,0
      Cls
      print "@03@Your Player Stats                        Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      Print
      print "  @0F@Number Of Games Played @08@: @07@";pad(FormatNumber(LookupPlayer.GamesPlayed), 7);" @0F@Your Highest Score         @08@: @07@";left(FormatNumber(LookupPlayer.HighestScore), 15)
      print "  @0F@Number Of Games Won    @08@: @07@";pad(FormatNumber(LookupPlayer.GamesWon), 7);" @0F@Sum Of Scores In All Games @08@: @07@";left(FormatNumber(LookupPlayer.TotalScores), 15)
      print "  @0F@Highest Scoring Play   @08@: @07@";FormatNumber(LookupPlayer.HighestScoringPlay)
      print
      print "  @07@You have won @0F@";
      if LookupPlayer.GamesPlayed > 0 then
         print int((LookupPlayer.GamesWon / LookupPlayer.GamesPlayed) * 100);"%@07@ ";
      else
         print "0%@07@ ";
      end if
      print "of the games you've played."
      print
      print "  @03@[@0F@ A@03@]  @0F@E-Mail On Turn @08@: @0F@";DispYesNo(not LookupPlayer.DisableEmail)
      print "  @03@[@0F@ B@03@]  @0F@E-Mail Address @08@: @0F@";
      if trim(LookupPlayer.NotifyEmail) = "" or Exists(GetPath + "NO_EMAILNOTIFY.$$$") or (Makewild.InstalledComponents and WILDCAT_COMPONENT_ICP) = 0 then
         print "Local"
      else
         print LookupPlayer.NotifyEmail
      end if
      print
      print "  @03@[@0F@ C@03@]  @0F@Tile Placement Momentum @08@: @0F@";DispYesNo(not LookupPlayer.DisableMomentum)
      print
      print "  @03@[@0F@ H@03@]  @0F@Help On Settings"
      print "  @03@[@0F@ Q@03@]  @0F@Quit To Play Menu"
      print
 
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,53
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          PSChoice = ucase(CHR(readkey(100)))
          if PSChoice <> "" then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case ucase(PSChoice)
         case chr(CTRL_T)
            ShowTimeLeft
         case "\"
            OnlinePage
         case "A"
            LookupPlayer.DisableEmail = not LookupPlayer.DisableEmail
            UpdatePlayerInfo(LookupPlayer)
         case "B"
            if Exists(GetPath + "NO_EMAILNOTIFY.$$$") or (Makewild.InstalledComponents and WILDCAT_COMPONENT_ICP) = 0 then
               PLocate 15, 1
               print "@0F@ This BBS is not capable of sending Internet E-Mail, or the"
               print " sysop has disabled this feature."
               print " ";
               Pause
            else
               PLocate 11, 25
               SetInitialString(LookupPlayer.NotifyEmail)
               LookupPlayer.NotifyEmail = InputString(48)
               UpdatePlayerInfo(LookupPlayer)
            end if
         case "C"
            LookupPlayer.DisableMomentum = not LookupPlayer.DisableMomentum
            UpdatePlayerInfo(LookupPlayer)
         case "H", "?"
            HelpSection(HELP_GENERAL)
      end select
   loop
   
   Cls
   ShowBoard

   PLocate 5, 3  : print "@0F@Select An Option @08@:";
   PLocate 6, 3  : print Bar(16, 0, 8);
   PLocate 8, 3  : Print "@0B@P@03@lay Hand";
   PLocate 10, 3 : Print "@0B@J@03@oin@08@/@03@New Game";
   PLocate 12, 3 : Print "@0B@S@03@cores@08@/@03@Status";
   PLocate 14, 3 : Print "@0B@M@03@ultiplayer Menu";
   PLocate 16, 3 : Print "@0B@Q@03@uit To BBS";
   PLocate 18, 3 : Print "@0B@R@03@eport A Bug";
end function

function LookupIPOfHost(HostName as string) as string
   dim testptr as integer = gethostbyname(HostName) 'Pointer to a THostEnt
   dim test as THostEnt 'A THostEnt to store the resolution info
   dim i as string * 4 '4byte structure to store the h_addr_list of 4 1-byte values per 4byte offset
   memcpy(@test, testptr, sizeof(test)) 'Copy testptr to the THostEnt itself (Basically dereferencing)
   memcpy(@testptr, test.h_addr_list, sizeof(testptr)) 'Copy the host list pointer to the testptr
   memcpy(@i, testptr, sizeof(i)) 'Copy the host list pointer, now testptr, to i for easy parsing
   LookupIPOfHost =  str(asc(i(1))) + "." + str(asc(i(2))) + "." + str(asc(i(3))) + "." + str(asc(i(4))) 'Break appart string to dotted format
end function

function QuitGame
   dim mw as TMakewild
   GetMakewild(mw)

   cls
   Print "@0F@Thank you for playing PSScrabble 1.0";chr(225);" (Build "; SCRABBLE_VERSION;") By Mike Christensen"
   print "(c) 1999 All Rights Reserved"
   print
   print "@03@You are the @0F@";str(cf.TimesRun);Ordinal(str(cf.TimesRun));" @03@person to use this program."
           
   If NOT regged then
      Print
      Print "@04@UNREGISTERED EVALUATION COPY..."
      Print "@07@Seven second delay, please help your sysop register this program."
      Delay 7
   else
      Print
      Print "@03@Registered to @08@: @0F@";mw.BBSName
      Delay 1
   end if

   WriteBulletins

   cf.LastUser = UpperLower(user.info.name)
   inc(cf.TimesRun)
   WriteConfig
   ControlMessage(SCRABBLE_LEAVE)
   CloseChannel(GameControl)
   RemoveUsFromNodeFile
end function

function HTTPEncode(UnencodedString as string) as string
   dim EncodedString as string = UnencodedString
   EncodedString = Replace(EncodedString, "%", "%25")
   EncodedString = Replace(EncodedString, "+", "%2B")
   EncodedString = Replace(EncodedString, chr(32), "+")
   EncodedString = Replace(EncodedString, "&", "%26")
   EncodedString = Replace(EncodedString, ",", "%20")
   EncodedString = Replace(EncodedString, "'", "%27")
   EncodedString = Replace(EncodedString, "=", "%3D")
   EncodedString = Replace(EncodedString, "!", "%21")
   EncodedString = Replace(EncodedString, "#", "%23")
   EncodedString = Replace(EncodedString, "$", "%24")
   EncodedString = Replace(EncodedString, "(", "%28")
   EncodedString = Replace(EncodedString, ")", "%29")
   EncodedString = Replace(EncodedString, "`", "%60")
   EncodedString = Replace(EncodedString, chr(13) + chr(10), "%0D%0A")
   HTTPEncode = EncodedString
end function

function SendRegEmail(RegCodeString as string, DidItWork as boolean)
   dim FEmailMsg as integer = open "wc:\temp\SysopMail.Msg" for output
   if FEmailMsg > 0 then
      if DidItWork then
         print #FEmailMsg, "Thank you for registering PSScrabble!  The game has automatically contacted"
         print #FEmailMsg, "the AutoUpdate Server for your registration code, which is included below"
         print #FEmailMsg, "for your reference.  If you should lose your registration code, all you need"
         print #FEmailMsg, "to do is connect to the AutoUpdate Server again, or visit our AutoUpdate"
         print #FEmailMsg, "website at http://autoupdate.piscessoft.com.  Once again, we greatly"
         print #FEmailMsg, "appreciate your support, and thank you for your registration."
         print #FEmailMsg, ""
         print #FEmailMsg, "Your Registration Code is: ";RegCodeString
         print #FEmailMsg, ""
         print #FEmailMsg, "                Sincerely,"
         print #FEmailMsg, "                      Pisces Software PSScrabble"
      else
         print #FEmailMsg, "Thank you for registering PSScrabble!  We regret to inform you that"
         print #FEmailMsg, "the registration code received by the AutoUpdate Server was invalid."
         print #FEmailMsg, "This is most likely because the WC Reg Code, Sysop Name and/or BBS"
         print #FEmailMsg, "Name in wcConfig did not match up with those used to generate the"
         print #FEmailMsg, "registration code.  Please contact support@piscessoft.com for more"
         print #FEmailMsg, "information.  The registration code tried is printed below."
         print #FEmailMsg, ""
         print #FEmailMsg, "Attempted Registration Code is: ";RegCodeString
         print #FEmailMsg, ""
         print #FEmailMsg, "                Sincerely,"
         print #FEmailMsg, "                      Pisces Software PSScrabble"
      end if
      
      close #FEmailMsg
      
      dim UserEmail as TMsgHeader
      dim sysopinfo as TUserInfo
      if GetSysopInfo(0, sysopinfo) then
         UserEmail.From.Name = "PSScrabble (AutoUpdate)"
         UserEmail.To = sysopinfo
         UserEmail.Subject = "PSScrabble Upgrade"
         UserEmail.Conference = 0
         dim now as DateTime
         GetCurrentDateTime(now)
         UserEmail.Private = True
      
         AddMessage(UserEmail, "wc:\temp\SysopMail.Msg")
      end if

      del "wc:\temp\SysopMail.Msg"
   end if
end function

function Replace(ReplaceString as string, ReplaceWhat as string, WithWhat as string) as string
   dim NewString as string = ReplaceString
   do while Instr(NewString, ReplaceWhat) > 0 and len(NewString) > 0 and len(ReplaceWhat) > 0
      NewString = left(NewString, Instr(NewString, ReplaceWhat) - 1) + WithWhat + right(NewString, len(NewString) - (Instr(NewString, ReplaceWhat) + len(ReplaceWhat) - 1))
   loop
   Replace = NewString
end function

function LookupWord(pwz as string) as boolean
   dim f as integer = open GetPath + "OSPD.DAT" for random len=14
   dim TempWord as string * 15
   if f <= 0 then
      LookupWord=false
      exit function
   end if
   dim cmax as integer = lof(f)
   dim bot as integer = 1
   dim top as integer = cmax
   
   do while (1)
      dim middle as integer = (top - bot) / 2
      middle = middle + bot
      	
      get #f, middle, TempWord
      TempWord = trim(TempWord)
      dim i as integer = stricmp(@pwz, @TempWord)
      
      if i = 0 then
         LookupWord = true
         close #f
         exit function
      end if
      
      if top <= bot then
         LookupWord = false
         close #f
         exit function
      end if
      
      if i < 0 then
         top = middle - 1
      else
         bot = middle + 1
      end if
   loop
   close #f
   LookupWord = false
end function

function OnlinePage
   ClearHelpWindow
   PLocate 20, 1
   print "@0F@  PAGE WHOM@08@: @07@";
   dim WhichUserToPage as string
   WhichUserToPage = PageAnotherNode
   if trim(WhichUserToPage) <> "" then
      dim ni as TNodeInfo
      if not GetNodeInfoByName(WhichUserToPage, ni) then
         ClearHelpWindow
         PLocate 20,1
         print "@0F@That user is no longer online..."
         Sleep(2500)
      end if
      
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and not ni.UserPageAvailable then
         ClearHelpWindow
         PLocate 20,1
         print "@0F@That user is not available for paging..."
         Sleep(2500)
      end if
      
      ClearHelpWindow
      PLocate 20,1
      print "@0F@Enter your page message:"
      dim s(3) as string * 79
      print " ";
      s(1) = AskString(75)
      if trim(s(1)) <> "" then 
         print " ";
         s(2) = AskString(75)
      end if
      if trim(s(2)) <> "" then
         print " ";
         s(3) = AskString(75)
      end if
    
      if trim(s(1)) <> "" then
         dim pmsg as TPageMessage
         clear pmsg
         pmsg.From = User.Info.Name
         pmsg.Message(1) = s(1)
         pmsg.Message(2) = s(2)
         pmsg.Message(3) = s(3)
         
         WriteChannel(OpenChannel("System.Page"), ni.ConnectionId, 0, pmsg, sizeof(pmsg))
      end if
   end if
   ClearHelpWindow
   PLocate 20,1
end function

function TileEditor(CurGame as TGame)
   cls
   Color 15,0
   Cls
   print "@0F@Tile Editor @08@- @07@Game @0F@";CurGame.GameNumber
   print Bar(60,0,7)
   print
   print " @0F@U@07@se @0F@Arrow Keys@07@ to move cursor@08@,@0F@ ?@07@ or @0F@A@08@-@0F@Z@07@ to @0F@Add@08@/@0F@Edit@07@ tile@08@, @07@or @0F@SPACE@08@/@0F@DEL@07@"
   print " to remove a tile from the bag@08@.  @07@Press @0F@ENTER@07@ to @0F@Save Changes@08@, @07@or @0F@ESC@07@ to @0F@Undo@08@.@07@"
   print
   PLocate 7, 2
   print "@1F@";chr(218);string(75, 196);chr(191);"@0F@"
   dim SideCounter as byte
   for SideCounter = 8 to 22
      PLocate SideCounter, 2
      print "@1F@";chr(179);string(75, 32);chr(179);"@0F@";
   next
   PLocate 23,2
   print "@1F@";chr(192);string(75, 196);chr(217);"@0F@"
   dim CursorX as byte = 1
   dim CursorY as byte = 1
   dim Momentum as boolean = false 'Directional vector of cursor: True for Left, False for Right
   dim GetKey as integer
   dim AnyChanges as boolean = false
   
   dim x as byte
   dim y as byte
   
   for y = 0 to 6
      dim LastMark as byte
      if y < 6 then
         for x = 0 to 14
            PLocate 9 + (y * 2), 4 + (x * 5)
            if CurGame.Tiles(y * 15 + x) <> "" then
               print "@70@ ";CurGame.Tiles(y * 15 + x);" @1F@";
            else
               print "@70@   @1F@";
            end if
         next
      else
         for x = 0 to 9
            PLocate 9 + (y * 2), 4 + (x * 5)
            if CurGame.Tiles(90 + x) <> "" then
               print "@70@ ";CurGame.Tiles(90 + x);" @1F@";
            else
               print "@70@   @1F@";
            end if
         next
      end if
   next
   
   PLocate 9, 4
   print "@2F@ "; CurGame.Tiles(0); " @1F@";
   PLocate 24, 0
   do while GetKey <> 13 and GetKey <> 27
      GetKey = 0
      do
         GetKey = ReadKey(100)
         CheckTimeLeft
      loop until GetKey > 0
      
      select case GetKey
         case asc("?")
            color 15,0
            HelpSection(SYSOPHELP_TILEEDITOR)
            cls
            Color 15,0
            Cls
            print "@0F@Tile Editor @08@- @07@Game @0F@";CurGame.GameNumber
            print Bar(60,0,7)
            print
            print " @0F@U@07@se @0F@Arrow Keys@07@ to move cursor@08@,@0F@ ?@07@ or @0F@A@08@-@0F@Z@07@ to @0F@Add@08@/@0F@Edit@07@ tile@08@, @07@or @0F@SPACE@08@/@0F@DEL@07@"
            print " to remove a tile from the bag@08@.  @07@Press @0F@ENTER@07@ to @0F@Save Changes@08@, @07@or @0F@ESC@07@ to @0F@Undo@08@.@07@"
            print
            PLocate 7, 2
            print "@1F@";chr(218);string(75, 196);chr(191);"@0F@"
            for SideCounter = 8 to 22
               PLocate SideCounter, 2
               print "@1F@";chr(179);string(75, 32);chr(179);"@0F@";
            next
            PLocate 23,2
            print "@1F@";chr(192);string(75, 196);chr(217);"@0F@"
            
            for y = 0 to 6
               if y < 6 then
                  for x = 0 to 14
                     PLocate 9 + (y * 2), 4 + (x * 5)
                     if CurGame.Tiles(y * 15 + x) <> "" then
                        print "@70@ ";CurGame.Tiles(y * 15 + x);" @1F@";
                     else
                        print "@70@   @1F@";
                     end if
                  next
               else
                  for x = 0 to 9
                     PLocate 9 + (y * 2), 4 + (x * 5)
                     if CurGame.Tiles(90 + x) <> "" then
                        print "@70@ ";CurGame.Tiles(90 + x);" @1F@";
                     else
                        print "@70@   @1F@";
                     end if
                  next
               end if
            next
         case 13
            if AnyChanges then
               if not Regged then
                  PLocate MAXLINE_LENGTH, 2
                  print "@07@You cannot save your changes with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
                  Do : loop until ReadKey(100) > 0
               else
                  'Compress CurGame.Tiles array so all the empty tiles are at the end
                  dim TempTileArray(NUM_TILES) as string * 1
                  dim i as byte
                  dim j as byte = 0
                  for i = 0 to NUM_TILES - 1
                     if (asc(CurGame.Tiles(i)) >= asc("A") and asc(CurGame.Tiles(i)) <= asc("Z")) or asc(CurGame.Tiles(i)) = asc("?") then
                        TempTileArray(j) = CurGame.Tiles(i)
                        inc(j)
                     end if
                  next
                  memcpy(@CurGame.Tiles, @TempTileArray, NUM_TILES)
                  PLocate MAXLINE_LENGTH, 2
                  if AskYesNo("@0F@Do you wish to reset ""Number Of Tiles In Bag"" count for this game?", true) then
                     CurGame.TilesLeft = j
                  end if
                  UpdateGame(CurGame)
               end if
            end if
         case 27
            if AnyChanges and Regged then
               PLocate MAXLINE_LENGTH, 2
               if not AskYesNo("@0F@Are you sure you wish to quit without saving your changes?", false) then
                  PLocate MAXLINE_LENGTH, 2
                  print space(75);
                  GetKey = 0
               end if
            end if
         case KEY_UP, asc("8")
            if CursorY > 1 then
               PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
               if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                  print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
               else
                  print "@70@   @1F@";
               end if
               dec(CursorY)
               PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
               if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                  print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
               else
                  print "@2F@   @1F@";
               end if
               PLocate MAXLINE_LENGTH, 0
            end if
         case KEY_DOWN, asc("2")
            if CursorY < 7 then
               if (CursorY = 6 and CursorX < 11) or CursorY < 6 then
                  PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                  if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                     print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
                  else
                     print "@70@   @1F@";
                  end if
                  inc(CursorY)
                  PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                  if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                     print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
                  else
                     print "@2F@   @1F@";
                  end if
                  PLocate MAXLINE_LENGTH, 0
               end if
            end if
         case KEY_RIGHT, asc("6")
            Momentum = false
            if CursorX < 15 then
               if (CursorY = 7 and CursorX < 10) or CursorY < 7 then
                  PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                  if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                     print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
                  else
                     print "@70@   @1F@";
                  end if
                  inc(CursorX)
                  PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                  if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                     print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
                  else
                     print "@2F@   @1F@";
                  end if
                  PLocate MAXLINE_LENGTH, 0
               end if
            end if
         case KEY_LEFT, asc("4")
            Momentum = true
            if CursorX > 1 then
               PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
               if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                  print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
               else
                  print "@70@   @1F@";
               end if
               dec(CursorX)
               PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
               if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                  print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
               else
                  print "@2F@   @1F@";
               end if
               PLocate MAXLINE_LENGTH, 0
            end if
         case else
            if (asc(ucase(chr(GetKey))) >= asc("A") and asc(ucase(chr(GetKey))) <= asc("Z")) or GetKey = asc("?") or GetKey = KEY_DEL or GetKey = 32 then
               AnyChanges = true
               if GetKey = 32 or GetKey = KEY_DEL then
                  CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) = ""
               else
                  CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) = ucase(chr(GetKey))
               end if
               PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
               if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                  print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
               else
                  print "@2F@   @1F@";
               end if
               PLocate MAXLINE_LENGTH, 0
               if Momentum then
                  if CursorX > 1 then
                     PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                     if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                        print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
                     else
                        print "@70@   @1F@";
                     end if
                     dec(CursorX)
                     PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                     if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                        print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
                     else
                        print "@2F@   @1F@";
                     end if
                     PLocate MAXLINE_LENGTH, 0
                  end if
               else
                  if CursorX < 15 then
                     if (CursorY = 7 and CursorX < 10) or CursorY < 7 then
                        PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                        if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                           print "@70@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1));" @1F@";
                        else
                           print "@70@   @1F@";
                        end if
                        inc(CursorX)
                        PLocate 7 + (CursorY * 2), 4 + ((CursorX - 1) * 5)
                        if CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)) <> "" then
                           print "@2F@ "; CurGame.Tiles((CursorY - 1) * 15 + (CursorX - 1)); " @1F@";
                        else
                           print "@2F@   @1F@";
                        end if
                        PLocate MAXLINE_LENGTH, 0
                     end if
                  end if
               end if
            end if
      end select
   loop
end function

function EditPlayerInGame(CurGame as TGame, WhichPlayer as byte)
   dim EditorChoice as integer
   dim TimeBackup as short = GetMinutesRemaining

   do while ucase(chr(EditorChoice)) <> "Q"
      Color 15,0
      Cls
      print "@03@PSScrabble Sysop Game Editor (Players)     Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      print "  @0F@Game Number @08@: @0F@";CurGame.GameNumber;" of ";CountGames
      print
      print "@03@[@0F@ 1@03@]  @0F@Wildcat! ID   @08@: @0F@";abs(CurGame.Player(WhichPlayer - 1).ID);
      
      if CurGame.Player(WhichPlayer - 1).ID = 0 then
         print " @08@(@07@Empty Slot@08@)"
      else
         dim LookupGameUser as TUser
         if GetUserByID(abs(CurGame.Player(WhichPlayer - 1).ID), LookupGameUser, 0) then
            print " @08@(@07@";LookupGameUser.info.Name;"@08@)"
         else
            print " @08@(@07@Invalid ID@08@)"
         end if
      end if

      if CurGame.Player(WhichPlayer - 1).ID <> 0 then
         print "@03@[@0F@ 2@03@]  @0F@Last Played   @08@: @0F@";DateString(CurGame.Player(WhichPlayer - 1).LastPlayed)
         print "@03@[@0F@ 3@03@]  @0F@Score         @08@: @0F@";CurGame.Player(WhichPlayer - 1).Score
         print "@03@[@0F@ 4@03@]  @0F@Tiles In Hand @08@: @0F@";
         dim i as byte
         for i = 0 to 6
            print CurGame.Player(WhichPlayer - 1).TilesInHand(i);
         next
         print
         print "@03@[@0F@ 5@03@]  @0F@Start Vote    @08@: @0F@";
         if CurGame.Player(WhichPlayer - 1).VoteStartASAP then
            print "Start ASAP"
         else
            print "Wait For More Players"
         end if
         print "@03@[@0F@ 6@03@]  @0F@Best Word     @08@: @0F@";CurGame.Player(WhichPlayer - 1).BestWord
         print "@03@[@0F@ 7@03@]  @0F@Best Score    @08@: @0F@";CurGame.Player(WhichPlayer - 1).BestScore
      end if
      print
      
      if CurGame.Player(WhichPlayer - 1).ID < 0 then
         print "@03@[@0F@ R@03@]  @0F@Rejoin Game (Un-Concede)"
      else
         print "@03@[@0F@ R@03@]  @0F@Remove User From Game (Concede)"
      end if
      
      if CurGame.Player(WhichPlayer - 1).ID <> 0 then
         print "@03@[@0F@ W@03@]  @0F@Wildcat! User Editor"
         print "@03@[@0F@ S@03@]  @0F@Scrabble User Account Editor"
      end if
      print "@03@[@0F@ H@03@]  @0F@Help On Settings"
      print "@03@[@0F@ Q@03@]  @0F@Quit To Previous Menu"

      EditorChoice = 0
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          EditorChoice = readkey(100)
          if EditorChoice <> 0 then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case EditorChoice
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("1")
            ClearHelpWindow
            PLocate 20, 1
            print "@0F@Enter a Wildcat@08@!@0F@ User ID Number or a User Logon Name@08@.";
            PLocate 5, 22
            dim TempInput as string * 26
            TempInput = InputString(25)
            if trim(TempInput) <> "" then
               if str(val(TempInput)) = TempInput then 'It's a number
                  dim FindUserName as TUser
                  if GetUserByID(val(TempInput), FindUserName, 0) then
                     if val(TempInput) <> CurGame.Player(0).id and val(TempInput) <> CurGame.Player(1).id and val(TempInput) <> CurGame.Player(2).id and val(TempInput) <> CurGame.Player(3).id then
                        CurGame.Player(WhichPlayer - 1).ID = val(TempInput)
                        CurGame.Player(WhichPlayer - 1).PlayerName = UpperLower(FindUserName.info.name)
                        UpdateGame(CurGame)
                     else
                        PLocate 5, 23
                        print "@0C@Error@04@: @07@User Already Exists In This Game@08@!                           ";
                        sleep(2000)
                     end if
                  else
                     PLocate 5, 23
                     print "@0C@Error@04@: @07@Invalid User ID@08@!                           ";
                     sleep(2000)
                  end if
               else 'It's a name
                  dim FindID as TUserInfo
                  if LookupName(trim(TempInput), FindID) then
                     if FindID.id <> CurGame.Player(0).id and FindID.id <> CurGame.Player(1).id and FindID.id <> CurGame.Player(2).id and FindID.id <> CurGame.Player(3).id then
                        CurGame.Player(WhichPlayer - 1).ID = FindID.id
                        CurGame.Player(WhichPlayer - 1).PlayerName = UpperLower(FindID.name)
                        UpdateGame(CurGame)
                     else
                        PLocate 5, 23
                        print "@0C@Error@04@: @07@User Already Exists In This Game@08@!                           ";
                        sleep(2000)
                     end if
                  else
                     PLocate 5, 23
                     print "@0C@Error@04@: @07@Invalid User Name@08@!                           ";
                     sleep(2000)
                  end if
               end if
            end if
         case asc("2")
            if Regged then
               PLocate 6, 22
               dim TempDateTime as string * 11
               SetInitialString(DateString(CurGame.Player(WhichPlayer - 1).LastPlayed))
               TempDateTime = InputString(10)
               if DateStringToDateTime(TempDateTime, CurGame.Player(WhichPlayer - 1).LastPlayed) then
                  UpdateGame(CurGame)
               end if
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("3")
            if Regged then
               PLocate 7, 22
               SetInitialString(str(CurGame.Player(WhichPlayer - 1).Score))
               CurGame.Player(WhichPlayer - 1).Score = abs(val(InputString(7)))
               UpdateGame(CurGame)
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("4")
            if Regged then
               PLocate 8, 23
               dim TempHandTiles as string * 8
               memcpy(@TempHandTiles, @CurGame.Player(WhichPlayer - 1).TilesInHand, 7)
               dim strHT as string
               strHT = TempHandTiles
               TempHandTiles = GetTileString(7, strHT)
               memcpy(@CurGame.Player(WhichPlayer - 1).TilesInHand, @TempHandTiles, 7)
               UpdateGame(CurGame)
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("5")
            if Regged then
               CurGame.Player(WhichPlayer - 1).VoteStartASAP = not CurGame.Player(WhichPlayer - 1).VoteStartASAP
               UpdateGame(CurGame)
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("6")
            if Regged then
               PLocate 10, 22
               SetInitialString(CurGame.Player(WhichPlayer - 1).BestWord)
               CurGame.Player(WhichPlayer - 1).BestWord = ucase(InputString(15))
               UpdateGame(CurGame)
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("7")
            if Regged then
               PLocate 11, 22
               SetInitialString(str(CurGame.Player(WhichPlayer - 1).BestScore))
               CurGame.Player(WhichPlayer - 1).BestScore = abs(val(InputString(7)))
               UpdateGame(CurGame)
            else
               PLocate 19, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("R"), asc("r")
            CurGame.Player(WhichPlayer - 1).ID = CurGame.Player(WhichPlayer - 1).ID * -1
         case asc("W"), asc("w")
            if CurGame.Player(WhichPlayer - 1).ID <> 0 then
               run "Sysop User Editor", str(abs(CurGame.Player(WhichPlayer - 1).ID))
            end if
         case asc("S"), asc("s")
            UserAccountEditor(CurGame.Player(WhichPlayer - 1).ID)
         case asc("H"), asc("h"), asc("?")
            HelpSection(SYSOPHELP_PLAYERSINGAMEEDITOR)
      end select
   loop
end function

function EditGameBoard(CurGame as TGame)
   dim InputChar as integer
   dim AnyChanges as boolean = false

   Cls
   ShowBoard
   DispHandInfo(CurGame, false, false)
   PLocate 20, 1
   print "  @0F@U@07@se the @0F@Arrow Keys@07@ to move the cursor@08@, @0F@Letters@07@ to place tiles@08@, @07@or @0F@SPACE@08@/@0F@DEL@07@"
   print "  to remove a tile.  Press @0F@ENTER@07@ to @0F@Save Changes@08@, @07@or @0F@ESC@07@ to undo changes@08@.";
   
   InputChar = 0
   dim XPos as byte, Ypos as byte
   
   XPos = 8
   YPos = 8
   
   do
      PLocate YPos + 3, (XPos * 3) + 31
      
      do
         InputChar = ReadKey(100)
         if ReadChannel(0, msg) then
            ProcessGameControlMsg(msg)
         end if
         CheckTimeLeft
      loop until InputChar <> 0
      
      select case InputChar
         case CTRL_R, asc("?"), CTRL_W
            if InputChar = asc("?") then HelpSection(SYSOPHELP_GAMEBOARDEDITOR)
            if InputChar = CTRL_W then WhoIsOnline
            Cls
            ShowBoard
            DispHandInfo(CurGame, false, false)
            PLocate 20, 1
            print "  @0F@U@07@se the @0F@Arrow Keys@07@ to move the cursor@08@, @0F@Letters@07@ to place tiles@08@, @07@or @0F@SPACE@08@/@0F@DEL@07@"
            print "  to remove a tile.  Press @0F@ENTER@07@ to @0F@Save Changes@08@, @07@or @0F@ESC@07@ to undo changes@08@.";
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("5")
            YPos = 8
            XPos = 8
         case asc("7")
            if YPos > 1 then
               dec(YPos)
            end if
            if XPos > 1 then
               dec(XPos)
            end if
         case asc("9")
            if YPos > 1 then
               dec(YPos)
            end if
            if XPos < 15 then
               inc(XPos)
            end if
         case asc("1")
            if YPos < 15 then
               inc(YPos)
            end if
            if XPos > 1 then
               dec(XPos)
            end if
         case asc("3")
            if YPos < 15 then
               inc(YPos)
            end if
            if XPos < 15 then
               inc(XPos)
            end if
         case KEY_UP, asc("8")
            if YPos > 1 then
               dec(YPos)
            end if
         case KEY_DOWN, asc("2")
            if YPos < 15 then
               inc(YPos)
            end if
         case KEY_LEFT, asc("4")
            if XPos > 1 then
               dec(XPos)
            end if
         case KEY_RIGHT, asc("6")
            if XPos < 15 then
               inc(XPos)
            end if
         case KEY_DEL, 32
            AnyChanges = true
            select case GetPlaceValueIgnore(YPos, XPos) 
               case 1
                  print "@0D@";string(2, 219);
               case 2
                  print "@0B@";string(2, 219);
               case 3
                  print "@0C@";string(2, 219);
               case 4
                  print "@09@";string(2, 219);
               case else
                  print "@03@__";
            end select
            CurGame.Col(XPos - 1).Row(YPos - 1) = chr(32)
         case asc("A") to asc("Z"), asc("a") to asc("z")
            AnyChanges = true
            Print "@70@";ucase(chr(InputChar));" @0F@";
            CurGame.Col(XPos - 1).Row(YPos - 1) = ucase(chr(InputChar))
         case 27
            if AnyChanges and Regged then
               ClearHelpWindow
               PLocate 20, 2
               if not AskYesNo("Are you sure you wish to exit without saving your changes?", false) then
                  InputChar = 0
                  ClearHelpWindow
               end if
            end if
         case 13
            if not Regged then
               ClearHelpWindow
               PLocate 20, 2
               print "@07@You cannot save your changes with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
               InputChar = 27
            else
               UpdateGame(CurGame)
               InputChar = 27
            end if
      end select
   loop until InputChar = 27
end function

function ConvertOnlineGameToOfflineGame(WhichGame as TGame, GameNum as integer) as boolean
   ClearHelpWindow
   PLocate 20, 1
   print "  @0F@Warning@08@: @07@This option will save this game for offline play and will end"
   print "  multinode play@08@.@07@  Once the game is offline@08@,@07@ you cannot continue the game"
   print "  in multinode play mode@08@.  @0F@";
   if AskYesNo("Do you wish to continue@08@?", false) then
      if (not Regged and CountGames >= 10) or (CountGames >= cf.MaxActiveGames and cf.MaxActiveGames > 0) then
         ClearHelpWindow
         PLocate 20, 3
         print "@0F@The maximum number of active games set by the Sysop has been reached@08@.";
         PLocate 21, 3
         Pause
         ClearHelpWindow
         ConvertOnlineGameToOfflineGame = false
      else
         dim LookForMaxedPlayers as byte
         dim FoundAny as boolean = false
         for LookForMaxedPlayers = 0 to 3
            if CheckAtGameLimit(WhichGame.Player(LookForMaxedPlayers).Id) then
               FoundAny = true
               ClearHelpWindow
               PLocate 20, 3 : print "@0F@A participant of this game is already involved in the maximum number of";
               PLocate 21, 3 : print "offline games allowed per player.  Therefore, this game cannot be saved";
               PLocate 22, 3 : print "for offline play@08@.";
               PLocate 24, 3 : Pause
               ClearHelpWindow
               exit for
            end if
         next
         if FoundAny then
            ConvertOnlineGameToOfflineGame = false
         else
            WhichGame.GameNumber = CountGames + 1
            UpdateGame(WhichGame)
            ClearHelpWindow
            PLocate 20, 2
            print "@07@Game saved under Game Number @0F@";WhichGame.GameNumber;"@08@.";
            Sleep(2000)
            GameNum = WhichGame.GameNumber
            ConvertOnlineGameToOfflineGame = true
         end if
      end if
   else
      ClearHelpWindow
      ConvertOnlineGameToOfflineGame = false
   end if
end function

function AdvanceMomentum(Momentum as byte, XPos as byte, YPos as byte)
   select case Momentum
      case MOMENTUM_UP
         if YPos > 1 then dec(YPos)
      case MOMENTUM_DOWN
         if YPos < 15 then inc(YPos)
      case MOMENTUM_RIGHT
         if XPos < 15 then inc(XPos)
      case MOMENTUM_LEFT
         if XPos > 1 then dec(XPos)
   end select
end function

function CheckTimeLeft
   if GetMinutesRemaining <= 0 then
      Cls
      print
      Print "@0F@You are out of time for today!"
      print
      WriteBulletins
   
      cf.LastUser = UpperLower(user.info.name)
      inc(cf.TimesRun)
      WriteConfig
      'We should see if that player is in a multiplayer game, and send that game a CONCEDE msg
      HangUp
   end if
end function

function ShowTimeLeft
   ClearHelpWindow
   PLocate 20, 1
   Print "  @08@- @0F@Time Remaining@08@: @07@";FormatNumber(GetMinutesRemaining);" Minutes@08@ [@07@PAUSE@08@]";
   do
      CheckTimeLeft
   loop until ReadKey(100) > 0
   ClearHelpWindow
end function

function UserAccountEditor(UserID as integer)
   dim ConfigChoice as integer
   dim TimeBackup as short = GetMinutesRemaining
   dim EditPlayer as TPlayerRecord
   dim TotalRecords as integer
   
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   dim RecordLookup as integer = 1
   
   if PlayerFile > 0 then
      TotalRecords = lof(PlayerFile)
      if UserID > 0 then
         do while not eof(PlayerFile)
            get #PlayerFile, RecordLookup, EditPlayer
            if EditPlayer.ID = UserID then
               exit do
            end if
            inc(RecordLookup)
         loop
      else
         get #PlayerFile, RecordLookup, EditPlayer
      end if
      close #PlayerFile
   end if
  
   do while asc(ucase(chr(ConfigChoice))) <> asc("Q")
      Color 15,0
      Cls
      print "@03@PSScrabble User Account Editor             Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      print "      @03@Record @0F@";RecordLookup;" @03@of@0F@ ";TotalRecords;
      
      if EditPlayer.ID < 0 then
         print " @08@(@0F@DELETED@08@)"
      else
         print
      end if

      Print
      print "@03@[@0F@ 1@03@]  @0F@Wildcat! User ID            @08@: @0F@";abs(EditPlayer.ID)
      print "@03@[@0F@ 2@03@]  @0F@Player Name                 @08@: @0F@";EditPlayer.PlayerName
      print "@03@[@0F@ 3@03@]  @0F@Games Played                @08@: @0F@";EditPlayer.GamesPlayed
      print "@03@[@0F@ 4@03@]  @0F@Games Won                   @08@: @0F@";EditPlayer.GamesWon
      print "@03@[@0F@ 5@03@]  @0F@Highest Score In A Game     @08@: @0F@";EditPlayer.HighestScore
      print "@03@[@0F@ 6@03@]  @0F@Highest Score In A Play     @08@: @0F@";EditPlayer.HighestScoringPlay
      print "@03@[@0F@ 7@03@]  @0F@Total Scores                @08@: @0F@";EditPlayer.TotalScores
      print "@03@[@0F@ 8@03@]  @0F@E-Mail Address              @08@: @0F@";
      if trim(EditPlayer.NotifyEmail) = "" then
         print "Local"
      else
         print EditPlayer.NotifyEmail
      end if
      print "@03@[@0F@ 9@03@]  @0F@Notify By Email             @08@: @0F@";DispYesNo(not EditPlayer.DisableEmail)
      print
      print "@03@[@0F@ H@03@]  @0F@Help On Settings"
      print "@03@[@0F@ Q@03@]  @0F@Quit User Account Editor"
      print 
      print " @03@[@0F@1@08@...@0F@8@08@, @0F@H@08@, @0F@Q@03@], @0F@Arrow Keys@03@/@0F@Brackets@03@ to select player, @0F@S@03@ to search,"
      print "  @0F@A@03@ to Add New Player, @0F@D@03@ to Delete/Restore Player @08@: @0F@";
 
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          ConfigChoice = readkey(100)
          if ConfigChoice <> 0 then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case ConfigChoice
         case CTRL_T
            ShowTimeLeft
         case asc("\")
            OnlinePage
         case asc("1")
            PLocate 5, 36
            SetInitialString(str(EditPlayer.ID))
            EditPlayer.ID = val(InputString(5))
            UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
         case asc("2")
            PLocate 6, 36
            SetInitialString(EditPlayer.PlayerName)
            EditPlayer.PlayerName = UpperLower(trim(InputString(25)))
            UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
         case asc("3")
            if Regged then
               PLocate 7, 36
               SetInitialString(str(EditPlayer.GamesPlayed))
               EditPlayer.GamesPlayed = val(InputString(5))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("4")
            if Regged then
               PLocate 8, 36
               SetInitialString(str(EditPlayer.GamesWon))
               EditPlayer.GamesWon = val(InputString(5))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("5")
            if Regged then
               PLocate 9, 36
               SetInitialString(str(EditPlayer.HighestScore))
               EditPlayer.HighestScore = val(InputString(5))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("6")
            if Regged then
               PLocate 10, 36
               SetInitialString(str(EditPlayer.HighestScoringPlay))
               EditPlayer.HighestScoringPlay = val(InputString(5))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("7")
            if Regged then
               PLocate 11, 36
               SetInitialString(str(EditPlayer.TotalScores))
               EditPlayer.TotalScores = val(InputString(5))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("8")
            if Regged then
               PLocate 12, 36
               SetInitialString(EditPlayer.NotifyEmail)
               EditPlayer.NotifyEmail = trim(InputString(30))
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("9")
            if Regged then
               EditPlayer.DisableEmail = not EditPlayer.DisableEmail
               UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
            else
               PLocate 20, 2
               print "@07@You cannot change this field with the @0C@UNREGISTERED@07@ version. @08@[@07@PAUSE@08@]";
               Do : loop until ReadKey(100) > 0
            end if
         case asc("H"), asc("h"), asc("?")
            HelpSection(SYSOPHELP_USEREDITOR)
         case asc("A"), asc("a")
            ClearHelpWindow
            PLocate 20, 3
            print "@03@User ID or User Name To Add@08@ : @0F@";
            dim UserToAdd as string = AskString(25)
            if not CheckIfExists(UserToAdd) then
               if trim(UserToAdd) <> "" then
                  inc(TotalRecords)
                  RecordLookup = TotalRecords
                  if str(val(UserToAdd)) = UserToAdd then 'It's a number
                     dim FindUserName as TUser
                     EditPlayer.ID = val(UserToAdd)
                     if GetUserByID(val(UserToAdd), FindUserName, 0) then
                        EditPlayer.PlayerName = FindUserName.info.name
                     else                         
                        EditPlayer.PlayerName = ""
                     end if
                  else
                     dim FindUserID as TUserInfo
                     if LookupName(trim(UserToAdd), FindUserID) then
                        EditPlayer.ID = FindUserID.ID
                     else
                        EditPlayer.ID = 0
                     end if
                     EditPlayer.PlayerName = UpperLower(trim(UserToAdd))
                  end if
                  EditPlayer.GamesPlayed = 0
                  EditPlayer.GamesWon = 0
                  EditPlayer.HighestScore = 0
                  EditPlayer.TotalScores = 0
                  EditPlayer.NotifyEmail = ""
                  EditPlayer.DisableEmail = false
                  UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
               end if
            else
               ClearHelpWindow
               PLocate 20, 1
               print "  @0C@ERROR@04@: @07@This user is already in the database."
               print "  ";
               Pause
            end if
         case asc("D"), asc("d")
            EditPlayer.ID = EditPlayer.ID * -1
            UpdatePlayerRecordByOffset(RecordLookup, EditPlayer)
         case asc("S"), asc("s")
            ClearHelpWindow
            PLocate 20, 3
            print "@03@User ID or User Name@08@ : @0F@";
            dim SearchBy as string = AskString(25)
            if trim(SearchBy) <> "" then
               PlayerFile = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
               if PlayerFile > 0 then
                  dim TempRecordNum as integer = 1
                  dim FoundIt as boolean = false
                  dim TempRecordLookup as TPlayerRecord
                  if str(val(SearchBy)) = SearchBy then 'It's a number
                     SearchBy = str(abs(val(SearchBy)))
                     do while not eof(PlayerFile)
                        get #PlayerFile, TempRecordNum, TempRecordLookup
                        if TempRecordLookup.ID = val(SearchBy) then
                           EditPlayer = TempRecordLookup
                           RecordLookup = TempRecordNum
                           FoundIt = true
                           exit do
                        end if
                        inc(TempRecordNum)
                     loop
                     if not FoundIt then
                        ClearHelpWindow
                        PLocate 20, 1
                        Print "  @03@No matching User IDs were found@08@."
                        print "  ";
                        Pause
                     end if
                  else 'It's a name
                     do while not eof(PlayerFile)
                        get #PlayerFile, TempRecordNum, TempRecordLookup
                        if ucase(TempRecordLookup.PlayerName) = trim(ucase(SearchBy)) then
                           EditPlayer = TempRecordLookup
                           RecordLookup = TempRecordNum
                           FoundIt = true
                           exit do
                        end if
                        inc(TempRecordNum)
                     loop
                     if not FoundIt then
                        ClearHelpWindow
                        PLocate 20, 1
                        Print "  @03@No matching User Names were found@08@."
                        print "  ";
                        Pause
                     end if
                  end if
                  close #PlayerFile
               end if
            end if
         case KEY_RIGHT, asc("]")
            if RecordLookup < TotalRecords then
               PlayerFile = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
               if PlayerFile > 0 then
                  inc(RecordLookup)
                  get #PlayerFile, RecordLookup, EditPlayer
                  close #PlayerFile
               end if
            end if
         case KEY_LEFT, asc("[")
            if RecordLookup > 1 then
               PlayerFile = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
               if PlayerFile > 0 then
                  dec(RecordLookup)
                  get #PlayerFile, RecordLookup, EditPlayer
                  close #PlayerFile
               end if
            end if
      end select
   loop
end function

function CheckIfExists(UserToCheck as string) as boolean
   CheckIfExists = false
   if trim(UserToCheck) <> "" then
      dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
      if PlayerFile > 0 then
         dim TempRecordNum as integer = 1
         dim FoundIt as boolean = false
         dim TempRecordLookup as TPlayerRecord
         if str(val(UserToCheck)) = UserToCheck then 'It's a number
            UserToCheck = str(abs(val(UserToCheck)))
            do while not eof(PlayerFile)
               get #PlayerFile, TempRecordNum, TempRecordLookup
               if TempRecordLookup.ID = val(UserToCheck) then
                  FoundIt = true
                  exit do
               end if
               inc(TempRecordNum)
            loop
            if not FoundIt then
               exit function
            else
               CheckIfExists = true
               exit function
            end if
         else 'It's a name
            do while not eof(PlayerFile)
               get #PlayerFile, TempRecordNum, TempRecordLookup
               if ucase(TempRecordLookup.PlayerName) = trim(ucase(UserToCheck)) then
                  FoundIt = true
                  exit do
               end if
               inc(TempRecordNum)
            loop
            if not FoundIt then
               exit function
            else
               CheckIfExists = true
               exit function
            end if
         end if
         close #PlayerFile
      end if
   end if
end function

function UpdateMsgBuffer(MsgText as string) as boolean
   const MAX_MSGBUFFER = MAXLINE_LENGTH - 21 'Remember, msgs start at 0 - so 3 would mean 4 msgs would display at once

   if high(WinMsgBuffer) < 0 and MsgText = "" then exit function 'Nothing to update, nothing to push
   
   if high(WinMsgBuffer) > 10 then 'Clear some stuff out to save a bit of memory (using 10 for a possible scrollback??)
      WinMsgBuffer(0) = WinMsgBuffer(high(WinMsgBuffer) - 3)
      WinMsgBuffer(1) = WinMsgBuffer(high(WinMsgBuffer) - 2)
      WinMsgBuffer(2) = WinMsgBuffer(high(WinMsgBuffer) - 1)
      WinMsgBuffer(3) = WinMsgBuffer(high(WinMsgBuffer))
      redim WinMsgBuffer(3)
   end if

   if high(WinMsgBuffer) < 0 and MsgText <> "" then
      redim WinMsgBuffer(0)
      WinMsgBuffer(0).ID = 0
      WinMsgBuffer(0).MsgText = trim(MsgText)
      GetCurrentDateTime(WinMsgBuffer(0).WhenPushed)
   elseif high(WinMsgBuffer) >= 0 and MsgText <> "" then
      redim WinMsgBuffer(high(WinMsgBuffer) + 1)
      WinMsgBuffer(high(WinMsgBuffer)).ID = high(WinMsgBuffer)
      WinMsgBuffer(high(WinMsgBuffer)).MsgText = trim(MsgText)
      GetCurrentDateTime(WinMsgBuffer(high(WinMsgBuffer)).WhenPushed)
   end if
   
   dim StartOffset as short
   dim EndOffset as short
   if high(WinMsgBuffer) < MAX_MSGBUFFER and high(WinMsgBuffer) > 0 then
      StartOffset = 0
      EndOffset = high(WinMsgBuffer)
   end if
   if high(WinMsgBuffer) = 0 then
      StartOffset = 0
      EndOffset = 0
   end if
   if high(WinMsgBuffer) >= MAX_MSGBUFFER then
      StartOffset = high(WinMsgBuffer) - MAX_MSGBUFFER
      EndOffset = high(WinMsgBuffer)
   end if
   
   ClearHelpWindow
   dim i as byte
   dim PrintMsg as string
   for i = 0 to EndOffset - StartOffset
      PLocate 20 + i, 1
      PrintMsg = WinMsgBuffer(i + StartOffset).MsgText
      Print ATTrim(PrintMsg);
   next
   PLocate MAXLINE_LENGTH, 1
end function

function ATTrim(TrimMsg as string) as string
    dim CopyIt as boolean
    dim TempString as string
    dim StringSearch as byte
    dim BytesAccepted as short = 0
    
    CopyIt=true
    TempString = ""
    
    For StringSearch = 1 to LEN(TrimMsg)
        TempString = TempString + TrimMsg(StringSearch)
        If TrimMsg(StringSearch) <> "@" And CopyIt Then
           inc(BytesAccepted)
           if BytesAccepted >= 80 then exit for
        Else
            if TrimMsg(StringSearch) = "@" then
               if CopyIt and TrimMsg(StringSearch + 3) = "@" then
                  CopyIt = false
               elseif not CopyIt then
                  CopyIt = true
               end if
            end if
        End If
    Next StringSearch

    ATTrim = TempString
end function

function WhoIsOnline
   cls
   ChangeActivity("Who's Online")
   run "Who Is Online"
   ChangeActivity("Play Menu")
end function

function CheckMultinodeTimeLeft(GamePlay as TGame, OurPlayerNum as byte, GameChannel as integer)
   if GetMinutesRemaining <= 0 then
      ReturnTiles(GamePlay, GamePlay.Player(OurPlayerNum))
      GamePlay.Player(OurPlayerNum).Id = 0
      dim GamePlayShort as TGameShort
      ConvertLongGameToShort(GamePlay, GamePlayShort)
      WriteChannel(GameChannel, 0, ONLINEGAME_GAMEUPDATE, GamePlayShort, sizeof(GamePlayShort))
      WriteChannel(GameChannel, 0, ONLINEGAME_OUTOFTIME, GamePlay.Player(OurPlayerNum), sizeof(GamePlay.Player(OurPlayerNum)))
      CloseChannel(GameChannel)
      ClearHelpWindow
      hangup
   end if
end function

function CheckForIdlePlayers
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   dim CheckRec as integer = 1
   dim RecImage as TGame
   dim Now as DateTime
   dim Days as integer
   dim Sec as integer
   GetCurrentDateTime(Now)
   DateTimeDiff(Now, cf.LastRan, Days, Sec)
   if Days >= 1 and cf.MaxDaysIdle > 0 then
      if ScrabFile > 0 then
         do while not eof(ScrabFile)
            get #ScrabFile, CheckRec, RecImage
            if RecImage.BeingPlayed then
               DateTimeDiff(Now, RecImage.Player(RecImage.WhosTurn).LastPlayed, Days, Sec)
               if Days > cf.MaxDaysIdle and DateString(RecImage.Player(RecImage.WhosTurn).LastPlayed, "M/d/y") <> "1/1/1" then
                  inc(RecImage.WhosTurn)
                  if RecImage.WhosTurn >= RecImage.NumPlayers then RecImage.WhosTurn = 0
                  UpdateGame(RecImage)
                  NotifyPlayerOfTurn(RecImage.Player(RecImage.WhosTurn).Id, RecImage)
               elseif Days < 3 then
                  EmailIdlePlayer(RecImage, Days)
               end if
            end if
            inc(CheckRec)
         loop
         close #ScrabFile
      end if
   end if
end function

function EmailIdlePlayer(GameData as TGame, Days as integer)
   dim UserEmail as TMsgHeader
   dim FindPlayerRecord as integer = 1
   dim TempPlayerRecord as TPlayerRecord
   dim PlayerFile as integer = open GetPath + "Players.Dat" for random len=sizeof(TPlayerRecord)
   if PlayerFile > 0 then
      do while not eof(PlayerFile)
         get #PlayerFile, FindPlayerRecord, TempPlayerRecord
         if TempPlayerRecord.id = GameData.Player(GameData.WhosTurn).ID then
            if not TempPlayerRecord.DisableEmail then
               dim FEmailMsg as integer = open "wc:\temp\ScrabTurn.Msg" for output
               if FEmailMsg > 0 then
                  print #FEmailMsg, "Dear ";UpperLower(GameData.Player(GameData.WhosTurn).PlayerName);","
                  print #FEmailMsg, ""
                  print #FEmailMsg, "It is still your turn in Scrabble Game Number ";GameData.GameNumber;"!"
                  print #FEmailMsg, ""
                  print #FEmailMsg, "If you do not play in ";cf.MaxDaysIdle - Days;" day";
                  if cf.MaxDaysIdle - Days <> 1 then
                     print #FEmailMsg, "s";
                  end if
                  print #FEmailMsg, ", you will automatically"
                  print #FEmailMsg, "pass your turn.  Thanks!"
                  print #FEmailMsg, ""
                  print #FEmailMsg, "                Sincerely,"
                  print #FEmailMsg, "                      Pisces Software PSScrabble"
                  
                  close #FEmailMsg
                  
                  UserEmail.From.Name = "PSScrabble"
                  if trim(TempPlayerRecord.NotifyEmail) <> "" and InStr(TempPlayerRecord.NotifyEmail, "@") > 0 and not Exists(GetPath + "NO_EMAILNOTIFY.$$$") and (Makewild.InstalledComponents and WILDCAT_COMPONENT_ICP) > 0 then
                     UserEmail.To.Name = trim(TempPlayerRecord.NotifyEmail)
                  else
                     UserEmail.To.Name = ucase(GameData.Player(GameData.WhosTurn).PlayerName)
                     UserEmail.To.Id = GameData.Player(GameData.WhosTurn).ID
                  end if
                  UserEmail.Subject = "Your Turn In Game " + str(GameData.GameNumber)
                  UserEmail.Conference = 0
                  dim now as DateTime
                  GetCurrentDateTime(now)
                  UserEmail.Private = True
               
                  AddMessage(UserEmail, "wc:\temp\ScrabTurn.Msg")
            
                  del "wc:\temp\ScrabTurn.Msg"
               end if
            end if
            exit do
         end if
         inc(FindPlayerRecord)
      loop
      close #PlayerFile
   end if
end function

function CheckAtGameLimit(UserID as integer) as boolean
   if Regged and cf.MaxGamesPerPlayer = 0 then
      CheckAtGameLimit = false
      exit function
   end if
      
   dim CurGamePtr as integer = 1
   dim TempGame as TGame
   dim GameCount as integer = 0
   dim ScrabFile as integer = open GetPath + "Scrabble.Dat" for random len=sizeof(TGame)
   if ScrabFile > 0 then
      do while not eof(ScrabFile)
         get #ScrabFile, CurGamePtr, TempGame
         if TempGame.BeingPlayed or not TempGame.Completed then
            if TempGame.Player(0).id = UserID or TempGame.Player(1).id = UserID or TempGame.Player(2).id = UserID or TempGame.Player(3).id = UserID then
               inc(GameCount)
            end if
         end if
         inc(CurGamePtr)
      loop
      close #ScrabFile
   end if
   
   if GameCount >= cf.MaxGamesPerPlayer or (not regged and GameCount >= 2) then
      CheckAtGameLimit = true
   else
      CheckAtGameLimit = false
   end if
end function

function StillChallenging(NodeID as integer) as boolean
   dim LookupNode as TScrabbleNode
   dim GetNodeData as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)
   if GetNodeData > 0 then
      Get #GetNodeData, NodeID, LookupNode
      if LookupNode.WhichPlayer.IsChallenging then
         StillChallenging = true
      else
         StillChallenging = false
      end if
      close #GetNodeData
   end if
end function

function RefreshOnlineGames as integer
   dim GetOnlineGames as integer = open GetPath + "OnlineGames.dat" for random len=sizeof(TOnlineGame)
   if GetOnlineGames > 0 then
      if lof(GetOnlineGames) = 0 then
         redim OnlineGames(-1)
      else
         redim OnlineGames(lof(GetOnlineGames))
      end if
      dim GameLoop as integer = 1
      for GameLoop = 1 to lof(GetOnlineGames)
         get #GetOnlineGames, GameLoop, OnlineGames(GameLoop - 1)
         if Our.GameStruct.GameNumber = GameLoop then
            if OnlineGames(GameLoop - 1).Status = 1 then
               RefreshOnlineGames = RESULT_NOTIFIEDGAMESTART
            else
               if memcmp(@OnlineGames(GameLoop - 1), @Our.GameStruct, sizeof(TOnlineGame)) <> 0 then
                  Our.GameStruct = OnlineGames(GameLoop - 1)
                  RefreshOnlineGames = RESULT_NOTIFIEDGAMEUPDATE
               end if
            end if
         end if
      next
      close #GetOnlineGames
   else
      redim OnlineGames(-1)
   end if
end function

function WriteOnlineGame(GameData as TOnlineGame) as boolean
   dim GetOnlineGames as integer = open GetPath + "OnlineGames.dat" for random len=sizeof(TOnlineGame)
   if GetOnlineGames > 0 then
      put #GetOnlineGames, GameData.GameNumber, GameData
      close #GetOnlineGames
      WriteOnlineGame = true
   else
      WriteOnlineGame = false
   end if
   WriteChannel(GameControl, 0, SCRABBLE_REFRESHGAMEDATA, 0, 0)
end function

function GetFirstOpenOnlineGameNumber as integer
   //0 = Waiting For Players   1 = In Progress   2 = New Host   3 = All Users Have Quit   4 = Game over
   dim GetOnlineGames as integer = open GetPath + "OnlineGames.dat" for random len=sizeof(TOnlineGame)
   dim OurAnswer as integer = 0
   if GetOnlineGames > 0 then
      dim GameLoop as integer = 1
      dim TempGameLookup as TOnlineGame
      for GameLoop = 1 to lof(GetOnlineGames)
         get #GetOnlineGames, GameLoop, TempGameLookup
         if TempGameLookup.status > 2 then
            OurAnswer = GameLoop
            exit for
         end if
      next
      if OurAnswer = 0 then
         GetFirstOpenOnlineGameNumber = lof(GetOnlineGames) + 1
      else
         GetFirstOpenOnlineGameNumber = OurAnswer
      end if
      close #GetOnlineGames
   end if
end function

function GetOnlinePlayerCount as integer
   TryToKillGameData
   dim GetNodeFile as integer = open GetPath + "NodeData.Dat" for random len=sizeof(TScrabbleNode)   
   if GetNodeFile > 0 then
      dim CountPeople as integer
      dim PeopleFound as integer = 0
      dim TempPerson as TScrabbleNode
      for CountPeople = 1 to lof(GetNodeFile)
         get #GetNodeFile, CountPeople, TempPerson
         if TempPerson.NodeActive then inc(PeopleFound)
      next
      close #GetNodeFile
   end if
   
   GetOnlinePlayerCount = PeopleFound
end function

function TryToKillGameData
   dim GetOnlineGames as integer = open GetPath + "OnlineGames.dat" for random len=sizeof(TOnlineGame)
   dim OkayToKill as boolean = true
   if GetOnlineGames > 0 then
      dim GameCount as integer
      dim TempGame as TOnlineGame
      for GameCount = 1 to lof(GetOnlineGames)
         get #GetOnlineGames, GameCount, TempGame
         if TempGame.Status < 3 then OkayToKill = false
      next
      close #GetOnlineGames
   end if
   if OkayToKill then
      Kill GetPath + "OnlineGames.dat"
      WriteChannel(GameControl, 0, SCRABBLE_REFRESHGAMEDATA, 0, 0)
   end if
end function

function DoorwayMode(Status as boolean)
  if Status then
     print chr(27);"[=255h"; // turn Doorway mode on
  else
     print chr(27);"[=255l"; // turn Doorway mode off 
  end if
end function

function SpectateGame(WhichGame as TOnlineGame)
   dim GamePlay as TGame
   dim GamePlayShort as TGameShort
   dim InputChar as integer
   dim Play as TPlay
   dim OurPlayerNum as byte
   dim GameChannel as integer = OpenChannel("Scrabble.Game" + str(WhichGame.GameNumber))
   redim WinMsgBuffer(-1) 'Clear out chat msgs from old games!
   dim PlayerUpdate as TPlayerRecord
   GetPlayerInfo(PlayerUpdate)
   dim UseMomentum as boolean = not PlayerUpdate.DisableMomentum
   
   dim Spectator as TPlayer
   Spectator.ID = user.info.id
   Spectator.PlayerName = UpperLower(user.info.name)
   
   WriteChannel(GameChannel, 0, ONLINEGAME_SPECTATE_ENTER, Spectator, sizeof(Spectator))
   sleep(2000)
   dim WriteBoardData as integer = open GetPath + "TempFile." + str(WhichGame.GameNumber) for random len=sizeof(TGame)
   if WriteBoardData > 0 then
      get #WriteBoardData, 1, GamePlay
      close #WriteBoardData
   end if
   
   RefreshNodeData
   Cls
   ShowBoard

   ClearHelpWindow
   ClearBox
   DispHandInfo(GamePlay, false, true)
   HilightWhosTurn(GamePlay)

   ClearHelpWindow
   PLocate 20, 4
   print "@03@Press @0B@ESC@03@ to leave the game, or any other key to chat."
      
   do while GamePlay.BeingPlayed
      dim KeyPress as integer
      dim TurnBackup as byte
      
      if ReadChannel(0, msg) then
         if msg.Channel = GameChannel then
            TurnBackup = GamePlay.WhosTurn
            ProcessGamePlayMsg(msg, GamePlay)
            if GamePlay.WhosTurn <> TurnBackup then
               DispHandInfo(GamePlay, true, true)
               HilightWhosTurn(GamePlay)
            end if
            if GamePlay.Completed then
               DoorwayMode(false)
               exit function
            end if
         else
            ProcessGameControlMsg(msg)
         end if
      end if
      KeyPress = readkey(100)
      CheckMultinodeTimeLeft(GamePlay, OurPlayerNum, GameChannel)
      
      dim AnyoneElse as boolean = false
      AnyoneElse = (GamePlay.Player(0).ID > 0 and OurPlayerNum <> 0)
      AnyoneElse = AnyoneElse or (GamePlay.Player(1).ID > 0 and OurPlayerNum <> 1)
      AnyoneElse = AnyoneElse or (GamePlay.Player(2).ID > 0 and OurPlayerNum <> 2)
      AnyoneElse = AnyoneElse or (GamePlay.Player(3).ID > 0 and OurPlayerNum <> 3)
      if not AnyoneElse then
         ClearHelpWindow
         PLocate 20, 3
         print "@0F@There is no one but you left in the game.  Leaving game...";
         sleep(2500)
         CloseChannel(GameChannel)
         ClearHelpWindow
         ClearBox
         RedrawBoard
         ClearHelpWindow
         exit function
      end if

      if KeyPress > 0 then
         select case KeyPress
            case CTRL_T
               ShowTimeLeft
            case asc("\")
               OnlinePage
            case CTRL_R, asc("?"), CTRL_W
               if InputChar = asc("?") then HelpSection(HELP_MULTINODEGAMES)
               if InputChar = CTRL_W then WhoIsOnline
               cls
               ShowBoard
               DispHandInfo(GamePlay, false, true)
               PLocate 20,4
               print "@03@Press @0B@ESC@03@ to leave the game, or any other key to chat."
            case else
               dim ShouldWeConcede as boolean = false
               if KeyPress <> 27 then ShouldWeConcede = SendChatMsg(GamePlay, GameChannel, UseMomentum, KeyPress)
               if KeyPress = 27 or ShouldWeConcede then
                  ClearHelpWindow
                  PLocate 20,1
                  if AskYesNo("  @03@Are you sure you want to leave?",false) then
                     WriteChannel(GameChannel, 0, ONLINEGAME_SPECTATE_LEAVE, Spectator, sizeof(Spectator))
                     exit function
                  else
                     ClearHelpWindow
                     PLocate 20, 4
                     print "@03@Press @0B@ESC@03@ to leave the game, or any other key to chat."
                  end if
               end if
         end select
      end if
   loop
   
   CloseChannel(GameChannel)
   ClearHelpWindow
   ClearBox
   RedrawBoard
   
   exit function
   
   catch ERR_NOCARRIER:
      WriteChannel(GameChannel, 0, ONLINEGAME_SPECTATE_LEAVE, Spectator, sizeof(Spectator))
      CloseChannel(GameChannel)
      ControlMessage(SCRABBLE_LEAVE)
      CloseChannel(GameControl)
      RemoveUsFromNodeFile
      end
end function

function DetectProtocol as integer '0) Jack crap 1) PC ANSI 2) VTx00
   'Print Chr(27) + "[6n";
   'Cls
   'locate 25,1
   'print "csrlin returns ";csrlin
   'print
   'pause
end function

function PLocate(y as byte, x as byte)
   'if y >= 23 then
   '   print chr(27); "["; str(23);";"; str(x);"H"; 
   'else
      print chr(27); "["; str(y);";"; str(x);"H"; 
   'end if
end function

function IBBSSettings
   dim ConfigChoice as string * 1
   dim TimeBackup as short = GetMinutesRemaining
   
   do while ConfigChoice <> "Q"
      Color 15,0
      Cls
      print "@03@PSScrabble InterBBS Network Settings       Time Left@08@:@0F@ ";GetMinutesRemaining
      print Bar(60,0,9)
      Print
      
      print "@03@[@0F@ 1@03@]  @0F@Enable InterBBS Features    @08@: @0F@";DispYesNo(cf.EnableIBBS)
      print "@03@[@0F@ 2@03@]  @0F@Server Address              @08@: @0F@";cf.IBBSServer
      print "@03@[@0F@ 3@03@]  @0F@Server Port                 @08@: @0F@";cf.IBBSPort
      print
      print "@03@[@0F@ N@03@]  @0F@Network Information"
      print "@03@[@0F@ Q@03@]  @0F@Quit InterBBS Settings"
      print 
 
      do
          if GetMinutesRemaining <> TimeBackup then
             dim XBackup as byte = pos, YBackup as byte = csrlin
             TimeBackup = GetMinutesRemaining
             PLocate 1,55
             print "@0F@";GetMinutesRemaining;"     "
             PLocate YBackup, XBackup
          end if
          
          ConfigChoice = ucase(CHR(readkey(100)))
          if ConfigChoice <> "" then
             exit do
          end if
          CheckTimeLeft
      loop
 
      select case ucase(ConfigChoice)
         case "1"
            cf.EnableIBBS = not cf.EnableIBBS
         case "2"
            PLocate 5, 36
            SetInitialString(cf.IBBSServer)
            cf.IBBSServer = InputString(50)
            WriteConfig
         case "3"
            PLocate 6, 36
            SetInitialString(str(cf.IBBSPort))
            cf.IBBSPort = abs(val(InputString(6)))
            WriteConfig
         case "N"
            HelpSection(HELP_IBBSSETTINGS)
      end select
   loop
end function

//***********************************************************************
//**                                                                   **
//**    End of subs/Functions - Main Code Goes Here                    **
//**                                                                   **
//***********************************************************************

if GetObjectFlags(OBJECTID_MASTER_SYSOP) < 1 then cls : print "@0F@Under Construction @08@:" : print : print "@03@This game is currently @0B@Under Construction@03@." : print "Some features may not work correctly." : print : Pause
InitDefaultTileArray
InitMultinode
ReadConfig
ShowIntro
ShowGameStatus(false)
PlayMenu
QuitGame

catch ERR_NOCARRIER:
   RemoveUsFromNodeFile
   ControlMessage(SCRABBLE_LEAVE)
   CloseChannel(GameControl)
