//Changed in version 1.0 full
//Fixed Number Guess min time bet error
//Fixed Blackjack error (Let you bet time you didn't have)
//Added activity logging
//Default Raffle Odds now 3%, not 5% by default
//Added Bulletins Configuration Menu
//Added About PS-TimeBank option
//Commas in numbers

//     To Do:
//Download/K bank
//High scores list/Bulletins
//Logoff module
//If bulletin path is "", make it say "Disabled"

//     Next Version:
//Dealer must hit soft [ ] option
//Buy k/downloads with minutes (Prices configurable 1min = ? k and 1 dl = ? min)
//Make Write To Author (Configurably) to write to me
//Restore defaults in each config options, master restore defaults
//Smarter dealer in Blackjack games
//Make default sec level array dynamic (???)
//Blackjack - Make it say final scores ("Dealer has 21, sorry Hiawatha!")
//Make dynamic menus in case files aren't there
//Before showing Displayfile for welcome screen, set @SUBx@ to different things they might use
//Activity logging (Configurable - WC log or seperate log)
//Transfers to other accounts
//Loans
//Stocks on file downloads??
//Robbing bank functions (Fields for who robbed you, when, how much)
//DHTML features
//Make dealer in blackjack comment on stuff

#include "util.wch"
#include "cmdline.wch"
#include "dispfile.wch"
#include "timeutil.wch"
#include "pagemsg.wch"
#include "windows.wch"
#include "psoft.wch"

type BullFileOps
   Path as string * 80
   TopNumber as byte
   ExcludeSysop as boolean
   Header as string * 80
   Footer as string * 80
end type

type BullOps
   MostTimeWonAnsi as BullFileOps          //Most time won (ANSI Version)
   MostTimeLostAnsi as BullFileOps         //Most time lost (ANSI Version)
   MostTimeInBankAnsi as BullFileOps       //Most time in bank (ANSI Version)
   MostKilobytesInBankAnsi as BullFileOps  //Most K in bank (ANSI Version)
   MostDownloadsInBankAnsi as BullFileOps  //Most DL in bank (ANS version)
   MostTimeWonHTML as BullFileOps          //Most time won (HTML Version)
   MostTimeLostHTML as BullFileOps         //Most time lost (HTML Version)
   MostTimeInBankHTML as BullFileOps       //Most time in bank (HTML Version)
   MostKilobytesInBankHTML as BullFileOps  //Most Kilobytes in bank (HTML Version)
   MostDownloadsInBankHTML as BullFileOps  //Most DL in bank (HTML Version)
   BullOps as boolean                      //Bulletin option available from Time Bank menu
end type

type ModProf                  //Type used to store settings if user is a moderator
   UserEditor as boolean      //Can they use the Time Bank user editor?
   AllowTimeModify as boolean //Can they modify the time they have online?
   DeleteUsers as boolean     //Can they delete users (total reset or in user editor)?
   WCUserDB as boolean        //Can they access the Wildcat! user database editor
   Configure as boolean       //Can they  configuration options
end type

type DefUserSec               //Profile settings for the default user by sec level
   WCSecLevel as string * 25  //Security level in Wildcat! for this user
   StartBalM as word          //Starting Balance (Minutes)
   StartBalK as word          //Starting Balance (Kilobytes)
   StartBalDL as word         //Starting Balance (Downloads)
   MaxBalM as word            //Maximum Balance (Minutes)
   MaxBalK as word            //Maximum Balance (Kilobytes)
   MaxBalDL as word           //Maximum Balance (Downloads)
   MaxTimeLeft as short       //Maximum Time Left Online
   LockedOut as boolean       //This user is locked out
   NoDepMin as boolean        //This user cannot deposit minutes
   NoDepK as boolean          //This user cannot deposit kilobytes
   NoDepDL as boolean         //This user cannot deposit downloads
   SysopAccess as boolean     //This user has Time Bank Sysop access
   SysopAccessSet as ModProf  //Holds settings for the sysop access
   GambleOvr as boolean       //They can gamble, despite what their sec level says
   GambleLockout as boolean   //They cannot gable, despite what their sec level says
end type

type DefUser                  //Profile settings for the default user
   StartBalM as word          //Starting Balance (Minutes)
   StartBalK as word          //Starting Balance (Kilobytes)
   StartBalDL as word         //Starting Balance (Downloads)
   MaxBalM as word            //Maximum Balance (Minutes)
   MaxBalK as word            //Maximum Balance (Kilobytes)
   MaxBalDL as word           //Maximum Balance (Downloads)
   MaxTimeLeft as short       //Maximum Time Left Online
   LockedOut as boolean       //This user is locked out
   NoDepMin as boolean        //This user cannot deposit minutes
   NoDepK as boolean          //This user cannot deposit kilobytes
   NoDepDL as boolean         //This user cannot deposit downloads
   SysopAccess as boolean     //This user has Time Bank Sysop access
   SysopAccessSet as ModProf  //Holds settings for the sysop access
   GambleOvr as boolean       //They can gamble, despite what their sec level says
   GambleLockout as boolean   //They cannot gable, despite what their sec level says
end type

type HRSettings
   Disable as boolean         //Disable horse race
   HorseChar as byte          //ASCII character for the horses
   HColor as string * 10      //Horse color, or RANDOM for random colors
   MinSpace as byte           //Minimum spaces a horse can jump in one cycle
   MaxSpace as byte           //Maximum spaces a horse can jump in one cycle
   Delay as word              //Delay factor between jump cycles
   NumHorses as byte          //Number of horses in one race
   MaxBet as integer          //Maximum time user can bet on a horse
   MinBet as integer          //Minimum time user can bet on a horse
   FirstPlace as real         //Coefficient to multiply bet for first place winnings
   SecondPlace as real        //Coefficient to multiply bet for first place winnings
   ThirdPlace as real         //Coefficient to multiply bet for first place winnings
end type

type CGSettings
   Disable as boolean         //Disable Blackjack
   MaxBet as integer          //Maximum bet
   Minbet as integer          //Minimum bet
   Natural as real            //Coefficient to multiply bet for natural blackjack
   Winnings as real           //Coefficient to multiple bet for any winning
   DealerName as string * 15  //Dealer name
   Delay as word              //Delay effecting game speed
end type

type RafSettings
   Disable as boolean         //Disable Time Raffle
   CostPerTicket as word      //Cost in minutes of each ticket
   MaxTickets as word         //Maximum tickets user can buy at once
   MinTickets as word         //Minimum tickets user can buy at once
   CurJackPot as integer      //Current jackpot for winner
   MinJackPot as integer      //Lowest Jackpot will go
   RaffleOdds as integer      //Chances out of 100 that a ticket will win
end type

type NGSettings
   Disable as boolean         //Disable Blackjack
   MaxBet as integer          //Maximum bet
   Minbet as integer          //Minimum bet
   HighNum as word            //Highest number it can be
   Tries as byte              //Number of tries they get to guess it
   FirstTry as real           //First try bonus cooefficient
   SecondTry as real          //Second try bonus cooefficient
   ThirdTry as real           //Third try bonus cooefficient
   After as real              //Forth or after bonus cooefficient
end type

type ConfigFile
   DefaultUser as DefUser         //Stores settings for the default user
   DefaultUserSec(1 to 50) as DefUserSec //Default users for sec levels
   Raffle as RafSettings          //Stores settings for time raffle
   HorseRace as HRSettings        //Stores settings for the horse race game
   CardGame as CGSettings         //Stores settings for the Blackjack
   NumberGuess as NGSettings      //Stores settings for the number guess game
   EnableStats as boolean         //Enable the stats menu
   RegCode as string * 255        //String containing registration code
   TimesRan as integer            //Number of times the time bank has been ran
   EnablePurchase as boolean      //Can users purchase time online?
   CostPerMinute as short         //How many cents does each minute cost?
   MinMinutes as short            //Minimum minutes user can buy
   MinuteDivisibility as short    //Minutes they buy must be divisible by this number
end type

type UserDatabase             //Main user database type
   RecordID as Integer        //Record ID for internal database lookup
   BalanceMin as Word         //Balance they have in the bank in minutes
   BalanceK as Word           //Balance they have in the bank in Kilobytes
   BalanceDL as Word          //Balance they have in the bank in downloads
   MaxBalanceMin as Word      //Maximum minutes they can have in the bank
   MaxBalanceK as Word        //Maximum kilobytes they can have in the bank
   MaxBalanceDL as Word       //Maximum downloads they can have in the bank
   MaxMinLeftOnline as Short  //Maximum minutes they are aloud to have left online
   MinutesLost as Word        //Minutes total they have lost gambling
   MinutesWon as Word         //Minutes total they have won gambling
   LockedOut as boolean       //Are they locked out completely from the Time Bank?
   NoDepositMin as boolean    //They are not aloud to deposit minutes
   NoDepositK as boolean      //They are not aloud to deposit Kilobytes
   NoDepositDL as boolean     //They are not aloud to deposit downloads
   TimeDoorMod as boolean     //Do they have special options access in the Time Bank?
   TimeDoorModSet as ModProf  //Holds the record for special options settings
   OverrideGamble as boolean  //Can they gamble, despite what their sec. level says
   CantGamble as boolean      //They are locked out of gambling, even if they have access    
end type   

type THearts
   Two as string * 6
   Three as string * 6
   Four as string * 6
   Five as string * 6
   Six as string * 6
   Seven as string * 6
   Eight as string * 6
   Nine as string * 6
   Ten as string * 6
   Jack as string * 6
   Queen as string * 6
   King as string * 6
   Ace as string * 6
end type

type TClubs
   Two as string * 6
   Three as string * 6
   Four as string * 6
   Five as string * 6
   Six as string * 6
   Seven as string * 6
   Eight as string * 6
   Nine as string * 6
   Ten as string * 6
   Jack as string * 6
   Queen as string * 6
   King as string * 6
   Ace as string * 6
end type

type TSpades
   Two as string * 6
   Three as string * 6
   Four as string * 6
   Five as string * 6
   Six as string * 6
   Seven as string * 6
   Eight as string * 6
   Nine as string * 6
   Ten as string * 6
   Jack as string * 6
   Queen as string * 6
   King as string * 6
   Ace as string * 6
end type

type TDiamonds
   Two as string * 6
   Three as string * 6
   Four as string * 6
   Five as string * 6
   Six as string * 6
   Seven as string * 6
   Eight as string * 6
   Nine as string * 6
   Ten as string * 6
   Jack as string * 6
   Queen as string * 6
   King as string * 6
   Ace as string * 6
end type

type TDeck
   Hearts as THearts
   Clubs as TClubs
   Spades as TSpades
   Diamonds as TDiamonds
end type

type TItem
  name as string * 25
  score as Integer
end type

dim TopTen() as TItem
dim BullItem as TItem

dim td as UserDataBase        //Declared as UserDataBase type
dim cf as ConfigFile          //Declared as ConfigFile records
dim Deck as TDeck             //Deck structure for Blackjack game
dim Bull as BullOps           //All settings for bulletin creation

dim choice as string * 1        //Menu key pressed in main menu

dim msg as TChannelMessage      //Used for processing page channels

dim NumEntered as integer       //Used for holding number entered in deposit/withdraw

dim looper as integer           //Used for referencing database seek positions
dim RecFound as boolean         //Used to tell if their user account was found
dim OurRecNum as integer        //The user's record number in the database

dim DealerHand(1 to 12) as string * 25
dim UserHand(1 to 12) as string * 25

td.RecordID = user.info.id

Sub ResetDeck

   Deck.Hearts.Two = "DECK"
   Deck.Hearts.Three = "DECK"
   Deck.Hearts.Four = "DECK"
   Deck.Hearts.Five = "DECK"
   Deck.Hearts.Six = "DECK"
   Deck.Hearts.Seven = "DECK"
   Deck.Hearts.Eight = "DECK"
   Deck.Hearts.Nine = "DECK"
   Deck.Hearts.Ten = "DECK"
   Deck.Hearts.Jack = "DECK"
   Deck.Hearts.Queen = "DECK"
   Deck.Hearts.King = "DECK"
   Deck.Hearts.Ace = "DECK"

   Deck.Clubs.Two = "DECK"
   Deck.Clubs.Three = "DECK"
   Deck.Clubs.Four = "DECK"
   Deck.Clubs.Five = "DECK"
   Deck.Clubs.Six = "DECK"
   Deck.Clubs.Seven = "DECK"
   Deck.Clubs.Eight = "DECK"
   Deck.Clubs.Nine = "DECK"
   Deck.Clubs.Ten = "DECK"
   Deck.Clubs.Jack = "DECK"
   Deck.Clubs.Queen = "DECK"
   Deck.Clubs.King = "DECK"
   Deck.Clubs.Ace = "DECK"

   Deck.Spades.Two = "DECK"
   Deck.Spades.Three = "DECK"
   Deck.Spades.Four = "DECK"
   Deck.Spades.Five = "DECK"
   Deck.Spades.Six = "DECK"
   Deck.Spades.Seven = "DECK"
   Deck.Spades.Eight = "DECK"
   Deck.Spades.Nine = "DECK"
   Deck.Spades.Ten = "DECK"
   Deck.Spades.Jack = "DECK"
   Deck.Spades.Queen = "DECK"
   Deck.Spades.King = "DECK"
   Deck.Spades.Ace = "DECK"
   
   Deck.Diamonds.Two = "DECK"
   Deck.Diamonds.Three = "DECK"
   Deck.Diamonds.Four = "DECK"
   Deck.Diamonds.Five = "DECK"
   Deck.Diamonds.Six = "DECK"
   Deck.Diamonds.Seven = "DECK"
   Deck.Diamonds.Eight = "DECK"
   Deck.Diamonds.Nine = "DECK"
   Deck.Diamonds.Ten = "DECK"
   Deck.Diamonds.Jack = "DECK"
   Deck.Diamonds.Queen = "DECK"
   Deck.Diamonds.King = "DECK"
   Deck.Diamonds.Ace = "DECK"

end sub

function PickCard(ToWhatUser as string) as string

dim TempPickCard as byte
dim ValidCard as boolean

Do While NOT ValidCard
   TempPickCard = int(rnd(Timer) * 52) + 1

   Select case TempPickCard
      case 1
         If Deck.Hearts.Two = "DECK" then 
            PickCard = "Two Of Hearts"
            Deck.Hearts.Two = ToWhatUser
            ValidCard = TRUE
         end if
      case 2
         If Deck.Hearts.Three = "DECK" then 
            PickCard = "Three Of Hearts"
            Deck.Hearts.Three = ToWhatUser   
            ValidCard = TRUE
         end if
      case 3
         If Deck.Hearts.Four = "DECK" then 
            PickCard = "Four Of Hearts"
            Deck.Hearts.Four = ToWhatUser   
            ValidCard = TRUE         
         end if
      case 4
         If Deck.Hearts.Five = "DECK" then 
            PickCard = "Five Of Hearts"
            Deck.Hearts.Five = ToWhatUser   
            ValidCard = TRUE
         end if
      case 5
         If Deck.Hearts.Six = "DECK" then 
            PickCard = "Six Of Hearts"
            Deck.Hearts.Six = ToWhatUser   
            ValidCard = TRUE
         end if
      case 6
         If Deck.Hearts.Seven = "DECK" then 
            PickCard = "Seven Of Hearts"
            Deck.Hearts.Seven = ToWhatUser   
            ValidCard = TRUE
         end if
      case 7
         If Deck.Hearts.Eight = "DECK" then 
            PickCard = "Eight Of Hearts"
            Deck.Hearts.Eight = ToWhatUser   
            ValidCard = TRUE
         end if
      case 8
         If Deck.Hearts.Nine = "DECK" then 
            PickCard = "Nine Of Hearts"
            Deck.Hearts.Nine = ToWhatUser   
            ValidCard = TRUE
         end if
      case 9
         If Deck.Hearts.Ten = "DECK" then 
            PickCard = "Ten Of Hearts"
            Deck.Hearts.Ten = ToWhatUser
            ValidCard = TRUE
         end if
      case 10
         If Deck.Hearts.Jack = "DECK" then 
            PickCard = "Jack Of Hearts"
            Deck.Hearts.Jack = ToWhatUser   
            ValidCard = TRUE
         end if   
      case 11
         If Deck.Hearts.Queen = "DECK" then 
            PickCard = "Queen Of Hearts"
            Deck.Hearts.Queen = ToWhatUser   
            ValidCard = TRUE
         end if
      case 12
         If Deck.Hearts.King = "DECK" then 
            PickCard = "King Of Hearts"
            Deck.Hearts.King = ToWhatUser   
            ValidCard = TRUE
         end if
      case 13
         If Deck.Hearts.Ace = "DECK" then 
            PickCard = "Ace Of Hearts"
            Deck.Hearts.Two = ToWhatUser   
            ValidCard = TRUE
         end if
      case 14
         If Deck.Clubs.Two = "DECK" then 
            PickCard = "Two Of Clubs"
            Deck.Clubs.Two = ToWhatUser
            ValidCard = TRUE
         end if
      case 15
         If Deck.Clubs.Three = "DECK" then 
            PickCard = "Three Of Clubs"
            Deck.Clubs.Three = ToWhatUser   
            ValidCard = TRUE
         end if
      case 16
         If Deck.Clubs.Four = "DECK" then 
            PickCard = "Four Of Clubs"
            Deck.Clubs.Four = ToWhatUser   
            ValidCard = TRUE         
         end if
      case 17
         If Deck.Clubs.Five = "DECK" then 
            PickCard = "Five Of Clubs"
            Deck.Clubs.Five = ToWhatUser   
            ValidCard = TRUE
         end if
      case 18
         If Deck.Clubs.Six = "DECK" then 
            PickCard = "Six Of Clubs"
            Deck.Clubs.Six = ToWhatUser   
            ValidCard = TRUE
         end if
      case 19
         If Deck.Clubs.Seven = "DECK" then 
            PickCard = "Seven Of Clubs"
            Deck.Clubs.Seven = ToWhatUser   
            ValidCard = TRUE
         end if
      case 20
         If Deck.Clubs.Eight = "DECK" then 
            PickCard = "Eight Of Clubs"
            Deck.Clubs.Eight = ToWhatUser   
            ValidCard = TRUE
         end if
      case 21
         If Deck.Clubs.Nine = "DECK" then 
            PickCard = "Nine Of Clubs"
            Deck.Clubs.Nine = ToWhatUser   
            ValidCard = TRUE
         end if
      case 22
            If Deck.Clubs.Ten = "DECK" then 
            PickCard = "Ten Of Clubs"
            Deck.Clubs.Ten = ToWhatUser
            ValidCard = TRUE
         end if
      case 23
         If Deck.Clubs.Jack = "DECK" then 
            PickCard = "Jack Of Clubs"
            Deck.Clubs.Jack = ToWhatUser   
            ValidCard = TRUE
         end if   
      case 24
         If Deck.Clubs.Queen = "DECK" then 
            PickCard = "Queen Of Clubs"
            Deck.Clubs.Queen = ToWhatUser   
            ValidCard = TRUE
         end if
      case 25
         If Deck.Clubs.King = "DECK" then 
            PickCard = "King Of Clubs"
            Deck.Clubs.King = ToWhatUser   
            ValidCard = TRUE
         end if
      case 26
         If Deck.Clubs.Ace = "DECK" then 
            PickCard = "Ace Of Clubs"
            Deck.Clubs.Two = ToWhatUser   
            ValidCard = TRUE
         end if
      case 27
         If Deck.Spades.Two = "DECK" then 
            PickCard = "Two Of Spades"
            Deck.Spades.Two = ToWhatUser
            ValidCard = TRUE
         end if
      case 28
         If Deck.Spades.Three = "DECK" then 
            PickCard = "Three Of Spades"
            Deck.Spades.Three = ToWhatUser   
            ValidCard = TRUE
         end if
      case 29
         If Deck.Spades.Four = "DECK" then 
            PickCard = "Four Of Spades"
            Deck.Spades.Four = ToWhatUser   
            ValidCard = TRUE         
         end if
      case 30
         If Deck.Spades.Five = "DECK" then 
            PickCard = "Five Of Spades"
            Deck.Spades.Five = ToWhatUser   
            ValidCard = TRUE
         end if
      case 31
         If Deck.Spades.Six = "DECK" then 
            PickCard = "Six Of Spades"
            Deck.Spades.Six = ToWhatUser   
            ValidCard = TRUE
         end if
      case 32
         If Deck.Spades.Seven = "DECK" then 
            PickCard = "Seven Of Spades"
            Deck.Spades.Seven = ToWhatUser   
            ValidCard = TRUE
         end if
      case 33
         If Deck.Spades.Eight = "DECK" then 
            PickCard = "Eight Of Spades"
            Deck.Spades.Eight = ToWhatUser   
            ValidCard = TRUE
         end if
      case 34
         If Deck.Spades.Nine = "DECK" then 
            PickCard = "Nine Of Spades"
            Deck.Spades.Nine = ToWhatUser   
            ValidCard = TRUE
         end if
      case 35
         If Deck.Spades.Ten = "DECK" then 
            PickCard = "Ten Of Spades"
            Deck.Spades.Ten = ToWhatUser
            ValidCard = TRUE
         end if
      case 36
         If Deck.Spades.Jack = "DECK" then 
            PickCard = "Jack Of Spades"
            Deck.Spades.Jack = ToWhatUser   
            ValidCard = TRUE
         end if   
      case 37
         If Deck.Spades.Queen = "DECK" then 
            PickCard = "Queen Of Spades"
            Deck.Spades.Queen = ToWhatUser   
            ValidCard = TRUE
         end if
      case 38
         If Deck.Spades.King = "DECK" then 
            PickCard = "King Of Spades"
            Deck.Spades.King = ToWhatUser   
            ValidCard = TRUE
         end if
      case 39
         If Deck.Spades.Ace = "DECK" then 
            PickCard = "Ace Of Spades"
            Deck.Spades.Two = ToWhatUser   
            ValidCard = TRUE
         end if
      case 40
         If Deck.Diamonds.Two = "DECK" then 
            PickCard = "Two Of Diamonds"
            Deck.Diamonds.Two = ToWhatUser
            ValidCard = TRUE
         end if
      case 41
         If Deck.Diamonds.Three = "DECK" then 
            PickCard = "Three Of Diamonds"
            Deck.Diamonds.Three = ToWhatUser   
            ValidCard = TRUE
         end if
      case 42
         If Deck.Diamonds.Four = "DECK" then 
            PickCard = "Four Of Diamonds"
            Deck.Diamonds.Four = ToWhatUser   
            ValidCard = TRUE         
         end if
      case 43
         If Deck.Diamonds.Five = "DECK" then 
            PickCard = "Five Of Diamonds"
            Deck.Diamonds.Five = ToWhatUser   
            ValidCard = TRUE
         end if
      case 44
            If Deck.Diamonds.Six = "DECK" then 
            PickCard = "Six Of Diamonds"
            Deck.Diamonds.Six = ToWhatUser   
            ValidCard = TRUE
         end if
      case 45
         If Deck.Diamonds.Seven = "DECK" then 
            PickCard = "Seven Of Diamonds"
            Deck.Diamonds.Seven = ToWhatUser   
            ValidCard = TRUE
         end if
      case 46
         If Deck.Diamonds.Eight = "DECK" then 
            PickCard = "Eight Of Diamonds"
            Deck.Diamonds.Eight = ToWhatUser   
            ValidCard = TRUE
         end if
      case 47
         If Deck.Diamonds.Nine = "DECK" then 
            PickCard = "Nine Of Diamonds"
            Deck.Diamonds.Nine = ToWhatUser   
            ValidCard = TRUE
        end if
      case 48
         If Deck.Diamonds.Ten = "DECK" then 
            PickCard = "Ten Of Diamonds"
            Deck.Diamonds.Ten = ToWhatUser
            ValidCard = TRUE
         end if
      case 49
         If Deck.Diamonds.Jack = "DECK" then 
            PickCard = "Jack Of Diamonds"
            Deck.Diamonds.Jack = ToWhatUser   
            ValidCard = TRUE
         end if   
      case 50
         If Deck.Diamonds.Queen = "DECK" then 
            PickCard = "Queen Of Diamonds"
            Deck.Diamonds.Queen = ToWhatUser   
            ValidCard = TRUE
         end if
      case 51
         If Deck.Diamonds.King = "DECK" then 
            PickCard = "King Of Diamonds"
            Deck.Diamonds.King = ToWhatUser   
            ValidCard = TRUE
         end if
      case 52
         If Deck.Diamonds.Ace = "DECK" then 
            PickCard = "Ace Of Diamonds"
            Deck.Diamonds.Two = ToWhatUser   
            ValidCard = TRUE
         end if
   end select
loop

end function

Function CountUserHand as byte
  dim CountyThing as byte
  dim Value as byte = 0
  dim NumAces as byte

  Value = 0
  NumAces = 0

  For CountyThing = 1 to 12
  
     If UserHand(CountyThing) <> "" then
        If instr(UserHand(CountyThing), "One") > 0 then inc(Value)
        If instr(UserHand(CountyThing), "Two") > 0 then Value = Value + 2
        If instr(UserHand(CountyThing), "Three") > 0 then Value = Value + 3
        If instr(UserHand(CountyThing), "Four") > 0 then Value = Value + 4
        If instr(UserHand(CountyThing), "Five") > 0 then Value = Value + 5
        If instr(UserHand(CountyThing), "Six") > 0 then Value = Value + 6
        If instr(UserHand(CountyThing), "Seven") > 0 then Value = Value + 7
        If instr(UserHand(CountyThing), "Eight") > 0 then Value = Value + 8
        If instr(UserHand(CountyThing), "Nine") > 0 then Value = Value + 9
        If instr(UserHand(CountyThing), "Ten") > 0 then Value = Value + 10
        If instr(UserHand(CountyThing), "Jack") > 0 then Value = Value + 10
        If instr(UserHand(CountyThing), "Queen") > 0 then Value = Value + 10
        If instr(UserHand(CountyThing), "King") > 0 then Value = Value + 10
        If instr(UserHand(CountyThing), "Ace") > 0 then inc(NumAces)
     end if

  Next CountyThing
     
     If NumAces > 0 then
        for CountyThing = 1 to NumAces
           if Value + 11 <= 21 then 
              Value = Value + 11
           else
              inc(Value)
           end if
        next CountyThing
     end if
  
     CountUserHand = Value
end function

Function CountDealerHand as byte
  dim DealerCountyThing as byte
  dim DealerValue as byte = 0
  dim DealerAces as byte

  DealerValue = 0
  DealerAces = 0

  For DealerCountyThing = 1 to 12
  
     If DealerHand(DealerCountyThing) <> "" then
        If instr(DealerHand(DealerCountyThing), "One") > 0 then inc(DealerValue)
        If instr(DealerHand(DealerCountyThing), "Two") > 0 then DealerValue = DealerValue + 2
        If instr(DealerHand(DealerCountyThing), "Three") > 0 then DealerValue = DealerValue + 3
        If instr(DealerHand(DealerCountyThing), "Four") > 0 then DealerValue = DealerValue + 4
        If instr(DealerHand(DealerCountyThing), "Five") > 0 then DealerValue = DealerValue + 5
        If instr(DealerHand(DealerCountyThing), "Six") > 0 then DealerValue = DealerValue + 6
        If instr(DealerHand(DealerCountyThing), "Seven") > 0 then DealerValue = DealerValue + 7
        If instr(DealerHand(DealerCountyThing), "Eight") > 0 then DealerValue = DealerValue + 8
        If instr(DealerHand(DealerCountyThing), "Nine") > 0 then DealerValue = DealerValue + 9
        If instr(DealerHand(DealerCountyThing), "Ten") > 0 then DealerValue = DealerValue + 10
        If instr(DealerHand(DealerCountyThing), "Jack") > 0 then DealerValue = DealerValue + 10
        If instr(DealerHand(DealerCountyThing), "Queen") > 0 then DealerValue = DealerValue + 10
        If instr(DealerHand(DealerCountyThing), "King") > 0 then DealerValue = DealerValue + 10
        If instr(DealerHand(DealerCountyThing), "Ace") > 0 then inc(DealerAces)
     end if

  next DealerCountyThing
  
     If DealerAces > 0 then
        for DealerCountyThing = 1 to DealerAces
           if DealerValue + 11 <= 21 then 
              DealerValue = DealerValue + 11
           else
              inc(DealerValue)
           end if
        next DealerCountyThing
     end if


  CountDealerHand = DealerValue

end function

sub ResetHands
  dim ResetLoop as byte

  For ResetLoop = 1 to 12
  
        UserHand(ResetLoop) = ""
        DealerHand(ResetLoop) = ""
     
  next ResetLoop

end sub

function Regged as boolean
  Regged = true
end function

sub ChangeUserTime(NewTime as integer)
   dim DifFactor as integer
   DifFactor = ((NewTime - GetMinutesRemaining) * 60)
   
   IncDateTime(TimeOff, 0, DifFactor)
   UpdateUser(User)
end sub

function GetSecurityProfile as string
  GetSecurityProfile = ""
  dim n as integer
  n = GetSecurityProfileCount
  dim profiles(n-1) as string*24
  GetSecurityProfileNames(n, profiles(0))
  sort profiles
  dim i as integer
  do while i*2 < n
    SubText(1) = str(i+1)
    SubText(2) = profiles(i)
    print "@N@[@H@@SUB1>4@@N@] @H@@SUB2:30@";
    if (n+1) div 2 + i < n then
      SubText(1) = str((n+1) div 2 + i + 1)
      SubText(2) = profiles((n+1) div 2 + i)
      print "@N@[@H@@SUB1>4@@N@] @H@@SUB2:30@";
    end if
    print
    inc(i)
  loop      
  print
  print [SysopUserSecurity "@N@Select security profile:"];
  dim s as string
  i = val(InputString(4))
  if i > 0 and i <= n then
    GetSecurityProfile = profiles(i-1)
  end if
end function

sub NewAccount
    If not DisplayFile("wc:\disp\PSTNew.BBS") then
       cls
       Print "@0B@Welcome New User!"
       print Bar(35,0,9)
       print
       print "@N@Welcome to PS-TimeBank.  An account has been opened in your name."
       print "We have given you @0F@";str(cf.DefaultUser.StartBalM);"@N@ free minutes and @0F@";str(cf.DefaultUser.StartBalK);"@N@ kilobytes as a gift from the bank."
       print "If you have any qustions about the operation of this time banking"
       print "program, please contact the sysop from the main menu.  Thank you."
       print
       do while ReadChannel(0, msg)
          ProcessChannelMessage(msg)
       loop
       Pause      
       WriteActivityLogEntry("      * New PS-TimeBank account created")
    end if
end sub

sub ReadDB

   dim FirstDeleted as integer
   Dim NewCounter as byte
   Dim ActFound as boolean

   FirstDeleted = 0
   
   open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
   for looper = 1 to LOF(1)
      get #1, looper, td
      if td.RecordID = user.info.id then 
         RecFound = TRUE
         OurRecNum = looper
         exit for
      end if
      if td.RecordID < 0 and FirstDeleted = 0 then FirstDeleted = Looper
   next looper
   
   if not RecFound then
      NewAccount
      
      for NewCounter = 1 to 49
         If cf.DefaultUserSec(NewCounter).WCSecLevel = user.security(1) then
            ActFound = TRUE
            Exit for
         end if
      next NewCounter
         
      If NOT ActFound then
         td.RecordID = user.info.id
         td.BalanceMin = cf.DefaultUser.StartBalM
         td.BalanceK = cf.DefaultUser.StartBalK
         td.BalanceDL = cf.DefaultUser.StartBalDL
         td.MaxBalanceMin = cf.DefaultUser.MaxBalM
         td.MaxBalanceK = cf.DefaultUser.MaxBalK
         td.MaxBalanceDL = cf.DefaultUser.MaxBalDL
         td.MaxMinLeftOnline = cf.DefaultUser.MaxTimeLeft
         td.MinutesLost = 0
         td.MinutesWon = 0
         td.LockedOut = cf.DefaultUser.LockedOut
         td.NoDepositMin = cf.DefaultUser.NoDepMin
         td.NoDepositK = cf.DefaultUser.NoDepK
         td.NoDepositDL = cf.DefaultUser.NoDepDL
         td.OverrideGamble = cf.DefaultUser.GambleOvr
         td.CantGamble = cf.DefaultUser.GambleLockout
         td.TimeDoorMod = cf.DefaultUser.SysopAccess
         td.TimeDoorModSet.UserEditor = cf.DefaultUser.SysopAccessSet.UserEditor
         td.TimeDoorModSet.AllowTimeModify = cf.DefaultUser.SysopAccessSet.AllowTimeModify
         td.TimeDoorModSet.DeleteUsers = cf.DefaultUser.SysopAccessSet.DeleteUsers
         td.TimeDoorModSet.WCUserDB = cf.DefaultUser.SysopAccessSet.WCUserDB
         td.TimeDoorModSet.Configure = cf.DefaultUser.SysopAccessSet.Configure
      else
         td.RecordID = user.info.id
         td.BalanceMin = cf.DefaultUserSec(NewCounter).StartBalM
         td.BalanceK = cf.DefaultUserSec(NewCounter).StartBalK
         td.BalanceDL = cf.DefaultUserSec(NewCounter).StartBalDL
         td.MaxBalanceMin = cf.DefaultUserSec(NewCounter).MaxBalM
         td.MaxBalanceK = cf.DefaultUserSec(NewCounter).MaxBalK
         td.MaxBalanceDL = cf.DefaultUserSec(NewCounter).MaxBalDL
         td.MaxMinLeftOnline = cf.DefaultUserSec(NewCounter).MaxTimeLeft
         td.MinutesLost = 0
         td.MinutesWon = 0
         td.LockedOut = cf.DefaultUserSec(NewCounter).LockedOut
         td.NoDepositMin = cf.DefaultUserSec(NewCounter).NoDepMin
         td.NoDepositK = cf.DefaultUserSec(NewCounter).NoDepK
         td.NoDepositDL = cf.DefaultUserSec(NewCounter).NoDepDL
         td.OverrideGamble = cf.DefaultUserSec(NewCounter).GambleOvr
         td.CantGamble = cf.DefaultUserSec(NewCounter).GambleLockout
         td.TimeDoorMod = cf.DefaultUserSec(NewCounter).SysopAccess
         td.TimeDoorModSet.UserEditor = cf.DefaultUserSec(NewCounter).SysopAccessSet.UserEditor
         td.TimeDoorModSet.AllowTimeModify = cf.DefaultUserSec(NewCounter).SysopAccessSet.AllowTimeModify
         td.TimeDoorModSet.DeleteUsers = cf.DefaultUserSec(NewCounter).SysopAccessSet.DeleteUsers
         td.TimeDoorModSet.WCUserDB = cf.DefaultUserSec(NewCounter).SysopAccessSet.WCUserDB
         td.TimeDoorModSet.Configure = cf.DefaultUserSec(NewCounter).SysopAccessSet.Configure
      end if   

      if FirstDeleted > 0 then 
         OurRecNum = FirstDeleted
      else
         OurRecNum = LOF(1) + 1
      end if
      
      put #1, OurRecNum, td
   end if
close #1
end sub

sub WriteDB

   open "wc:\data\pstime.dat" for random as #1  len=len(UserDatabase)
      put #1, OurRecNum, td
   close #1

end sub

sub UpdateDB(RecToUpdate as integer)
   open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
      put #1, RecToUpdate, td
   close #1
end sub

sub WriteUserDB(RecToUpdate as integer, UserWeWant as UserDatabase)
   open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
      put #1, RecToUpdate, UserWeWant
   close #1
end sub

sub ReadConfig
   dim ConfigFound as boolean
   
   open "wc:\data\pstime.cfg" for random as #1 len = len(ConfigFile)
   get #1, 1, cf
   if lof(1) > 0 then 
      ConfigFound = TRUE
   end if
   
   if not ConfigFound and not Exists("wc:\data\pstime.cfg") then
      WriteActivityLogEntry("      * PS-TimeBank Configuration File created")
      cls
      Print "@0B@PS-TimeBank First Time Setup"
      print
      print "@0F@Welcome to PS-TimeBank.  A configuration file was not found, therefore"
      print "we assume this is the first time you have ran this program.  A config file"
      print "(\wc5\data\pstime.cfg) is now being generated using the default values.  You"
      print "may change these values by using the Configuration option off the Time Bank"
      print "Sysop Menu.  If you are happy with this program, please consider registering"
      print "it.  Otherwise, please remove this program after 30 days.  Thank you."
      print Bar(35,0,9)
        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop
      Pause
    
      cf.EnableStats = TRUE
      cf.RegCode = "UNREGISTERED"
      cf.TimesRan = 0
      cf.EnablePurchase = FALSE
      cf.CostPerMinute = 5
      cf.MinMinutes = 5
      cf.MinuteDivisibility = 1
      cf.DefaultUser.StartBalM = 15
      cf.DefaultUser.StartBalK = 0
      cf.DefaultUser.StartBalDL = 0
      cf.DefaultUser.MaxBalM = 500
      cf.DefaultUser.MaxBalK = 15000
      cf.DefaultUser.MaxBalDL = 100
      cf.DefaultUser.MaxTimeLeft = 400
      cf.DefaultUser.LockedOut = FALSE
      cf.DefaultUser.NoDepMin = FALSE
      cf.DefaultUser.NoDepK = FALSE
      cf.DefaultUser.NoDepDL = FALSE
      cf.DefaultUser.SysopAccess = FALSE
      cf.DefaultUser.SysopAccessSet.UserEditor = FALSE
      cf.DefaultUser.SysopAccessSet.AllowTimeModify = FALSE
      cf.DefaultUser.SysopAccessSet.DeleteUsers = FALSE
      cf.DefaultUser.SysopAccessSet.WCUserDB = FALSE
      cf.DefaultUser.GambleOvr = FALSE
      cf.DefaultUser.GambleLockout = FALSE
      cf.Raffle.Disable = FALSE
      cf.Raffle.CostPerTicket = 1
      cf.Raffle.MaxTickets = 100
      cf.Raffle.MinTickets = 1
      cf.Raffle.CurJackPot = 20
      cf.Raffle.MinJackPot = 20
      cf.Raffle.RaffleOdds = 3
      cf.HorseRace.Disable = FALSE
      cf.HorseRace.HorseChar = 1
      cf.HorseRace.HColor = "RANDOM"
      cf.HorseRace.MinSpace = 0
      cf.HorseRace.MaxSpace = 5
      cf.HorseRace.Delay = 250
      cf.HorseRace.NumHorses = 10
      cf.HorseRace.MaxBet = 100
      cf.HorseRace.MinBet = 5
      cf.HorseRace.FirstPlace = 5
      cf.HorseRace.SecondPlace = 3
      cf.HorseRace.ThirdPlace = 2
      cf.CardGame.Disable = FALSE
      cf.CardGame.MaxBet = 100
      cf.CardGame.MinBet = 5
      cf.CardGame.Natural = 2
      cf.CardGame.Winnings = 1.5
      cf.CardGame.DealerName = "Dealer"
      cf.CardGame.Delay = 1000
      cf.NumberGuess.Disable = FALSE
      cf.NumberGuess.MaxBet = 100
      cf.NumberGuess.Minbet = 5
      cf.NumberGuess.HighNum = 100
      cf.NumberGuess.Tries = 5
      cf.NumberGuess.FirstTry = 5
      cf.NumberGuess.SecondTry = 4
      cf.NumberGuess.ThirdTry = 3
      cf.NumberGuess.After = 2
      
      put #1, 1, cf
   end if
close #1

if NOT Regged then
      cf.Raffle.CostPerTicket = 1
      cf.Raffle.MaxTickets = 100
      cf.Raffle.MinTickets = 1
      cf.Raffle.CurJackPot = 20
      cf.Raffle.MinJackPot = 20
      cf.Raffle.RaffleOdds = 3
      cf.HorseRace.HorseChar = 1
      cf.HorseRace.HColor = "RANDOM"
      cf.HorseRace.MinSpace = 0
      cf.HorseRace.MaxSpace = 5
      cf.HorseRace.Delay = 250
      cf.HorseRace.NumHorses = 10
      cf.HorseRace.MaxBet = 100
      cf.HorseRace.MinBet = 5
      cf.HorseRace.FirstPlace = 5
      cf.HorseRace.SecondPlace = 3
      cf.HorseRace.ThirdPlace = 2
      cf.CardGame.MaxBet = 100
      cf.CardGame.MinBet = 5
      cf.CardGame.Natural = 2
      cf.CardGame.Winnings = 1.5
      cf.CardGame.DealerName = "Dealer"
      cf.CardGame.Delay = 1000
      cf.NumberGuess.MaxBet = 100
      cf.NumberGuess.Minbet = 5
      cf.NumberGuess.HighNum = 100
      cf.NumberGuess.Tries = 5
      cf.NumberGuess.FirstTry = 5
      cf.NumberGuess.SecondTry = 4
      cf.NumberGuess.ThirdTry = 3
      cf.NumberGuess.After = 2
end if

end sub

sub ReadBullConfig
   
   dim BullConfigFound as boolean
   
   open "wc:\data\psbull.cfg" for random as #1 len = len(BullOps)
   get #1, 1, bull
   if lof(1) > 0 then 
      BullConfigFound = TRUE
   end if
   
   if not BullConfigFound then
      WriteActivityLogEntry("      * PS-TimeBank Bulletin Configuration File created")
      cls
      Print "@0F@PS-TimeBank Bulletin Configuration File"
      print Bar(41,0,9)
      print "@N@A bulletin configuration file was created, and setup with the default"
      print "options.  If you do not want these files created, please edit these"
      print "settings now, before you exit the time bank.  Once you exit, the bulletins"
      print "will be created.  If you don't want any bulletins created, please delete"
      print "your @0F@\wc5\data\psbull.cfg@N@ file.  Thank you."
      print
      Pause

      bull.MostTimeWonAnsi.Path = "c:\wc5\bull\TimeWon.bbs"
      bull.MostTimeWonAnsi.TopNumber = 10
      bull.MostTimeWonAnsi.ExcludeSysop = FALSE
      bull.MostTimeWonAnsi.Header = "Most Time Won"
      bull.MostTimeWonAnsi.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostTimeLostAnsi.Path = "c:\wc5\bull\TimeLost.bbs"
      bull.MostTimeLostAnsi.TopNumber = 10
      bull.MostTimeLostAnsi.ExcludeSysop = FALSE
      bull.MostTimeLostAnsi.Header = "Most Time Lost"
      bull.MostTimeLostAnsi.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostTimeInBankAnsi.Path = "c:\wc5\bull\BankTime.bbs"
      bull.MostTimeInBankAnsi.TopNumber = 10
      bull.MostTimeInBankAnsi.ExcludeSysop = FALSE
      bull.MostTimeInBankAnsi.Header = "Most Time In Bank"
      bull.MostTimeInBankAnsi.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostKilobytesInBankAnsi.Path = "c:\wc5\bull\MostK.bbs"
      bull.MostKilobytesInBankAnsi.TopNumber = 10
      bull.MostKilobytesInBankAnsi.ExcludeSysop = FALSE
      bull.MostKilobytesInBankAnsi.Header = "Most Kilobytes In Bank"
      bull.MostKilobytesInBankAnsi.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostDownloadsInBankAnsi.Path = "c:\wc5\bull\MostDL.bbs"
      bull.MostDownloadsInBankAnsi.TopNumber = 10
      bull.MostDownloadsInBankAnsi.ExcludeSysop = FALSE
      bull.MostDownloadsInBankAnsi.Header = "Most Downloads In Bank"
      bull.MostDownloadsInBankAnsi.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostTimeWonHTML.Path = "c:\wc5\http\public\TimeWon.htm"
      bull.MostTimeWonHTML.TopNumber = 10
      bull.MostTimeWonHTML.ExcludeSysop = FALSE
      bull.MostTimeWonHTML.Header = "Most Time Won"
      bull.MostTimeWonHTML.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostTimeLostHTML.Path = "c:\wc5\http\public\TimeLost.htm"
      bull.MostTimeLostHTML.TopNumber = 10
      bull.MostTimeLostHTML.ExcludeSysop = FALSE
      bull.MostTimeLostHTML.Header = "Most Time Lost"
      bull.MostTimeLostHTML.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostTimeInBankHTML.Path = "c:\wc5\http\public\BankTime.htm"
      bull.MostTimeInBankHTML.TopNumber = 10
      bull.MostTimeInBankHTML.ExcludeSysop = FALSE
      bull.MostTimeInBankHTML.Header = "Most Time In Bank"
      bull.MostTimeInBankHTML.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostKilobytesInBankHTML.Path = "c:\wc5\http\public\MostK.htm"
      bull.MostKilobytesInBankHTML.TopNumber = 10
      bull.MostKilobytesInBankHTML.ExcludeSysop = FALSE
      bull.MostKilobytesInBankHTML.Header = "Most Kilobytes In Bank"
      bull.MostKilobytesInBankHTML.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.MostDownloadsInBankHTML.Path = "c:\wc5\http\public\MostDL.htm"
      bull.MostDownloadsInBankHTML.TopNumber = 10
      bull.MostDownloadsInBankHTML.ExcludeSysop = FALSE
      bull.MostDownloadsInBankHTML.Header = "Most Downloads In Bank"
      bull.MostDownloadsInBankHTML.Footer = "Thank your sysop for running PS-TimeBank!"
      bull.BullOps = TRUE
      
      put #1, 1, bull
   end if
   
   close #1

end sub

sub WriteBullConfig

   open "wc:\data\psbull.cfg" for random as #1 len = len(BullOps)
     put #1, 1, bull
   close #1
   
end sub

sub WriteConfig

   open "wc:\data\pstime.cfg" for random as #1 len = len(ConfigFile)
      put #1, 1, cf
   close #1

end sub

function RegStatus(OurCode as string) as string
   RegStatus = "REGISTERED"
end function

function SysopAccessSetDisp(UserAccess as ModProf) as string
   dim TempSysopAccessDisp as string * 16
   TempSysopAccessDisp = "@08@.....@07@" 
   If UserAccess.UserEditor then Mid(TempSysopAccessDisp, 5, 1) = "U"
   If UserAccess.AllowTimeModify then Mid(TempSysopAccessDisp, 6, 1) = "A"
   If UserAccess.DeleteUsers then Mid(TempSysopAccessDisp, 7, 1) = "D"
   If UserAccess.WCUserDB then Mid(TempSysopAccessDisp, 8, 1) = "W"
   If UserAccess.Configure then Mid(TempSysopAccessDisp, 9, 1) = "C"

   SysopAccessSetDisp = TempSysopAccessDisp
end function 

function GetHorseColor as byte
   select case UCASE(cf.HorseRace.HColor)
      case "BLUE" 
         GetHorseColor = 1
      case "GREEN"
         GetHorseColor = 2
      case "CYAN"
         GetHorseColor = 3
      case "RED"
         GetHorseColor = 4
      case "MAGENTA"
         GetHorseColor = 5
      case "BROWN"
         GetHorseColor = 6
      case "WHITE"
         GetHorseColor = 7
      case "BBLACK"
         GetHorseColor = 8
      case "BBLUE"
         GetHorseColor = 9
      case "BGREEN"
         GetHorseColor = 10
      case "BCYAN"
         GetHorseColor = 11
      case "BRED"
         GetHorseColor = 12
      case "BMAGENTA" 
         GetHorseColor = 13
      case "BBROWN" 
         GetHorseColor = 14
      case "BWHITE" 
         GetHorseColor = 15
      case "RANDOM" 
         GetHorseColor = 1 + int(rnd(Timer) * 15)
   end select
end function

function DispHColor as string
   select case UCASE(cf.HorseRace.HColor)
      case "BLUE" 
         DispHColor = "@01@Blue"
      case "GREEN"
         DispHColor = "@02@Green"   
      case "CYAN"
         DispHColor = "@03@Cyan"
      case "RED"
         DispHColor = "@04@Red"
      case "MAGENTA"
         DispHColor = "@05@Magenta"
      case "BROWN"
         DispHColor = "@06@Brown"
      case "WHITE"
         DispHColor = "@07@White"   
      case "BBLACK"
         DispHColor = "@08@Grey"
      case "BBLUE"
         DispHColor = "@09@Bright Blue"
      case "BGREEN"
         DispHColor = "@0A@Bright Green"
      case "BCYAN"
         DispHColor = "@0B@Bright Cyan"
      case "BRED"
         DispHColor = "@0C@Bright Red"   
      case "BMAGENTA" 
        DispHColor = "@0D@Bright Magenta"
      case "BBROWN" 
        DispHColor = "@0E@Yellow"
      case "BWHITE" 
        DispHColor = "@0F@Bright White"
      case "RANDOM" 
        DispHColor = "@0A@R@0B@a@0C@n@0D@d@0E@o@0F@m"
   end select
end function

sub Raffle

   WriteActivityLogEntry("      * Entered Time Raffle game")
   dim MaxCanBuy as word
   dim NumBought as string
   dim TicketProc as word

   if int(GetMinutesRemaining / cf.Raffle.CostPerTicket) > 1 then
      MaxCanBuy = int(GetMinutesRemaining / cf.Raffle.CostPerTicket)
   else
      MaxCanBuy = 0
   end if

   If MaxCanBuy > cf.Raffle.MaxTickets then
      MaxCanBuy = cf.Raffle.MaxTickets
   end if

   Cls
   Print "@0F@Time Raffle"
   print Bar(30,0,9)
   print
   print "@N@Current Jackpot Is At       @08@: @0F@";str(cf.Raffle.CurJackpot);" Minute";
   if cf.Raffle.CurJackpot > 1 then 
      print "s"
   else
      print 
   end if
   print "@N@Cost Per Ticket Is          @08@: @0F@";str(cf.Raffle.CostPerTicket);" Minute";
   if cf.Raffle.CostPerTicket > 1 then 
      print "s"
   else
      print 
   end if
   
   print "@N@Your Time Left              @08@: @0F@@USER.TIMELEFTTODAY@"
   print
   print "@N@Each Ticket has a @0F@";cf.Raffle.RaffleOdds;"%@N@ chance of winning."
   print
   print "@N@You can buy @0F@";STR(MaxCanBuy);" @N@tickets, how many do you wish to buy? ";

      NumBought = InputString(6)
      If Val(NumBought) > 0 and Val(NumBought) <= MaxCanBuy and Val(NumBought) >= cf.Raffle.MinTickets then
         Cls
         WriteActivityLogEntry("      * [Time Raffle] Bought " + NumBought + " tickets")
         for TicketProc = 1 to Val(NumBought)
            Print "@N@Ticket @0F@";TicketProc;"@N@ is a...";
            If int(rnd(Timer) * 100) + 1 <= cf.Raffle.RaffleOdds then
               Print "@0F@WINNER!!!"
               print
               print "Congratulations... You have just won @0B@";cf.Raffle.CurJackpot;"@0F@ free minutes!"
               WriteActivityLogEntry("      * [Time Raffle] Won " + str(cf.Raffle.CurJackpot) + "minutes")
               ChangeUserTime(GetMinutesRemaining + cf.Raffle.CurJackPot + 1)
               td.MinutesWon = td.MinutesWon + cf.Raffle.CurJackPot
               UpdateDB(OurRecNum)
               cf.Raffle.CurJackPot = cf.Raffle.MinJackPot
               Exit for
            else
               print "@08@Looser"
               ChangeUserTime(GetMinutesRemaining - cf.Raffle.CostPerTicket)
               td.MinutesLost = td.MinutesLost + cf.Raffle.CurJackPot
               UpdateDB(OurRecNum)
               inc(cf.Raffle.CurJackpot)
            end if
         next TicketProc
         WriteConfig
         UpdateUser(User)
         Pause
      elseif Val(NumBought) > MaxCanBuy then
         print "@N@You cannot afford this many tickets!"
         Pause
      elseif Val(NumBought) > 1 and Val(NumBought) < cf.Raffle.MinTickets then
         print "@N@You must buy at least @0F@";cf.Raffle.MinTickets;"@N@ tickets to play."
         Pause
      end if

      do while ReadChannel(0, msg)
         ProcessChannelMessage(msg)
      loop

end sub

sub NumberGuess

   dim TimeBet as string * 6
   dim MyNum as word
   dim LastClue as string
   dim CurGuess as word
   dim GuessNum as word
   dim DidTheyWin as boolean
   dim TimeTheyWon as word
      
   MyNum = int(rnd(Timer) * cf.NumberGuess.HighNum) + 1
   LastClue = "No Clue Yet"
   
   WriteActivityLogEntry("      * Entered Number Guess game")
   
   Cls
   Print "@0F@Number Guess Game"
   print Bar(30,0,9)
   print
   print "@N@Welcome to the PS-TimeBank Number Guess game.  I am thinking of a"
   print "number between @0F@1 and ";Str(cf.NumberGuess.HighNum);"@N@.  I will give you @0F@";Str(cf.NumberGuess.Tries);"@N@ tries to guess the"
   print "number correctly.  If you fail, you will lose all the time you bet."
   print
   print "@0F@Good Luck!"
   print
   print "Winnings :"
   print "@09@";STRING(10, CHR(196))
   print "@N@First Try  @08@: @0F@";Str(cf.NumberGuess.FirstTry);" Times Bet"
   print "@N@Second Try @08@: @0F@";Str(cf.NumberGuess.SecondTry);" Times Bet"
   print "@N@Third Try  @08@: @0F@";Str(cf.NumberGuess.ThirdTry);" Times Bet"
   print "@N@Over Three @08@: @0F@";Str(cf.NumberGuess.After);" Times Bet"
   print
   
   print "@N@Your Time Left@08@: @0F@@USER.TIMELEFTTODAY@"
   print
   
   if GetMinutesRemaining > cf.NumberGuess.MaxBet then
      print "@N@How much do you dare bet? [@0F@";str(cf.NumberGuess.MinBet);"-";str(cf.NumberGuess.MaxBet);"@N@] @08@: @0F@";
   else
      print "@N@How much do you dare bet? [@0F@";str(cf.NumberGuess.MinBet);"-";str(GetMinutesRemaining);"@N@] @08@: @0F@";
   end if

      TimeBet = InputString(6)
      If Val(TimeBet) >= cf.NumberGuess.MinBet and Val(TimeBet) <= GetMinutesRemaining and Val(TimeBet) <= cf.NumberGuess.MaxBet then

         WriteActivityLogEntry("      * [Number Game] Bet " + TimeBet + " minutes")

         for GuessNum = 1 to cf.NumberGuess.Tries
            Cls
            Print "@0F@Guess My Number... Try       @08@: @0B@";Str(GuessNum);" @0F@of @B@";str(cf.NumberGuess.Tries)
            Print "@0F@                   You Bet   @08@: @0B@";Trim(TimeBet);" @0F@Minutes"
            Print "@0F@                   Last Clue @08@: @0B@";LastClue
            print Bar(30,0,9)
            print
            Print "@N@Enter your guess [@0F@1-";Str(cf.NumberGuess.HighNum);"@N@] @08@: @0F@";
            CurGuess = InputNumber
         
            If CurGuess = MyNum then
               DidTheyWin = TRUE
               exit for
            end if
            
            if CurGuess < MyNum then
               LastClue = "Higher Than " + Str(CurGuess)
            end if
            
            if CurGuess > MyNum then
               LastClue = "Lower Than " + Str(CurGuess)
            end if

         next GuessNum
         If NOT DidTheyWin then
            Cls
            Print "@0F@You Lost!"
            print Bar(30,0,9)
            print
            print "@N@I'm sorry, the number was @0F@";Str(MyNum);"@N@.  You just lost @0F@";TimeBet;" @N@Minutes."
            print "@N@Better luck next time!"
            ChangeUserTime(GetMinutesRemaining - VAL(TimeBet))
            td.MinutesLost = td.MinutesLost + Val(TimeBet)
            UpdateDB(OurRecNum)
            Print
            WriteActivityLogEntry("      * [Number Guess] Lost " + TimeBet + " minutes")
            Pause
         else
            if GuessNum = 1 then TimeTheyWon = int(VAL(TimeBet) * cf.NumberGuess.FirstTry)
            if GuessNum = 2 then TimeTheyWon = int(VAL(TimeBet) * cf.NumberGuess.SecondTry)
            if GuessNum = 3 then TimeTheyWon = int(VAL(TimeBet) * cf.NumberGuess.ThirdTry)
            if GuessNum > 3 then TimeTheyWon = int(VAL(TimeBet) * cf.NumberGuess.After)
            Cls
            Print "@0F@Winner!"
            print Bar(30,0,9)
            print

            Print "@0F@CONGRATULATIONS!!!  You have guessed my number!"
            Print "@N@You have just won @0F@";Str(TimeTheyWon);" @N@Minutes!"
            ChangeUserTime(GetMinutesRemaining + TimeTheyWon)
            td.MinutesWon = td.MinutesWon + Val(TimeBet)
            UpdateDB(OurRecNum)
            Print
            WriteActivityLogEntry("      * [Number Guess] Won " + str(TimeTheyWon) + " minutes")
            Pause
         end if
         UpdateUser(User)
      elseif Val(TimeBet) > cf.NumberGuess.MaxBet or Val(TimeBet) > GetMinutesRemaining then
         print "@N@You cannot bet this much!"
         Pause
      elseif Val(TimeBet) > 1 and Val(TimeBet) < cf.NumberGuess.MinBet then
         print "@N@You must bet at least @0F@";cf.NumberGuess.MinBet;"@N@ minutes to play."
         Pause
      end if

      do while ReadChannel(0, msg)
         ProcessChannelMessage(msg)
      loop

end sub

sub HorseRace

   dim WhichHorse as string * 4
   dim HorseBet as string * 6
   dim DrawBar as byte
   dim HorseRun as byte

   dim HorsePos(1 to 15) as byte
   dim HorseColor(1 to 15) as byte
   dim WinningHorse(1 to 3) as byte
   
   WriteActivityLogEntry("      * Entered Horse Race game")

   Cls
   Print "@0F@Horse Race Game"
   print Bar(30,0,9)
   print
   print "@N@Welcome to the PS-TimeBank Race Track.  There are currently @0F@";str(cf.HorseRace.NumHorses);"@N@ horses"
   print "on the track.  You can bet anywhere between @0F@";str(cf.HorseRace.MinBet);"@N@ and @0F@";str(cf.HorseRace.MaxBet);"@N@ minutes."
   print 
   print "@0F@Good Luck!"
   print
   print "Winnings :"
   print "@09@";STRING(10, CHR(196))
   print "@N@First Place  @08@: @0F@";str(cf.HorseRace.FirstPlace);" Times Bet"
   print "@N@Second Place @08@: @0F@";str(cf.HorseRace.SecondPlace);" Times Bet"
   print "@N@Third Place  @08@: @0F@";str(cf.HorseRace.ThirdPlace);" Times Bet"
   print
   print "@N@Your Time Left@08@: @0F@@USER.TIMELEFTTODAY@"
   print
   
   print "@N@Which horse do you wish to bet on? [@0F@1-";str(cf.HorseRace.NumHorses);"@N@] @08@: @0F@";

      WhichHorse = InputString(4)
      If Val(WhichHorse) >= 1 and Val(WhichHorse) <= cf.HorseRace.NumHorses then

         if GetMinutesRemaining > cf.HorseRace.MaxBet then
            print "@N@How many minutes do you wish to bet on horse @0F@";WhichHorse;"@N@? [@0F@";str(cf.HorseRace.MinBet);"-";str(cf.HorseRace.MaxBet);"@N@] @08@: @0F@";
         else
            print "@N@How many minutes do you wish to bet on horse @0F@";WhichHorse;"@N@? [@0F@";str(cf.HorseRace.MinBet);"-";str(GetMinutesRemaining);"@N@] @08@: @0F@";
         end if
         
         HorseBet = InputString(6)
         If Val(HorseBet) >= cf.HorseRace.MinBet and Val(HorseBet) <= GetMinutesRemaining and Val(HorseBet) <= cf.HorseRace.MaxBet then
            WriteActivityLogEntry("      * [Horse Race] Bet " + HorseBet + " minutes on horse " + WhichHorse + ".")
            Cls
            Print "@0F@On Your Mark..."
            print Bar(30,0,9)
            print 
            For DrawBar = 1 to cf.HorseRace.NumHorses
               Print string(3 - len(str(DrawBar)), 32);
               if DrawBar = Val(WhichHorse) then
                  print "@0B@";Str(DrawBar);"@0E@ ";chr(195);"@06@";string(70,196);"@0E@";chr(180)
               else
                  print "@0F@";Str(DrawBar);"@06@ ";chr(195);string(70,196);chr(180)
               end if
               HorsePos(DrawBar) = 1
            next DrawBar

            Delay 2
            
            For DrawBar = 1 to cf.HorseRace.NumHorses
               Locate 3 + DrawBar, 6
               HorseColor(DrawBar) = GetHorseColor
               Color HorseColor(DrawBar)
               Print CHR(cf.HorseRace.HorseChar);
               delay .1
            next DrawBar
            
            Locate 1,1
            Print "@0F@Get Set...     ";
            Delay 3
            Locate 1,1
            Print "@0B@GO!!!          ";
            WinningHorse(1) = 0
            WinningHorse(2) = 0            
            WinningHorse(3) = 0

            Do
               For DrawBar = 1 to cf.HorseRace.NumHorses
                  Locate 3 + DrawBar, 5 + HorsePos(DrawBar)
                  Print "@06@";Chr(196)
               
                  If DrawBar <> WinningHorse(1) and DrawBar <> WinningHorse(2) and DrawBar <> WinningHorse(3) then
                     HorsePos(DrawBar) = HorsePos(DrawBar) + int(rnd(Timer) * cf.HorseRace.MaxSpace) + cf.HorseRace.MinSpace
                     If HorsePos(DrawBar) > 70 then
                        HorsePos(DrawBar) = 70
                        Locate 3 + DrawBar, 76
                        Color HorseColor(DrawBar)
                        Print Chr(cf.HorseRace.HorseChar)
                        Color HorseColor(DrawBar)
                        if WinningHorse(1) = 0 then 
                           WinningHorse(1) = DrawBar
                        elseif WinningHorse(2) = 0 then
                           WinningHorse(2) = DrawBar
                        elseif WinningHorse(3) = 0 then
                           WinningHorse(3) = DrawBar
                           exit do
                        end if
                     else
                        Locate 3 + DrawBar, 5 + HorsePos(DrawBar)
                        Color HorseColor(DrawBar)
                        Print Chr(cf.HorseRace.HorseChar)
                     end if
                  end if
               next DrawBar
               Delay (cf.HorseRace.Delay / 1000)
            Loop
            Locate 5 + cf.HorseRace.NumHorses,1
            Print "@0F@After the judges figure out the winner, you find out..."
            Pause
            Select Case Val(WhichHorse)
               case WinningHorse(1)
                  Cls
                  Print "@0F@Congratulations!!!"
                  print Bar(30,0,9)
                  print
                  Print "@N@Your horse came in first place!"
                  Print "You just won @0F@";int(cf.HorseRace.FirstPlace) * Val(HorseBet);"@N@ minutes."
                  ChangeUserTime(GetMinutesRemaining + (int(cf.HorseRace.FirstPlace) * Val(HorseBet)))
                  td.MinutesWon = td.MinutesWon + (int(cf.HorseRace.FirstPlace) * Val(HorseBet))
                  UpdateDB(OurRecNum)
                  WriteActivityLogEntry("      * [Horse Race] Their horse came in first place")
               case WinningHorse(2)
                  Cls
                  Print "@0F@Congratulations!!!"
                  print Bar(30,0,9)
                  print
                  Print "@N@Your horse came in second place!"
                  Print "You just won @0F@";int(cf.HorseRace.SecondPlace) * Val(HorseBet);"@N@ minutes."
                  ChangeUserTime(GetMinutesRemaining + (int(cf.HorseRace.SecondPlace) * Val(HorseBet)))                  
                  td.MinutesWon = td.MinutesWon + (int(cf.HorseRace.SecondPlace) * Val(HorseBet))
                  UpdateDB(OurRecNum)
                  WriteActivityLogEntry("      * [Horse Race] Their horse came in second place")
               
               case WinningHorse(3)
                  Cls
                  Print "@0F@Congratulations!!!"
                  print Bar(30,0,9)
                  print
                  Print "@N@Your horse came in third place!"
                  Print "You just won @0F@";int(int(cf.HorseRace.ThirdPlace) * Val(HorseBet));"@N@ minutes."
                  ChangeUserTime(GetMinutesRemaining + (int(cf.HorseRace.ThirdPlace) * Val(HorseBet)))
                  td.MinutesWon = td.MinutesWon + (int(cf.HorseRace.ThirdPlace) * Val(HorseBet))
                  UpdateDB(OurRecNum)
                  WriteActivityLogEntry("      * [Horse Race] Their horse came in third place")
                  
               case else
                  Cls
                  Print "@0F@Better Luck Next Time"
                  print Bar(30,0,9)
                  print
                  Print "@N@I'm sorry, your horse was not a winner"
                  Print "You just lost @0F@";HorseBet;"@N@ minutes."
                  ChangeUserTime(GetMinutesRemaining - Val(HorseBet))
                  td.MinutesLost = td.MinutesLost + Val(HorseBet)
                  UpdateDB(OurRecNum)
                  WriteActivityLogEntry("      * [Horse Race] Their horse did not win")

            end select
            print
            Pause
         else
            Print "@N@I'm sorry, you must bet a valid amount."
            Pause
         end if
      else
         print "@N@I'm sorry, there is no such horse."
         Pause
      end if

      do while ReadChannel(0, msg)
         ProcessChannelMessage(msg)
      loop

end sub

sub CardGame
  
   dim CurBet as integer
   dim PlayChoice as string * 1
   dim TempBet as integer
   dim NumCardsDealer as byte
   dim NumCardsUser as byte  
   dim CardCounter as byte
   dim TempCurBet as string * 5
   dim RoundOver as boolean
   dim AlreadyBet as boolean
   dim Winner as string * 7         
  
   CurBet = cf.CardGame.MinBet
   NumCardsDealer = 3
   NumCardsUser = 3
   
   WriteActivityLogEntry("      * Entered Blackjack Game")
   
   Cls
   Print "@0F@Blackjack"
   print Bar(30,0,9)
   print
   print "@N@Welcome to the PS-TimeBank BlackJack game."
   print "You may bet anywhere between @0F@";cf.CardGame.MinBet;"@N@ minutes and @0F@";cf.CardGame.MaxBet;"@N@ minutes."
   print "@0F@Good Luck!@N@"
   print

If AskYesNo("Do you wish to play?",TRUE) then

do while PlayChoice <> "Q"
   ResetDeck
   ResetHands
   Winner = ""
   NumCardsDealer = 1
   NumCardsUser = 2
   
   If GetMinutesRemaining < cf.CardGame.MinBet then
      cls
      Print "@0B@Not Enough Time"
      print Bar(35,0,9)
      print
      print "@N@I'm sorry, you do not have enough time left to play this game."
      Pause
      exit do
   end if
   
   DealerHand(1) = PickCard("DEALER")

   For CardCounter = 1 to 2
      UserHand(CardCounter) = PickCard("USER")
      UserHand(CardCounter) = PickCard("USER")
   next CardCounter

   Cls
   
   Print "@0F@";cf.CardGame.DealerName;":";string(40 - len(cf.CardGame.DealerName) - 1 ,32);UpperLower(user.info.name);":"
   print Bar(30,0,9);string(10,32);Bar(30,0,9)

   Locate 18, 1
   print Bar(30,0,9);string(10,32);Bar(30,0,9)
   Print "@N@Minutes Left @08@: @0F@";GetMinutesRemaining
   Print "@N@Current Bet  @08@: @0F@";Str(CurBet)
   locate 19, 41: Print "@N@[@0F@H@N@]it"
   locate 20, 41: Print "@N@[@0F@S@N@]tand"
      
   RoundOver = FALSE
   AlreadyBet = FALSE
   do while NOT RoundOver
      Cls
   
      Print "@0F@";cf.CardGame.DealerName;":";string(40 - len(cf.CardGame.DealerName) - 1 ,32);UpperLower(user.info.name);":"
      print Bar(30,0,9);string(10,32);Bar(30,0,9)

      Locate 18, 1
      print Bar(30,0,9);string(10,32);Bar(30,0,9)
      Print "@N@Minutes Left @08@: @0F@";GetMinutesRemaining
      Print "@N@Current Bet  @08@: @0F@";str(CurBet)
      locate 19, 41: Print "@N@[@0F@H@N@]it"
      locate 20, 41: Print "@N@[@0F@S@N@]tand"

      If NOT AlreadyBet then
                   
         locate 20, 15
         print "@0F@              ";
         locate 20, 15
         do
            SetInitialString(STR(CurBet))
            TempCurBet = InputString(5)
            If TempCurBet = "" then exit do
            locate 20, 15
            print "@0F@              ";
            locate 20, 15

            If VAL(TempCurBet) >= cf.CardGame.MinBet and Val(TempCurBet) <= GetMinutesRemaining and Val(TempCurBet) <= cf.CardGame.MaxBet then
               CurBet = VAL(TempCurBet)
               WriteActivityLogEntry("      * [Blackjack] Bet " + str(CurBet) + " minutes on hand")
               exit do
            end if
         loop
         Locate 20, 16
         Print "@0F@";Str(CurBet)
         AlreadyBet = TRUE

      end if

      For CardCounter = 1 to NumCardsUser
         Locate 2 + CardCounter, 41
         Print "@0F@";UserHand(CardCounter);
      next CardCounter

      For CardCounter = 1 to NumCardsDealer
         Locate 2 + CardCounter, 1
         Print "@0F@";DealerHand(CardCounter);
      next CardCounter

      locate 22,1
   
      do
          PlayChoice = ucase(CHR(readkey(100)))
          if PlayChoice <> "" then
             exit do
          end if

      loop

      select case ucase(PlayChoice)
         case "H"
            if NumCardsUser < 12 then
               Locate 1, 43 + Len(user.info.name)
               Print "@0F@""Hit me!""";
               delay (cf.CardGame.Delay / 1000)
               inc(NumCardsUser)
               UserHand(NumCardsUser) = PickCard("USER")
               Locate 2 + NumCardsUser, 41
               Print "@0F@";UserHand(NumCardsUser);
               If CountUserHand > 21 then
                 Locate 1, 43 + Len(user.info.name)
                 Print "@0F@BUSTED!!!                "
                 delay (cf.CardGame.Delay / 1000)
                 Winner = "DEALER"
                 RoundOver = TRUE
               end if
            else
               Locate 1, 43 + Len(user.info.name)
               Print "@0F@Too Many Cards!";
               delay (cf.CardGame.Delay / 1000)
            end if
            
         case "S"
               Locate 1, 43 + Len(user.info.name)
               Print "@0F@Stand...";
               delay (cf.CardGame.Delay / 1000)
               
               do
                  if NumCardsDealer < 12 and CountDealerHand <= 15 then
                     Locate 1, 3 + len(cf.CardGame.DealerName)
                     Print "@0F@Takes a card";
                     delay (cf.CardGame.Delay / 1000)
                     inc(NumCardsDealer)
                     DealerHand(NumCardsDealer) = PickCard("DEALER")

                     For CardCounter = 1 to NumCardsDealer
                        Locate 2 + CardCounter, 1
                        Print "@0F@";DealerHand(CardCounter);
                     next CardCounter
                     
                     If CountDealerHand > 21 then
                       Locate 1, 3 + len(cf.CardGame.DealerName)
                       Print "@0F@BUSTED!!!                "
                       delay (cf.CardGame.Delay / 1000)
                       Winner = "USER"
                       RoundOver = TRUE
                       exit do
                     end if
                  else
                     Locate 1, 3 + len(cf.CardGame.DealerName)
                     Print "@0F@Stand...               ";
                     delay (cf.CardGame.Delay / 1000)
                     
                     RoundOver = TRUE
                     Exit do
                  end if
               loop

         case "D"
                  
      end select

   loop

   If CountDealerHand > CountUserHand and CountDealerHand <= 21 then Winner = "DEALER"
   If CountDealerHand < CountUserHand and CountUserHand <= 21  then Winner = "USER"
   If CountDealerHand = CountUserHand and CountUserHand <= 21 and CountDealerHand <= 21 then Winner = "DRAW"

   Locate 19, 1
   Print string(79, 32);
   Print string(79, 32);
   Print string(79, 32);


   locate 19, 41: Print "@N@[@0F@Q@N@]uit Game";
   locate 20, 41: Print "@N@[@0F@P@N@]lay Again";

   Select Case Winner
      Case "DEALER"
         Locate 20,1
         Print "@N@I'm sorry, you lost @0F@";str(CurBet);"@N@ minutes.";
         ChangeUserTime(GetMinutesRemaining - CurBet)
         td.MinutesLost = td.MinutesLost + CurBet
         UpdateDB(OurRecNum)
         WriteActivityLogEntry("      * [Blackjack] Dealer was winner")
         
      Case "USER"
         If NumCardsUser = 2 and CountUserHand = 21 then
            Locate 20,1
            Print "@N@Blackjack!  You won @0F@";str(cf.CardGame.Natural * CurBet);"@N@ minutes!";
            ChangeUserTime(GetMinutesRemaining + (cf.CardGame.Natural * CurBet))
            td.MinutesWon = td.MinutesWon + (cf.CardGame.Natural * CurBet)
            UpdateDB(OurRecNum)
            WriteActivityLogEntry("      * [Blackjack] User was winner (Blackjack)")

         else
            Locate 20,1
            Print "@N@Congratulations, you won @0F@";str(int(cf.CardGame.Winnings * CurBet));"@N@ minutes!";
            ChangeUserTime(GetMinutesRemaining + int((cf.CardGame.Winnings * CurBet)))
            td.MinutesWon = td.MinutesWon + int((cf.CardGame.Winnings * CurBet))
            UpdateDB(OurRecNum)
            WriteActivityLogEntry("      * [Blackjack] User was winner")
         end if
      
      Case "DRAW"
         Locate 20,1
         Print "@N@Tie.  No time was won or lost.";
         WriteActivityLogEntry("      * [Blackjack] User and dealer tied.  No time was won or lost.")
   end select         

  
   do
      PlayChoice = ucase(CHR(readkey(100)))
      if PlayChoice <> "" then
         exit do
      end if
   loop
   
   if PlayChoice = "Q" then exit do

   If GetMinutesRemaining < cf.CardGame.MinBet then
      cls
      Print "@0B@Not Enough Time"
      print Bar(35,0,9)
      print
      print "@N@I'm sorry, you do not have enough time left to play this game."
      Pause
      exit do
   end if

loop

end if

end sub

sub DefActSet

WriteActivityLogEntry("      * [Sysop Menu] Default Acount Setup")

dim DASChoice as string * 1

do while DASChoice <> "Q"
      Cls
      print "@N@PS-TimeBank - Default Account Settings       Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Starting Balance (Minutes)   @08@: @0F@";FormatNumber(cf.DefaultUser.StartBalM)
      print "@N@[@0F@ 2@N@]  @0F@Starting Balance (Kilobytes) @08@: @0F@";FormatNumber(cf.DefaultUser.StartBalK)
      print "@N@[@0F@ 3@N@]  @0F@Starting Balance (Downloads) @08@: @0F@";FormatNumber(cf.DefaultUser.StartBalDL)
      print "@N@[@0F@ 4@N@]  @0F@Maximum Balance (Minutes)    @08@: @0F@";FormatNumber(cf.DefaultUser.MaxBalM)
      print "@N@[@0F@ 5@N@]  @0F@Maximum Balance (Kilobytes)  @08@: @0F@";FormatNumber(cf.DefaultUser.MaxBalK)
      print "@N@[@0F@ 6@N@]  @0F@Maximum Balance (Downloads)  @08@: @0F@";FormatNumber(cf.DefaultUser.MaxBalDL)
      print "@N@[@0F@ 7@N@]  @0F@Maximum Time Left Online     @08@: @0F@";FormatNumber(cf.DefaultUser.MaxTimeLeft)
      print "@N@[@0F@ 8@N@]  @0F@Locked Out?                  @08@: @0F@";DispYesNo(cf.DefaultUser.LockedOut)
      print "@N@[@0F@ 9@N@]  @0F@Can't Deposit Minutes        @08@: @0F@";DispYesNo(cf.DefaultUser.NoDepMin)
      print "@N@[@0F@ A@N@]  @0F@Can't Deposit Kilobytes      @08@: @0F@";DispYesNo(cf.DefaultUser.NoDepK)
      print "@N@[@0F@ B@N@]  @0F@Can't Deposit Downloads      @08@: @0F@";DispYesNo(cf.DefaultUser.NoDepDL)
      print "@N@[@0F@ C@N@]  @0F@Gamble Override              @08@: @0F@";DispYesNo(cf.DefaultUser.GambleOvr)
      print "@N@[@0F@ D@N@]  @0F@Gamble Lockout               @08@: @0F@";DispYesNo(cf.DefaultUser.GambleLockout)
      print "@N@[@0F@ E@N@]  @0F@Time Bank Sysop Access       @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccess)
      
      If cf.DefaultUser.SysopAccess then
         print "@N@[@0F@ F@N@]  @0F@Sysop Access Settings        @08@: @0F@[";SysopAccessSetDisp(cf.DefaultUser.SysopAccessSet);"@0F@]"
      else
         print "@N@[@07@ F@N@]  @07@Sysop Access Settings        @08@: @07@[";SysopAccessSetDisp(cf.DefaultUser.SysopAccessSet);"@07@]"
      end if
      print
      print "@N@[@0F@ Q@N@]  @0F@Quit Configuration Manager"
      print 

      do
          DASChoice = ucase(CHR(readkey(100)))
          if DASChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop
      
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and DASChoice = "E" then DASChoice = ""
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and DASChoice = "F" then DASChoice = ""

      select case ucase(DASChoice)
         case "Q"
         
         case "1"
            dim TempStartBalM as string * 10
            Locate 4, 37
            Print "@0F@       ";
            locate 4,37
            do
               SetInitialString(STR(cf.DefaultUser.StartBalM))
               TempStartBalM = InputString(10)
               If TempStartBalM = "" then exit do
               If VAL(TempStartBalM) >= 0 then
                  cf.DefaultUser.StartBalM = VAL(TempStartBalM)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "2"
            dim TempStartBalK as string * 10
            Locate 5, 37
            Print "@0F@       ";
            locate 5,37
            do
               SetInitialString(STR(cf.DefaultUser.StartBalK))
               TempStartBalK = InputString(10)
               If TempStartBalK = "" then exit do
               If VAL(TempStartBalK) >= 0 then
                  cf.DefaultUser.StartBalK = VAL(TempStartBalK)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "3"
            dim TempStartBalDL as string * 10
            Locate 6, 37
            Print "@0F@       ";
            locate 6,37
            do
               SetInitialString(STR(cf.DefaultUser.StartBalDL))
               TempStartBalDL = InputString(10)
               If TempStartBalDL = "" then exit do
               If VAL(TempStartBalDL) >= 0 then
                  cf.DefaultUser.StartBalDL = VAL(TempStartBalDL)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "4"
            dim TempMaxBalM as string * 10
            Locate 7, 37
            Print "@0F@       ";
            locate 7,37
            do      
               SetInitialString(STR(cf.DefaultUser.MaxBalM))
               TempMaxBalM = InputString(10)
               If TempMaxBalM = "" then exit do
               If VAL(TempMaxBalM) >= 0 then
                  cf.DefaultUser.MaxBalM = VAL(TempMaxBalM)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "5"
            dim TempMaxBalK as string * 10
            Locate 8, 37
            Print "@0F@       ";
            locate 8,37
            do
               SetInitialString(STR(cf.DefaultUser.MaxBalK))
               TempMaxBalK = InputString(10)
               If TempMaxBalK = "" then exit do
               If VAL(TempMaxBalK) >= 0 then
                  cf.DefaultUser.MaxBalK = VAL(TempMaxBalK)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "6"
            dim TempMaxBalDL as string * 10
            Locate 9, 37
            Print "@0F@       ";
            locate 9,37
            do
               SetInitialString(STR(cf.DefaultUser.MaxBalDL))
               TempMaxBalDL = InputString(10)
               If TempMaxBalDL = "" then exit do
               If VAL(TempMaxBalDL) >= 0 then
                  cf.DefaultUser.MaxBalDL = VAL(TempMaxBalDL)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "7"
            dim TempMaxTimeLeft as string * 10
            Locate 10, 37
            Print "@0F@       ";
            locate 10,37
            do
               SetInitialString(STR(cf.DefaultUser.MaxTimeLeft))
               TempMaxTimeLeft = InputString(10)
               If TempMaxTimeLeft = "" then exit do
               If VAL(TempMaxTimeLeft) >= 0 then
                  cf.DefaultUser.MaxTimeLeft = VAL(TempMaxTimeLeft)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "8"
            select case cf.DefaultUser.LockedOut
               case TRUE
                  cf.DefaultUser.LockedOut = FALSE
               case FALSE
                  cf.DefaultUser.LockedOut = TRUE
            end select
            WriteConfig
         
         case "9"
            select case cf.DefaultUser.NoDepMin
               case TRUE
                  cf.DefaultUser.NoDepMin = FALSE
               case FALSE
                  cf.DefaultUser.NoDepMin = TRUE
            end select
            WriteConfig
         
         case "A"
            select case cf.DefaultUser.NoDepK
               case TRUE
                  cf.DefaultUser.NoDepK = FALSE
               case FALSE
                  cf.DefaultUser.NoDepK = TRUE
            end select
            WriteConfig
         
         case "B"
            select case cf.DefaultUser.NoDepDL
               case TRUE
                  cf.DefaultUser.NoDepDL = FALSE
               case FALSE
                  cf.DefaultUser.NoDepDL = TRUE
            end select
            WriteConfig
         
         case "C"
            select case cf.DefaultUser.GambleOvr
               case TRUE
                  cf.DefaultUser.GambleOvr = FALSE
               case FALSE
                  cf.DefaultUser.GambleLockout = FALSE
                  cf.DefaultUser.GambleOvr = TRUE
            end select
            WriteConfig
         
         case "D"
            select case cf.DefaultUser.GambleLockout
               case TRUE
                  cf.DefaultUser.GambleLockout = FALSE
               case FALSE
                  cf.DefaultUser.GambleOvr = FALSE
                  cf.DefaultUser.GambleLockout = TRUE
            end select
            WriteConfig

         case "E"
            select case cf.DefaultUser.SysopAccess
               case TRUE
                  cf.DefaultUser.SysopAccess = FALSE
               case FALSE
                  cf.DefaultUser.SysopAccess = TRUE
            end select
            WriteConfig
         
         case "F"
            dim DefEditChoiceSys as string * 1
            dim DefEndModSys as boolean
            
            DefEditChoiceSys = ""
            DefEndModSys = FALSE
            
            do while NOT DefEndModSys
               Locate 4,50 : print "@N@[@0F@ 1@N@]  @0F@User Editor    @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccessSet.UserEditor);" ";
               Locate 5,50 : print "@N@[@0F@ 2@N@]  @0F@Modify Time    @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccessSet.AllowTimeModify);" ";
               Locate 6,50 : print "@N@[@0F@ 3@N@]  @0F@Delete Users   @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccessSet.DeleteUsers);" ";
               Locate 7,50 : print "@N@[@0F@ 4@N@]  @0F@WC Database    @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccessSet.WCUserDB);" ";
               Locate 8,50 : print "@N@[@0F@ 5@N@]  @0F@Configuration  @08@: @0F@";DispYesNo(cf.DefaultUser.SysopAccessSet.Configure);" ";
               Locate 9,50 : print "@N@[@0F@ Q@N@]  @0F@Quit To Editor"
            
               do
                  DefEditChoiceSys = ucase(CHR(readkey(100)))
                  if DefEditChoiceSys <> "" then
                     exit do
                  end if
               loop
               
               select case DefEditChoiceSys
                  case "1"
                     select case cf.DefaultUser.SysopAccessSet.UserEditor
                        case FALSE
                           cf.DefaultUser.SysopAccessSet.UserEditor = TRUE
                        case TRUE
                           cf.DefaultUser.SysopAccessSet.UserEditor = FALSE
                     end select
                     WriteConfig
                  case "2"
                     select case cf.DefaultUser.SysopAccessSet.AllowTimeModify
                        case FALSE
                           cf.DefaultUser.SysopAccessSet.AllowTimeModify = TRUE
                        case TRUE
                           cf.DefaultUser.SysopAccessSet.AllowTimeModify = FALSE
                     end select
                     WriteConfig
                  case "3"
                     select case cf.DefaultUser.SysopAccessSet.DeleteUsers
                        case FALSE
                           cf.DefaultUser.SysopAccessSet.DeleteUsers = TRUE
                        case TRUE
                           cf.DefaultUser.SysopAccessSet.DeleteUsers = FALSE
                     end select
                     WriteConfig
                  case "4"
                     select case cf.DefaultUser.SysopAccessSet.WCUserDB
                        case FALSE
                           cf.DefaultUser.SysopAccessSet.WCUserDB = TRUE
                        case TRUE
                           cf.DefaultUser.SysopAccessSet.WCUserDB = FALSE
                     end select
                     WriteConfig
                  case "5"
                     select case cf.DefaultUser.SysopAccessSet.Configure
                        case FALSE
                           cf.DefaultUser.SysopAccessSet.Configure = TRUE
                        case TRUE
                           cf.DefaultUser.SysopAccessSet.Configure = FALSE
                     end select
                     WriteConfig
                  case "Q", Chr(13)
                     Locate 4,50 : print string(29, 32);
                     Locate 5,50 : print string(29, 32);
                     Locate 6,50 : print string(29, 32);
                     Locate 7,50 : print string(29, 32);
                     Locate 8,50 : print string(29, 32);
                     Locate 9,50 : print string(29, 32);
                     DefEndModSys = TRUE
                     
               end select
            loop

         
      end select
loop

end sub

sub DefActSetPro

WriteActivityLogEntry("      * [Sysop Menu] Defaut account by security level setup")

dim sp as TSecurityProfile
dim DefActSetProChoice as string * 1
dim SecLooper as byte

cls
  
   SecLooper = 1
 
   do while UCASE(DefActSetProChoice) <> "Q"
      cls

      if GetSecurityProfileByName(cf.DefaultUserSec(SecLooper).WCSecLevel, sp) then
         SubText(1) = cf.DefaultUserSec(SecLooper).WCSecLevel
      else
         SubText(1) = "Not Yet Defined"
      end if

      print "@N@Security Profile Name@08@: @0F@@SUB1:30@@N@Record [@0F@";str(SecLooper);"@N@ of @0F@50@N@]"
      print Bar(55,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Wildcat! Security Level      @08@: @0F@@SUB1@"
      print "@N@[@0F@ 2@N@]  @0F@Starting Balance (Minutes)   @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).StartBalM)
      print "@N@[@0F@ 3@N@]  @0F@Starting Balance (Kilobytes) @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).StartBalK)
      print "@N@[@0F@ 4@N@]  @0F@Starting Balance (Downloads) @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).StartBalDL)
      print "@N@[@0F@ 5@N@]  @0F@Maximum Balance (Minutes)    @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).MaxBalM)
      print "@N@[@0F@ 6@N@]  @0F@Maximum Balance (Kilobytes)  @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).MaxBalK)
      print "@N@[@0F@ 7@N@]  @0F@Maximum Balance (Downloads)  @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).MaxBalDL)
      print "@N@[@0F@ 8@N@]  @0F@Maximum Time Left Online     @08@: @0F@";FormatNumber(cf.DefaultUserSec(SecLooper).MaxTimeLeft)
      print "@N@[@0F@ 9@N@]  @0F@Locked Out?                  @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).LockedOut)
      print "@N@[@0F@ A@N@]  @0F@Can't Deposit Minutes        @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).NoDepMin)
      print "@N@[@0F@ B@N@]  @0F@Can't Deposit Kilobytes      @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).NoDepK)
      print "@N@[@0F@ C@N@]  @0F@Can't Deposit Downloads      @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).NoDepDL)
      print "@N@[@0F@ D@N@]  @0F@Gamble Override              @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).GambleOvr)
      print "@N@[@0F@ E@N@]  @0F@Gamble Lockout               @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).GambleLockout)
      print "@N@[@0F@ F@N@]  @0F@Time Bank Sysop Access       @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccess)
      If cf.DefaultUserSec(SecLooper).SysopAccess then
         print "@N@[@0F@ G@N@]  @0F@Sysop Access Settings        @08@: @0F@[";SysopAccessSetDisp(cf.DefaultUserSec(SecLooper).SysopAccessSet);"@0F@]"
      else
         print "@N@[@07@ G@N@]  @07@Sysop Access Settings        @08@: @07@[";SysopAccessSetDisp(cf.DefaultUserSec(SecLooper).SysopAccessSet);"@07@]"
      end if
      print 
      Print "@N@Edit [@0F@1@07@..@0F@F@N@], [@0F@K@N@]ill, [@0F@S@N@]earch, [@0F@[@N@] Prev, [@0F@]@N@] Next, [@0F@Q@N@]uit/Save";

      do
          DefActSetProChoice = ucase(CHR(readkey(100)))
          if DefActSetProChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop
      
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and DefActSetProChoice = "F" then DefActSetProChoice = ""
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and DefActSetProChoice = "G" then DefActSetProChoice = ""

      select case ucase(DefActSetProChoice)
         case "Q"
            WriteConfig
         case "1"
            Cls
            Print "@0F@Select Security Profile"
            print Bar(35,0,9)  
            print

            cf.DefaultUserSec(SecLooper).WCSecLevel = GetSecurityProfile
         
         case "2"
            dim TempSecBalanceMin as string * 7
            Locate 5, 37
            Print "@0F@                     ";
            locate 5,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).StartBalM))
            TempSecBalanceMin  = InputString(7)
            If TempSecBalanceMin  <> "" and Val(TempSecBalanceMin ) <= 65536 then
               cf.DefaultUserSec(SecLooper).StartBalM = Val(TempSecBalanceMin)
               WriteConfig
            end if
         case "3"
            dim TempSecBalanceK as string * 7
            Locate 6, 37
            Print "@0F@                     ";
            locate 6,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).StartBalK))
            TempSecBalanceK = InputString(7)
            If TempSecBalanceK <> "" and Val(TempSecBalanceK) <= 65536 then
               cf.DefaultUserSec(SecLooper).StartBalK = Val(TempSecBalanceK)
               WriteConfig
            end if
         case "4"
            dim TempSecBalanceDL as string * 7
            Locate 7, 37
            Print "@0F@                     ";
            locate 7,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).StartBalDL))
            TempSecBalanceDL = InputString(7)
            If TempSecBalanceDL <> "" and Val(TempSecBalanceDL) <= 65536 then
               cf.DefaultUserSec(SecLooper).StartBalDL = Val(TempSecBalanceDL)
               WriteConfig
            end if
         case "5"
            dim TempSecMaxBalanceMin as string * 7
            Locate 8, 37
            Print "@0F@                     ";
            locate 8,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).MaxBalM))
            TempSecMaxBalanceMin = InputString(7)
            If TempSecMaxBalanceMin <> "" and Val(TempSecMaxBalanceMin) <= 65536 then
               cf.DefaultUserSec(SecLooper).MaxBalM = Val(TempSecMaxBalanceMin)
               WriteConfig
            end if
         case "6"
            dim TempSecMaxBalanceK as string * 7
            Locate 9, 37
            Print "@0F@                     ";
            locate 9,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).MaxBalK))
            TempSecMaxBalanceK = InputString(7)
            If TempSecMaxBalanceK <> "" and Val(TempSecMaxBalanceK) <= 65536 then
               cf.DefaultUserSec(SecLooper).MaxBalK = Val(TempSecMaxBalanceK)
               WriteConfig
            end if
         
         case "7"
            dim TempSecMaxBalanceDL as string * 7
            Locate 10, 37
            Print "@0F@                     ";
            locate 10,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).MaxBalDL))
            TempSecMaxBalanceDL = InputString(7)
            If TempSecMaxBalanceDL <> "" and Val(TempSecMaxBalanceDL) <= 65536 then
               cf.DefaultUserSec(SecLooper).MaxBalDL = Val(TempSecMaxBalanceDL)
               WriteConfig
            end if
         case "8"
            dim TempSecMaxMinLeftOnline as string * 7
            Locate 11, 37
            Print "@0F@                     ";
            locate 11,37
            SetInitialString(str(cf.DefaultUserSec(SecLooper).MaxTimeLeft))
            TempSecMaxMinLeftOnline = InputString(7)
            If TempSecMaxMinLeftOnline <> "" and Val(TempSecMaxMinLeftOnline) <= 65536 then
               cf.DefaultUserSec(SecLooper).MaxTimeLeft = Val(TempSecMaxMinLeftOnline)
               WriteConfig
            end if
         
         case "9"
               select case cf.DefaultUserSec(SecLooper).LockedOut
                  case FALSE
                     cf.DefaultUserSec(SecLooper).LockedOut = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).LockedOut = FALSE
               end select
               WriteConfig
         case "A"
               select case cf.DefaultUserSec(SecLooper).NoDepMin
                  case FALSE
                     cf.DefaultUserSec(SecLooper).NoDepMin = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).NoDepMin = FALSE
               end select
               WriteConfig

         case "B"
               select case cf.DefaultUserSec(SecLooper).NoDepK
                  case FALSE
                     cf.DefaultUserSec(SecLooper).NoDepK = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).NoDepK = FALSE
               end select
               WriteConfig

         case "C"
               select case cf.DefaultUserSec(SecLooper).NoDepDL
                  case FALSE
                     cf.DefaultUserSec(SecLooper).NoDepDL = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).NoDepDL = FALSE
               end select
               WriteConfig
         case "D"
               select case cf.DefaultUserSec(SecLooper).GambleOvr
                  case FALSE
                     cf.DefaultUserSec(SecLooper).GambleOvr = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).GambleOvr = FALSE
               end select
               WriteConfig
         case "E"
               select case cf.DefaultUserSec(SecLooper).GambleLockout
                  case FALSE
                     cf.DefaultUserSec(SecLooper).GambleLockout = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).GambleLockout = FALSE
               end select
               WriteConfig
         case "F"
               select case cf.DefaultUserSec(SecLooper).SysopAccess
                  case FALSE
                     cf.DefaultUserSec(SecLooper).SysopAccess = TRUE
                  case TRUE
                     cf.DefaultUserSec(SecLooper).SysopAccess = FALSE
               end select
               WriteConfig
         case "K"
            cf.DefaultUserSec(SecLooper).WCSecLevel = ""
            WriteConfig
            
         case "S"
            
            dim SecFound as boolean
            dim CurSec as byte
            dim SecToSearch as string

            SecFound = FALSE
            
               Cls
               Print "@0F@Select Security Level (Enter for next blank entry) : "
               print Bar(55,0,9)  
               Print
                              
               SecToSearch = GetSecurityProfile
               
                  for CurSec = 1 to 50
                     if cf.DefaultUserSec(CurSec).WCSecLevel = SecToSearch then 
                        SecFound = TRUE
                        SecLooper = CurSec
                        exit for
                     end if
                  next CurSec
                  
            If SecFound = FALSE then
               Cls
               Print "@0F@Not Found"
               print Bar(35,0,9)  
               Print "@0F@";trim(SecToSearch);"@N@ was not found in the Time Bank Database."
               print
               Pause
            end if
         
         
         case "]"
            if SecLooper < 50 then
               inc(SecLooper)
            else
               SecLooper = 1
            end if
            
         case "["
            if SecLooper > 1 then
               dec(SecLooper)
            else
               SecLooper = 50
            end if
         
         case CHR(13)
            if SecLooper < 50 then
               inc(SecLooper)
            else
               SecLooper = 1
            end if
            
         case "G"
            dim ProEditChoiceSys as string * 1
            dim ProEndModSys as boolean
            
            ProEditChoiceSys = ""
            ProEndModSys = FALSE
            
            do while NOT ProEndModSys
               Locate 5, 50 : print "@N@[@0F@ 1@N@]  @0F@User Editor    @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccessSet.UserEditor);" ";
               Locate 6, 50 : print "@N@[@0F@ 2@N@]  @0F@Modify Time    @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccessSet.AllowTimeModify);" ";
               Locate 7, 50 : print "@N@[@0F@ 3@N@]  @0F@Delete Users   @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccessSet.DeleteUsers);" ";
               Locate 8, 50 : print "@N@[@0F@ 4@N@]  @0F@WC Database    @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccessSet.WCUserDB);" ";
               Locate 9, 50 : print "@N@[@0F@ 5@N@]  @0F@Configuration  @08@: @0F@";DispYesNo(cf.DefaultUserSec(SecLooper).SysopAccessSet.Configure);" ";
               Locate 10,50 : print "@N@[@0F@ Q@N@]  @0F@Quit To Editor"
            
               do
                  ProEditChoiceSys = ucase(CHR(readkey(100)))
                  if ProEditChoiceSys <> "" then
                     exit do
                  end if
               loop
               
               select case ProEditChoiceSys
                  case "1"
                     select case cf.DefaultUserSec(SecLooper).SysopAccessSet.UserEditor
                        case FALSE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.UserEditor = TRUE
                        case TRUE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.UserEditor = FALSE
                     end select
                     WriteConfig
                  case "2"
                     select case cf.DefaultUserSec(SecLooper).SysopAccessSet.AllowTimeModify
                        case FALSE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.AllowTimeModify = TRUE
                        case TRUE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.AllowTimeModify = FALSE
                     end select
                     WriteConfig
                  case "3"
                     select case cf.DefaultUserSec(SecLooper).SysopAccessSet.DeleteUsers
                        case FALSE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.DeleteUsers = TRUE
                        case TRUE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.DeleteUsers = FALSE
                     end select
                     WriteConfig
                  case "4"
                     select case cf.DefaultUserSec(SecLooper).SysopAccessSet.WCUserDB
                        case FALSE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.WCUserDB = TRUE
                        case TRUE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.WCUserDB = FALSE
                     end select
                     WriteConfig
                  case "5"
                     select case cf.DefaultUserSec(SecLooper).SysopAccessSet.Configure
                        case FALSE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.Configure = TRUE
                        case TRUE
                           cf.DefaultUserSec(SecLooper).SysopAccessSet.Configure = FALSE
                     end select
                     WriteConfig
                  case "Q", Chr(13)
                     Locate 5, 50 : print string(29, 32);
                     Locate 6, 50 : print string(29, 32);
                     Locate 7, 50 : print string(29, 32);
                     Locate 8, 50 : print string(29, 32);
                     Locate 9, 50 : print string(29, 32);
                     Locate 10,50 : print string(29, 32);
                     ProEndModSys = TRUE
                     
               end select
            loop

         
      end select
   
   loop
end sub

sub HorseRaceSettings

WriteActivityLogEntry("      * [Sysop Menu] Horse Race settings")

dim HorseChoice as string * 1

do while HorseChoice <> "Q"
      Cls
      print "@N@PS-TimeBank - Horse Race Settings           Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Disable Horse Race           @08@: @0F@";DispYesNo(cf.HorseRace.Disable)
      print "@N@[@0F@ 2@N@]  @0F@ASCII Character For Horses   @08@: @0F@";cf.HorseRace.HorseChar;" (";chr(cf.HorseRace.HorseChar);")"
      print "@N@[@0F@ 3@N@]  @0F@Color for Horses             @08@: @0F@";DispHColor
      print "@N@[@0F@ 4@N@]  @0F@Minimum Spaces to Jump/Round @08@: @0F@";STR(cf.HorseRace.MinSpace)
      print "@N@[@0F@ 5@N@]  @0F@Maximum Spaces to Jump/Round @08@: @0F@";STR(cf.HorseRace.MaxSpace)
      print "@N@[@0F@ 6@N@]  @0F@Delay Factor Between Rounds  @08@: @0F@";FormatNumber(cf.HorseRace.Delay); "ms"
      print "@N@[@0F@ 7@N@]  @0F@Number of Horses             @08@: @0F@";STR(cf.HorseRace.NumHorses)
      print "@N@[@0F@ 8@N@]  @0F@Maximum Bet                  @08@: @0F@";FormatNumber(cf.HorseRace.MaxBet)
      print "@N@[@0F@ 9@N@]  @0F@Minimum Bet                  @08@: @0F@";FormatNumber(cf.HorseRace.MinBet)
      print "@N@[@0F@ A@N@]  @0F@First Place Prize            @08@: @0F@";Str(cf.HorseRace.FirstPlace);" Times Bet"
      print "@N@[@0F@ B@N@]  @0F@Second Place Prize           @08@: @0F@";Str(cf.HorseRace.SecondPlace);" Times Bet"
      print "@N@[@0F@ C@N@]  @0F@Third Place Prize            @08@: @0F@";Str(cf.HorseRace.ThirdPlace);" Times Bet"
      print
      print "@N@[@0F@ H@N@]  @0F@Help On Options"
      print "@N@[@0F@ Q@N@]  @0F@Quit Horse Race Settings"
      print 
      if NOT Regged then print "@04@Please register to enable options 2-C!"

      do
          HorseChoice = ucase(CHR(readkey(100)))
          if HorseChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop

      If NOT Regged then
         If ucase(HorseChoice) <> "Q" and HorseChoice <> "1" and HorseChoice <> "H" then
            HorseChoice = ""
         end if
      end if
      select case ucase(HorseChoice)
         case "Q"
         
         case "H"
            cls
            DisplayFile "wc:\help\psthorse.bbs"
            print
            Pause
         
         case "1"
            select case cf.HorseRace.Disable
               case TRUE
                  cf.HorseRace.Disable = FALSE
               case FALSE
                  cf.HorseRace.Disable = TRUE
            end select
            WriteConfig
            
         case "2"
            dim TempHorseChar as string * 4
            Locate 5, 37
            Print "@0F@       ";
            locate 5,37
            do
               SetInitialString(STR(cf.HorseRace.HorseChar))
               TempHorseChar = InputString(4)
               If TempHorseChar = "" then exit do
               If VAL(TempHorseChar) >= 0 and VAL(TempHorseChar) <= 254 then
                  cf.HorseRace.HorseChar = VAL(TempHorseChar)
                  WriteConfig
                  exit do
               end if
            loop
            
         case "3"
            select case cf.HorseRace.HColor
               case "BLUE"
                  cf.HorseRace.HColor = "GREEN"
               case "GREEN"
                  cf.HorseRace.HColor = "CYAN"
               case "CYAN"
                  cf.HorseRace.HColor = "RED"
               case "RED"
                  cf.HorseRace.HColor = "MAGENTA"
               case "MAGENTA"
                  cf.HorseRace.HColor = "BROWN"
               case "BROWN"
                  cf.HorseRace.HColor = "WHITE"
               case "WHITE"
                  cf.HorseRace.HColor = "BBLACK"
               case "BBLACK"
                  cf.HorseRace.HColor = "BBLUE"
               case "BBLUE"
                  cf.HorseRace.HColor = "BGREEN"
               case "BGREEN"
                  cf.HorseRace.HColor = "BCYAN"
               case "BCYAN"
                  cf.HorseRace.HColor = "BRED"
               case "BRED"
                  cf.HorseRace.HColor = "BMAGENTA"
               case "BMAGENTA"
                  cf.HorseRace.HColor = "BBROWN"
               case "BBROWN"
                  cf.HorseRace.HColor = "BWHITE"               
               case "BWHITE"
                  cf.HorseRace.HColor = "RANDOM"
               case "RANDOM"
                  cf.HorseRace.HColor = "BLUE"
            end select
         case "4"
            dim TempMinSpace as string * 3
            Locate 7, 37
            Print "@0F@       ";
            locate 7,37
            do
               SetInitialString(STR(cf.HorseRace.MinSpace))
               TempMinSpace = InputString(3)
               If TempMinSpace = "" then exit do
               If VAL(TempMinSpace) >= 0 and VAL(TempMinSpace) <= 40 then
                  cf.HorseRace.MinSpace = VAL(TempMinSpace)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "5"
            dim TempMaxSpace as string * 3
            Locate 8, 37
            Print "@0F@       ";
            locate 8,37
            do
               SetInitialString(STR(cf.HorseRace.MaxSpace))
               TempMaxSpace = InputString(3)
               If TempMaxSpace = "" then exit do
               If VAL(TempMaxSpace) >= 0 and VAL(TempMaxSpace) <= 80 then
                  cf.HorseRace.MaxSpace = VAL(TempMaxSpace)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "6"
            dim TempDelay as string * 5
            Locate 9, 37
            Print "@0F@       ";
            locate 9,37
            do
               SetInitialString(STR(cf.HorseRace.Delay))
               TempDelay = InputString(5)
               If TempDelay = "" then exit do
               If VAL(TempDelay) >= 0 and VAL(TempDelay) <= 1000 then
                  cf.HorseRace.Delay = VAL(TempDelay)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "7"
            dim TempNumHorses as string * 3
            Locate 10, 37
            Print "@0F@       ";
            locate 10,37
            do
               SetInitialString(STR(cf.HorseRace.NumHorses))
               TempNumHorses = InputString(3)
               If TempNumHorses = "" then exit do
               If VAL(TempNumHorses) >= 3 and VAL(TempNumHorses) <= 15 then
                  cf.HorseRace.NumHorses = VAL(TempNumHorses)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "8"
            dim TempMaxBet as string * 6
            Locate 11, 37
            Print "@0F@       ";
            locate 11,37
            do
               SetInitialString(STR(cf.HorseRace.MaxBet))
               TempMaxBet = InputString(6)
               If TempMaxBet = "" then exit do
               If VAL(TempMaxBet) >= 0 and VAL(TempMaxBet) <= 65536 then
                  cf.HorseRace.MaxBet = VAL(TempMaxBet)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "9"
            dim TempMinBet as string * 6
            Locate 12, 37
            Print "@0F@       ";
            locate 12,37
            do
               SetInitialString(STR(cf.HorseRace.MinBet))
               TempMinBet = InputString(6)
               If TempMinBet = "" then exit do
               If VAL(TempMinBet) >= 0 and VAL(TempMinBet) <= 65536 then
                  cf.HorseRace.MinBet = VAL(TempMinBet)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "A"
            dim TempFirstPlace as string * 3
            Locate 13, 37
            Print "@0F@                    ";
            locate 13,37
            do
               SetInitialString(STR(cf.HorseRace.FirstPlace))
               TempFirstPlace = InputString(3)
               If TempFirstPlace = "" then exit do
               If VAL(TempFirstPlace) >= 0 and VAL(TempFirstPlace) <= 99 then
                  cf.HorseRace.FirstPlace = VAL(TempFirstPlace)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "B"
            dim TempSecondPlace as string * 3
            Locate 14, 37
            Print "@0F@                    ";
            locate 14,37
            do
               SetInitialString(STR(cf.HorseRace.SecondPlace))
               TempSecondPlace = InputString(3)
               If TempSecondPlace = "" then exit do
               If VAL(TempSecondPlace) >= 0 and VAL(TempSecondPlace) <= 99 then
                  cf.HorseRace.SecondPlace = VAL(TempSecondPlace)                 
                  WriteConfig
                  exit do
               end if
            loop
              
         case "C"
            dim TempThirdPlace as string * 3
            Locate 15, 37
            Print "@0F@                    ";
            locate 15,37
            do
               SetInitialString(STR(cf.HorseRace.ThirdPlace))
               TempThirdPlace = InputString(3)
               If TempThirdPlace = "" then exit do
               If VAL(TempThirdPlace) >= 0 and VAL(TempThirdPlace) <= 99 then
                  cf.HorseRace.ThirdPlace = VAL(TempThirdPlace)                 
                  WriteConfig
                  exit do
               end if
            loop

      end select
loop

end sub

sub CardGameSettings

WriteActivityLogEntry("      * [Sysop Menu] Card Game settings")

dim CardChoice as string * 1

do while CardChoice <> "Q"
      Cls
      print "@N@PS-TimeBank - Blackjack Settings            Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Disable Blackjack            @08@: @0F@";DispYesNo(cf.CardGame.Disable)
      print "@N@[@0F@ 2@N@]  @0F@Maximum Bet                  @08@: @0F@";FormatNumber(cf.CardGame.MaxBet)
      print "@N@[@0F@ 3@N@]  @0F@Minimum Bet                  @08@: @0F@";FormatNumber(cf.CardGame.MinBet)
      print "@N@[@0F@ 4@N@]  @0F@Blackjack Winnings           @08@: @0F@";Str(cf.CardGame.Natural);" Times Bet"
      print "@N@[@0F@ 5@N@]  @0F@Any Winnings                 @08@: @0F@";Str(cf.CardGame.Winnings);" Times Bet"
      print "@N@[@0F@ 6@N@]  @0F@Name of Dealer               @08@: @0F@";cf.CardGame.DealerName
      print "@N@[@0F@ 7@N@]  @0F@Delay Factor                 @08@: @0F@";FormatNumber(cf.CardGame.Delay);"ms"
      print
      print "@N@[@0F@ H@N@]  @0F@Help On Options"
      print "@N@[@0F@ Q@N@]  @0F@Quit Blackjack Settings"
      print 
      if NOT Regged then print "@04@Please register to enable options 2-7"

      do
          CardChoice = ucase(CHR(readkey(100)))
          if CardChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop
      
      If NOT Regged then
         If ucase(CardChoice) <> "Q" and CardChoice <> "1" and CardChoice <> "H" then
            CardChoice = ""
         end if
      end if

      select case ucase(CardChoice)
         case "Q"
         
         case "H"
            cls
            DisplayFile "wc:\help\pstbjack.bbs"
            Print
            Pause
         
         case "1"
            select case cf.CardGame.Disable
               case TRUE
                  cf.CardGame.Disable = FALSE
               case FALSE
                  cf.CardGame.Disable = TRUE
            end select
            WriteConfig
            
         case "2"
            dim CGTempMaxBet as string * 6
            do
               SetInitialString(STR(cf.CardGame.MaxBet))
               Locate 5, 37
               Print "@0F@       ";
               locate 5,37
               CGTempMaxBet = InputString(6)
               If CGTempMaxBet = "" then exit do
               If VAL(CGTempMaxBet) >= 0 and VAL(CGTempMaxBet) <= 65536 then
                  cf.CardGame.MaxBet = VAL(CGTempMaxBet)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "3"
            dim CGTempMinBet as string * 6
            Locate 6, 37
            Print "@0F@       ";
            locate 6,37
            do
               SetInitialString(STR(cf.CardGame.MinBet))
               CGTempMinBet = InputString(6)
               If CGTempMinBet = "" then exit do
               If VAL(CGTempMinBet) >= 0 and VAL(CGTempMinBet) <= 65536 then
                  cf.CardGame.MinBet = VAL(CGTempMinBet)                 
                  WriteConfig
                  exit do
               end if
            loop
            
         case "4"
            dim TempNatural as string * 6
            Locate 7, 37
            Print "@0F@       ";
            locate 7,37
            do
               SetInitialString(STR(cf.CardGame.Natural))
               TempNatural = InputString(6)
               If TempNatural = "" then exit do
               If VAL(TempNatural) >= 0 and VAL(TempNatural) <= 999 then
                  cf.CardGame.Natural = VAL(TempNatural)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "5"
            dim TempWinnings as string * 6
            Locate 8, 37
            Print "@0F@       ";
            locate 8,37
            do
               SetInitialString(STR(cf.CardGame.Winnings))
               TempWinnings = InputString(6)
               If TempWinnings = "" then exit do
               If VAL(TempWinnings) >= 0 and VAL(TempWinnings) <= 999 then
                  cf.CardGame.Winnings = VAL(TempWinnings)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "6"
            dim TempDealerName as string * 16
            Locate 9, 37
            Print "@0F@              ";
            locate 9,37
            do
               SetInitialString(cf.CardGame.DealerName)
               TempDealerName = InputString(16)
               If TempDealerName = "" then exit do
               If Trim(TempDealerName) <> "" then
                  cf.CardGame.DealerName = Trim(TempDealerName)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "7"
            dim TempDelay as string * 5
            Locate 10, 37
            Print "@0F@       ";
            locate 10,37
            do
               SetInitialString(STR(cf.CardGame.Delay))
               TempDelay = InputString(6)
               If TempDelay = "" then exit do
               If VAL(TempDelay) >= 0 and VAL(TempDelay) <= 9999 then
                  cf.CardGame.Delay = VAL(TempDelay)                 
                  WriteConfig
                  exit do
               end if
            loop


      end select
loop

end sub

sub RaffleSettings

WriteActivityLogEntry("      * [Sysop Menu] Time Raffle settings")

dim RaffleChoice as string * 1

do while RaffleChoice <> "Q"
      Cls
      print "@N@PS-TimeBank - Raffle Settings               Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Disable Raffle Game          @08@: @0F@";DispYesNo(cf.Raffle.Disable)
      print "@N@[@0F@ 2@N@]  @0F@Cost Per Ticket              @08@: @0F@";FormatNumber(cf.Raffle.CostPerTicket)
      print "@N@[@0F@ 3@N@]  @0F@Maximum Tickets Per Play     @08@: @0F@";FormatNumber(cf.Raffle.MaxTickets)
      print "@N@[@0F@ 4@N@]  @0F@Minimum Tickets Per Play     @08@: @0F@";FormatNumber(cf.Raffle.MinTickets)
      print "@N@[@0F@ 5@N@]  @0F@Current Jackpot Pays         @08@: @0F@";FormatNumber(cf.Raffle.CurJackPot)
      print "@N@[@0F@ 6@N@]  @0F@Raffle Odds (Per Cent)       @08@: @0F@";Str(cf.Raffle.RaffleOdds);"%"
      print "@N@[@0F@ 7@N@]  @0F@Minimum Jackpot Allowed      @08@: @0F@";FormatNumber(cf.Raffle.MinJackPot)
      print
      print "@N@[@0F@ H@N@]  @0F@Help On Options"
      print "@N@[@0F@ Q@N@]  @0F@Quit Raffle Settings"
      print 
      if NOT Regged then print "@04@Please register to enable options 2-7!"
      
      do
          RaffleChoice = ucase(CHR(readkey(100)))
          if RaffleChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop
      
      If NOT Regged then
         If ucase(RaffleChoice) <> "Q" and RaffleChoice <> "1" and RaffleChoice <> "H" then
            RaffleChoice = ""
         end if
      end if

      select case ucase(RaffleChoice)
         case "Q"
         
         case "H"
            cls
            DisplayFile "wc:\help\psttraf.bbs"
            Print
            Pause
         
         case "1"
            select case cf.Raffle.Disable
               case TRUE
                  cf.Raffle.Disable = FALSE
               case FALSE
                  cf.Raffle.Disable = TRUE
            end select
            WriteConfig
            
         case "2"
            dim TempCostPerTicket as string * 4
            Locate 5, 37
            Print "@0F@       ";
            locate 5,37
            do
               SetInitialString(STR(cf.Raffle.CostPerTicket))
               TempCostPerTicket = InputString(4)
               If TempCostPerTicket = "" then exit do
               If VAL(TempCostPerTicket) >= 0 and VAL(TempCostPerTicket) <= 65536 then
                  cf.Raffle.CostPerTicket = VAL(TempCostPerTicket)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "3"
            dim TempMaxTickets as string * 6
            Locate 6, 37
            Print "@0F@       ";
            locate 6,37
            do
               SetInitialString(STR(cf.Raffle.MaxTickets))
               TempMaxTickets = InputString(6)
               If TempMaxTickets = "" then exit do
               If VAL(TempMaxTickets) >= 0 and VAL(TempMaxTickets) <= 65536 then
                  cf.Raffle.MaxTickets = VAL(TempMaxTickets)                 
                  WriteConfig
                  exit do
               end if
            loop
            
         case "4"
            dim TempMinTickets as string * 6
            Locate 7, 37
            Print "@0F@       ";
            locate 7,37
            do
               SetInitialString(STR(cf.Raffle.MinTickets))
               TempMinTickets = InputString(6)
               If TempMinTickets = "" then exit do
               If VAL(TempMinTickets) >= 0 and VAL(TempMinTickets) <= 65536 then
                  cf.Raffle.MinTickets = VAL(TempMinTickets)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "5"
            dim TempCurJackPot as string * 6
            Locate 8, 37
            Print "@0F@       ";
            locate 8,37
            do
               SetInitialString(STR(cf.Raffle.CurJackPot))
               TempCurJackPot = InputString(6)
               If TempCurJackPot = "" then exit do
               If VAL(TempCurJackPot) >= 0 and VAL(TempCurJackPot) <= 65536 then
                  cf.Raffle.CurJackPot = VAL(TempCurJackPot)                 
                  WriteConfig
                  exit do
               end if
            loop

        case "6"
            dim TempRaffleOdds as string * 6
            Locate 9, 37
            Print "@0F@       ";
            locate 9,37
            do
               SetInitialString(STR(cf.Raffle.RaffleOdds))
               TempRaffleOdds = InputString(6)
               If TempRaffleOdds = "" then exit do
               If VAL(TempRaffleOdds) >= 0 and VAL(TempRaffleOdds) <= 65536 then
                  cf.Raffle.RaffleOdds = VAL(TempRaffleOdds)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "7"
            dim TempMinJackPot as string * 6
            Locate 10, 37
            Print "@0F@       ";
            locate 10,37
            do
               SetInitialString(STR(cf.Raffle.MinJackPot))
               TempMinJackPot = InputString(6)
               If TempMinJackPot = "" then exit do
               If VAL(TempMinJackPot) >= 0 and VAL(TempMinJackPot) <= 65536 then
                  cf.Raffle.MinJackPot = VAL(TempMinJackPot)
                  WriteConfig
                  exit do
               end if
            loop


      end select
loop

end sub

sub NumberGuessSettings

WriteActivityLogEntry("      * [Sysop Menu] Number Guess settings")

dim NGChoice as string * 1

do while NGChoice <> "Q"
      Cls
      print "@N@PS-TimeBank - Number Guess Settings         Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
      print "@N@[@0F@ 1@N@]  @0F@Disable Number Guess Game    @08@: @0F@";DispYesNo(cf.NumberGuess.Disable)
      print "@N@[@0F@ 2@N@]  @0F@Maximum Bet                  @08@: @0F@";FormatNumber(cf.NumberGuess.MaxBet)
      print "@N@[@0F@ 3@N@]  @0F@Minimum Bet                  @08@: @0F@";FormatNumber(cf.NumberGuess.Minbet)
      print "@N@[@0F@ 4@N@]  @0F@Highest Number               @08@: @0F@";FormatNumber(cf.NumberGuess.HighNum)
      print "@N@[@0F@ 5@N@]  @0F@Chances to Guess             @08@: @0F@";Str(cf.NumberGuess.Tries)
      print "@N@[@0F@ 6@N@]  @0F@First Try Pays               @08@: @0F@";Str(cf.NumberGuess.FirstTry);" Times Bet"
      print "@N@[@0F@ 7@N@]  @0F@Second Try Pays              @08@: @0F@";Str(cf.NumberGuess.SecondTry);" Times Bet"
      print "@N@[@0F@ 8@N@]  @0F@Third Try Pays               @08@: @0F@";Str(cf.NumberGuess.ThirdTry);" Times Bet"
      print "@N@[@0F@ 9@N@]  @0F@Forth or After Pays          @08@: @0F@";Str(cf.NumberGuess.After);" Times Bet"
      print
      print "@N@[@0F@ H@N@]  @0F@Help On Options"
      print "@N@[@0F@ Q@N@]  @0F@Quit Number Guess Settings"
      print 
      if NOT Regged then print "@04@Please register to enable options 2-9!"
      
      do
          NGChoice = ucase(CHR(readkey(100)))
          if NGChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop
      
      If NOT Regged then
         If ucase(NGChoice) <> "Q" and NGChoice <> "1" and NGChoice <> "H" then
            NGChoice = ""
         end if
      end if

      select case ucase(NGChoice)
         case "Q"
         
         case "H"
            cls
            DisplayFile "wc:\help\pstngame.bbs"
            Print
            Pause
         
         case "1"
            select case cf.NumberGuess.Disable
               case TRUE
                  cf.NumberGuess.Disable = FALSE
               case FALSE
                  cf.NumberGuess.Disable = TRUE
            end select
            WriteConfig
            
         case "2"
            dim TempMaxBet as string * 5
            Locate 5, 37
            Print "@0F@       ";
            locate 5,37
            do
               SetInitialString(STR(cf.NumberGuess.MaxBet))
               TempMaxBet = InputString(5)
               If TempMaxBet = "" then exit do
               If VAL(TempMaxBet) >= 0 and VAL(TempMaxBet) <= 65536 then
                  cf.NumberGuess.MaxBet = VAL(TempMaxBet)
                  WriteConfig
                  exit do
               end if
            loop
         
         case "3"
            dim TempMinBet as string * 5
            Locate 6, 37
            Print "@0F@       ";
            locate 6,37
            do
               SetInitialString(STR(cf.NumberGuess.MinBet))
               TempMinBet = InputString(6)
               If TempMinBet = "" then exit do
               If VAL(TempMinBet) >= 0 and VAL(TempMinBet) <= 65536 then
                  cf.NumberGuess.MinBet = VAL(TempMinBet)                 
                  WriteConfig
                  exit do
               end if
            loop
            
         case "4"
            dim TempHighNum as string * 6
            Locate 7, 37
            Print "@0F@       ";
            locate 7,37
            do
               SetInitialString(STR(cf.NumberGuess.HighNum))
               TempHighNum = InputString(6)
               If TempHighNum = "" then exit do
               If VAL(TempHighNum) >= 0 and VAL(TempHighNum) <= 65536 then
                  cf.NumberGuess.HighNum = VAL(TempHighNum)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "5"
            dim TempTries as string * 5
            Locate 8, 37
            Print "@0F@       ";
            locate 8,37
            do
               SetInitialString(STR(cf.NumberGuess.Tries))
               TempTries = InputString(5)
               If TempTries = "" then exit do
               If VAL(TempTries) >= 0 and VAL(TempTries) <= 65536 then
                  cf.NumberGuess.Tries = VAL(TempTries)                 
                  WriteConfig
                  exit do
               end if
            loop

        case "6"
            dim TempFirstTry as string * 3
            Locate 9, 37
            Print "@0F@                  ";
            locate 9,37
            do
               SetInitialString(STR(cf.NumberGuess.FirstTry))
               TempFirstTry = InputString(3)
               If TempFirstTry = "" then exit do
               If VAL(TempFirstTry) >= 0 and VAL(TempFirstTry) <= 65536 then
                  cf.NumberGuess.FirstTry = VAL(TempFirstTry)                 
                  WriteConfig
                  exit do
               end if
            loop

         case "7"
            dim TempSecondTry as string * 3
            Locate 10, 37
            Print "@0F@                  ";
            locate 10,37
            do
               SetInitialString(STR(cf.NumberGuess.SecondTry))
               TempSecondTry = InputString(3)
               If TempSecondTry = "" then exit do
               If VAL(TempSecondTry) >= 0 and VAL(TempSecondTry) <= 65536 then
                  cf.NumberGuess.SecondTry = VAL(TempSecondTry)                 
                  WriteConfig
                  exit do
               end if
            loop
            
         case "8"
            dim TempThirdTry as string * 3
            Locate 11, 37
            Print "@0F@                  ";
            locate 11,37
            do
               SetInitialString(STR(cf.NumberGuess.ThirdTry))
               TempThirdTry = InputString(3)
               If TempThirdTry = "" then exit do
               If VAL(TempThirdTry) >= 0 and VAL(TempThirdTry) <= 65536 then
                  cf.NumberGuess.ThirdTry = VAL(TempThirdTry)                 
                  WriteConfig
                  exit do
               end if
            loop
            
         case "9"
            dim TempAfter as string * 3
            Locate 12, 37
            Print "@0F@                  ";
            locate 12,37
            do
               SetInitialString(STR(cf.NumberGuess.After))
               TempAfter = InputString(3)
               If TempAfter = "" then exit do
               If VAL(TempAfter) >= 0 and VAL(TempAfter) <= 65536 then
                  cf.NumberGuess.After = VAL(TempAfter)                 
                  WriteConfig
                  exit do
               end if
            loop

      end select
loop

end sub

sub BankTime

  NumEntered = 0
  
  cls
  print "@N@Current Balance (Minutes)   @08@: @0F@";FormatNumber(td.BalanceMin)
  print "@N@Current Time Left Online    @08@: @0F@@USER.TIMELEFTTODAY@"
  print Bar(35,0,9)
  print
  
  if td.BalanceMin >= td.MaxBalanceMin then
     print "@N@You have already reached your maximum balance.  You cannot deposit anymore."
     print
     WriteActivityLogEntry("      * [Bank Time] Refused deposit - Max Balance reached")
     Pause
  else
     if GetMinutesRemaining <= (td.MaxBalanceMin - td.BalanceMin) then
        if AskYesNo("@N@Desposit all of your time and logoff?",FALSE) then
           td.BalanceMin = td.BalanceMin + GetMinutesRemaining
           ChangeUserTime(0)
           UpdateUser(User)
           WriteDB
           print "Thank you for calling...<click>"
           WriteActivityLogEntry("      * [Bank Time] All time banked, user logged off")
           hangup
         end if
     end if

     Print "@H@How many minutes do you wish to deposit? @N@";
     NumEntered = InputNumber
     if NumEntered > GetMinutesRemaining then
        print "You do not have ";FormatNumber(NumEntered);" minute";
        if NumEntered > 1 then print "s";
        print " left online!"
        Pause
     end if
     if NumEntered > 0 and NumEntered <= GetMinutesRemaining then
        if td.BalanceMin + NumEntered <= td.MaxBalanceMin then
           print
           print Bar(60,0,3)
           print "@0B@Deposit Receipt:"
           print "@0F@";FormatNumber(NumEntered);
           print " @N@minute";
           if NumEntered > 1 then 
              print "s have";
           else
              print " has";
           end if
           print " been deposited in your account.  Thank you."
           td.BalanceMin = td.BalanceMin + NumEntered
           ChangeUserTime(GetMinutesRemaining - NumEntered)
           print Bar(60,0,3)
           print
           Pause
           WriteActivityLogEntry("      * [Bank Time] Banked " + FormatNumber(NumEntered) + " minute(s).")
        else
           print
           print Bar(60,0,3)
           print "@0B@Deposit Receipt:"
           Print "@N@Since your maximum balance is @0B@";td.MaxBalanceMin;"@N@, only @0B@";FormatNumber(NumEntered - ((td.BalanceMin + NumEntered) - td.MaxBalanceMin));" @N@minute";
           if NumEntered - ((td.BalanceMin + NumEntered) - td.MaxBalanceMin) > 1 then 
              print "s were";
           else                                                                                                             
              print "was";   
           end if
           print " desposited."
           ChangeUserTime(GetMinutesRemaining - (NumEntered - ((td.BalanceMin + NumEntered) - td.MaxBalanceMin)))
           td.BalanceMin = td.BalanceMin + NumEntered - ((td.BalanceMin + NumEntered) - td.MaxBalanceMin)
           print Bar(60,0,3)                    
           print
           WriteActivityLogEntry("      * [Bank Time] Banked " + str(NumEntered - ((td.BalanceMin + NumEntered) - td.MaxBalanceMin)) + " minute(s).")
           Pause
        end if   
        
     end if

     UpdateUser(user)
     WriteDB
  end if

end sub

sub WithdrawTime
 
  NumEntered = 0
  
  cls
  print "@N@Current Balance (Minutes)   @08@: @0F@";FormatNumber(td.BalanceMin)
  print "@N@Current Time Left Online    @08@: @0F@@USER.TIMELEFTTODAY@"
  print Bar(35,0,9)
  print
  
  if AskYesNo("@N@Withdraw all of your time and return to BBS?",FALSE) then
     ChangeUserTime(GetMinutesRemaining + td.BalanceMin)
     td.BalanceMin = 0
     UpdateUser(User)
     WriteDB
     WriteActivityLogEntry("      * [Withdraw Time] Withdrew all time and quit")
     end
  end if

  Print "@H@How many minutes do you wish to withdraw? @N@";
  NumEntered = InputNumber
  if NumEntered > td.BalanceMin then
     print "You do not have ";FormatNumber(NumEntered);" minute";
     if NumEntered > 1 then print "s";
     print " in your account!"
     Pause
  end if
  if NumEntered > 0 and NumEntered <= td.BalanceMin and (GetMinutesRemaining - 1 + NumEntered) <= td.MaxMinLeftOnline then
     print
     print Bar(60,0,3)
     print "@H@Withdrawal Receipt:"
     print "@0F@";FormatNumber(NumEntered);
          print " @N@minute";
     if NumEntered > 1 then 
        print "s have";
     else
        print " has";
     end if
     print " been withdrawn from your account.  Thank you."
     td.BalanceMin = td.BalanceMin - NumEntered
     ChangeUserTime(GetMinutesRemaining + NumEntered)
     print "@N@You now have @0F@";FormatNumber(GetMinutesRemaining - 1);" @N@minute";
     if GetMinutesRemaining > 1 then 
        print "s";
     end if
     print " remaining online."
     print Bar(60,0,3)
     print
     Pause
     UpdateUser(user)
     WriteDB
     WriteActivityLogEntry("      * [Withdraw Time] Withdrew " + FormatNumber(NumEntered) + " minute(s).")
  elseif NumEntered > 0 and NumEntered <= td.BalanceMin and (GetMinutesRemaining - 1 + NumEntered) > td.MaxMinLeftOnline then
     print "@N@You are not aloud to exceed @0F@";str(td.MaxMinLeftOnline);"@N@ Minutes left online."
     WriteActivityLogEntry("      * [Withdraw Time] Withdrawal denied (Exceeds max time online)")
     Pause
  end if

end sub

sub GambleTime

dim GambleChoice as string * 1

do

  displayfile "wc:\menu\pstgamb.bbs"

    do
        GambleChoice = ucase(CHR(readkey(100)))
        if GambleChoice = "R" or GambleChoice = "N" or GambleChoice = "H" or GambleChoice = "B" or GambleChoice = "Q" then
           exit do
        end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

    loop

      select case ucase(GambleChoice)
         case "R"
           If not cf.Raffle.Disable then 
              Raffle
           else
              cls
              print "@0F@Raffle Disabled"
              print Bar(35,0,9)              
              Print "@N@The sysop has disabled the raffle game..."
              print
              Pause
           end if
         case "N"
           If not cf.NumberGuess.Disable then 
              NumberGuess
           else
              cls
              print "@0F@Number Guess Disabled"
              print Bar(35,0,9)              
              Print "@N@The sysop has disabled the number guess game..."
              print
              Pause
           end if
         case "H"
           If not cf.HorseRace.Disable then 
              HorseRace
           else
              cls
              print "@0F@Track Closed Today"
              print Bar(35,0,9)              
              Print "@N@The sysop has disabled the horse race game..."
              print
              Pause
           end if
         case "B"
           If not cf.CardGame.Disable then 
              CardGame
           else
              cls
              print "@0F@Blackjack Disabled"
              print Bar(35,0,9)              
              Print "@N@The sysop has disabled the Blackjack Game..."
              print
              Pause
           end if
         case "Q"
           exit do
      end select               
loop

end sub

sub Stats

   dim TotalUsers as short = 0
   dim TotalTime as short = 0
   dim TotalMinutesLost as Word
   dim TotalMinutesWon as Word
     
   dim TempStat as UserDatabase
        
   open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
   
   for looper = 1 to lof(1)
      get #1, looper, TempStat
      if TempStat.RecordID > 0 then
         inc(TotalUsers)
         TotalTime = TotalTime + TempStat.BalanceMin
         TotalMinutesLost = TotalMinutesLost + TempStat.MinutesLost
         TotalMinutesWon = TotalMinutesWon + TempStat.MinutesWon
      end if
   next looper
   close #1

Cls
Print "@0F@PS-TimeBank 1.0";chr(225);" (c) 1999 Mike Christensen"
Print "@0F@Written by Mike Christensen (hiawatha@piscessoft.com)"
print Bar(60,0,3)
print
print "@09@Registered To               @08@: ";
If NOT regged then
   print "@04@UNREGISTERED EVALUATION COPY"
else
   Print "@0F@@SYSTEM.BBSNAME@"
end if
print
print "@09@User Accounts               @08@: @0F@";FormatNumber(TotalUsers)
print "@09@Total Time In Vault         @08@: @0F@";FormatNumber(TotalTime);" Minute";
if TotalTime > 1 then 
   print "s"
else
   print
end if
    
print
print "@09@Total Minutes Lost Gambling @08@: @0F@";FormatNumber(TotalMinutesLost);" Minute";
if TotalMinutesLost > 1 then 
   print "s"
else
   print
end if
print "@09@Total Minutes Won Gambling  @08@: @0F@";FormatNumber(TotalMinutesWon);" Minute";
if TotalMinutesWon > 1 then 
   print "s"
else
   print
end if
print "@09@Times this program was used @08@: @0F@";FormatNumber(cf.TimesRan)
print Bar(60,0,3)
print
Pause

end sub

sub UserEditor

WriteActivityLogEntry("      * [Sysop Menu] Entered User Editor")

dim UserToEdit as UserDatabase

cls

   dim u as TUser
   dim tid as Integer = 0
   dim id as string
   
   dim EditChoice as string * 1
   dim EditChoiceSys as string * 1
   dim Accounts as integer
   dim EndModSys as boolean
   
   looper = 1
 
   do while UCASE(EditChoice) <> "Q"
      open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
         get #1, looper, UserToEdit
         Accounts = lof(1)
      close #1
      cls
      if GetUserById(abs(UserToEdit.RecordId), u, tid) then
         If UserToEdit.RecordID > 0 then SubText(1) = UpperLower(u.info.name)
         If UserToEdit.RecordID <= 0 then SubText(1) = UpperLower(u.info.name) + " (D)"
      else
         SubText(1) = "No Database Match!"
      end if

      print "@N@User Name@08@: @0F@@SUB1:22@ @N@Record Number@08@: @0F@";looper;"@07@/@0F@";Accounts
      print Bar(55,0,9)
      Print
      print "@N@[@08@  @N@]  @0F@User ID                     @08@: @0F@";
      If UserToEdit.RecordID > 0 then
         print UserToEdit.RecordID
      else
         print "@07@<Deleted>"
      end if
      print "@N@[@0F@ 1@N@]  @0F@Balance (Minutes)           @08@: @0F@";FormatNumber(UserToEdit.BalanceMin)
      print "@N@[@0F@ 2@N@]  @0F@Balance (Kilobytes)         @08@: @0F@";FormatNumber(UserToEdit.BalanceK)
      print "@N@[@0F@ 3@N@]  @0F@Balance (Downloads)         @08@: @0F@";FormatNumber(UserToEdit.BalanceDL)
      print "@N@[@0F@ 4@N@]  @0F@Max. Balance (Minutes)      @08@: @0F@";FormatNumber(UserToEdit.MaxBalanceMin)
      print "@N@[@0F@ 5@N@]  @0F@Max. Balance (Kilobytes)    @08@: @0F@";FormatNumber(UserToEdit.MaxBalanceK)
      print "@N@[@0F@ 6@N@]  @0F@Max. Balance (Downloads)    @08@: @0F@";FormatNumber(UserToEdit.MaxBalanceDL)
      print "@N@[@0F@ 7@N@]  @0F@Maximum Minutes Left Online @08@: @0F@";FormatNumber(UserToEdit.MaxMinLeftOnline)
      print "@N@[@0F@ 8@N@]  @0F@Minutes Lost Gambling       @08@: @0F@";FormatNumber(UserToEdit.MinutesLost)
      print "@N@[@0F@ 9@N@]  @0F@Minutes Won Gambling        @08@: @0F@";FormatNumber(UserToEdit.MinutesWon)
      print "@N@[@0F@ A@N@]  @0F@User Locked Out?            @08@: @0F@";DispYesNo(UserToEdit.LockedOut)
      print "@N@[@0F@ B@N@]  @0F@Cannot Deposit Minutes?     @08@: @0F@";DispYesNo(UserToEdit.NoDepositMin)
      print "@N@[@0F@ C@N@]  @0F@Cannot Deposit Kilobytes?   @08@: @0F@";DispYesNo(UserToEdit.NoDepositK)
      print "@N@[@0F@ D@N@]  @0F@Cannot Deposit Downloads?   @08@: @0F@";DispYesNo(UserToEdit.NoDepositDL)
      print "@N@[@0F@ E@N@]  @0F@Sysop Access in Time Bank?  @08@: @0F@";DispYesNo(UserToEdit.TimeDoorMod)
      If UserToEdit.TimeDoorMod then
         print "@N@[@0F@ F@N@]  @0F@Sysop Access Settings       @08@: @0F@[";SysopAccessSetDisp(UserToEdit.TimeDoorModSet);"@0F@]"
      else
         print "@N@[@07@ F@N@]  @07@Sysop Access Settings       @08@: @07@[";SysopAccessSetDisp(UserToEdit.TimeDoorModSet);"@07@]"
      end if
      print "@N@[@0F@ G@N@]  @0F@Allow Gamble (Override)     @08@: @0F@";DispYesNo(UserToEdit.OverrideGamble)
      print "@N@[@0F@ H@N@]  @0F@Deny Gamble (Override)      @08@: @0F@";DispYesNo(UserToEdit.CantGamble)

      print 
      Print "@N@[@0F@1@07@..@0F@G@N@], [@0F@N@N@]ew Account, [@0F@K@N@]ill/Restore, [@0F@S@N@]earch, [@0F@?@N@] Help, [@0F@[@N@] Prev, [@0F@]@N@] Next"
      print "[@0F@Q@N@]uit, [@0F@U@N@]ser Editor (Wildcat!) @08@: @0F@";

      do
          EditChoice = ucase(CHR(readkey(100)))
          if EditChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop

      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and EditChoice = "E" then EditChoice = ""
      if GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 and EditChoice = "F" then EditChoice = ""
      
      select case ucase(EditChoice)
         case "1"
            dim TempBalanceMin as string * 7
            Locate 5, 36
            Print "@0F@                     ";
            locate 5,36
            SetInitialString(str(UserToEdit.BalanceMin))
            TempBalanceMin = InputString(7)
            If TempBalanceMin <> "" and Val(TempBalanceMin) <= 65536 then
               UserToEdit.BalanceMin = Val(TempBalanceMin)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "2"
            dim TempBalanceK as string * 7
            Locate 6, 36
            Print "@0F@                     ";
            locate 6,36
            SetInitialString(str(UserToEdit.BalanceK))
            TempBalanceK = InputString(7)
            If TempBalanceK <> "" and Val(TempBalanceK) <= 65536 then
               UserToEdit.BalanceK = Val(TempBalanceK)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "3"
            dim TempBalanceDL as string * 7
            Locate 7, 36
            Print "@0F@                     ";
            locate 7,36
            SetInitialString(str(UserToEdit.BalanceDL))
            TempBalanceDL = InputString(7)
            If TempBalanceDL <> "" and Val(TempBalanceDL) <= 65536 then
               UserToEdit.BalanceDL = Val(TempBalanceDL)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "4"
            dim TempMaxBalanceMin as string * 7
            Locate 8, 36
            Print "@0F@                     ";
            locate 8,36
            SetInitialString(str(UserToEdit.MaxBalanceMin))
            TempMaxBalanceMin = InputString(7)
            If TempMaxBalanceMin <> "" and Val(TempMaxBalanceMin) <= 65536 then
               UserToEdit.MaxBalanceMin = Val(TempMaxBalanceMin)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "5"
            dim TempMaxBalanceK as string * 7
            Locate 9, 36
            Print "@0F@                     ";
            locate 9,36
            SetInitialString(str(UserToEdit.MaxBalanceK))
            TempMaxBalanceK = InputString(7)
            If TempMaxBalanceK <> "" and Val(TempMaxBalanceK) <= 65536 then
               UserToEdit.MaxBalanceK = Val(TempMaxBalanceK)
               WriteUserDB(Looper, UserToEdit)
            end if
         
         case "6"
            dim TempMaxBalanceDL as string * 7
            Locate 10, 36
            Print "@0F@                     ";
            locate 10,36
            SetInitialString(str(UserToEdit.MaxBalanceDL))
            TempMaxBalanceDL = InputString(7)
            If TempMaxBalanceDL <> "" and Val(TempMaxBalanceDL) <= 65536 then
               UserToEdit.MaxBalanceDL = Val(TempMaxBalanceDL)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "7"
            dim TempMaxMinLeftOnline as string * 7
            Locate 11, 36
            Print "@0F@                     ";
            locate 11,36
            SetInitialString(str(UserToEdit.MaxMinLeftOnline))
            TempMaxMinLeftOnline = InputString(7)
            If TempMaxMinLeftOnline <> "" and Val(TempMaxMinLeftOnline) <= 65536 then
               UserToEdit.MaxMinLeftOnline = Val(TempMaxMinLeftOnline)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "8"
            dim TempMinutesLost as string * 7
            Locate 12, 36
            Print "@0F@                     ";
            locate 12,36
            SetInitialString(str(UserToEdit.MinutesLost))
            TempMinutesLost = InputString(7)
            If TempMinutesLost <> "" and Val(TempMinutesLost) <= 65536 then
               UserToEdit.MinutesLost = Val(TempMinutesLost)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "9"
            dim TempMinutesWon as string * 7
            Locate 13, 36
            Print "@0F@                     ";
            locate 13,36
            SetInitialString(str(UserToEdit.MinutesWon))
            TempMinutesWon = InputString(7)
            If TempMinutesWon <> "" and Val(TempMinutesWon) <= 65536 then
               UserToEdit.MinutesWon = Val(TempMinutesWon)
               WriteUserDB(Looper, UserToEdit)
            end if
         case "A"
            select case UserToEdit.LockedOut
               case FALSE
                  UserToEdit.LockedOut = TRUE
               case TRUE
                  UserToEdit.LockedOut = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)

         case "B"
            select case UserToEdit.NoDepositMin
               case FALSE
                  UserToEdit.NoDepositMin = TRUE
               case TRUE
                  UserToEdit.NoDepositMin = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "C"
            select case UserToEdit.NoDepositK
               case FALSE
                  UserToEdit.NoDepositK = TRUE
               case TRUE
                  UserToEdit.NoDepositK = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "D"
            select case UserToEdit.NoDepositDL
               case FALSE
                  UserToEdit.NoDepositDL = TRUE
               case TRUE
                  UserToEdit.NoDepositDL = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "E"
            select case UserToEdit.TimeDoorMod
               case FALSE
                  UserToEdit.TimeDoorMod = TRUE
               case TRUE
                  UserToEdit.TimeDoorMod = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "F"
            EditChoiceSys = ""
            EndModSys = FALSE
            
            do while NOT EndModSys
               Locate 4,50 : print "@N@[@0F@ 1@N@]  @0F@User Editor    @08@: @0F@";DispYesNo(UserToEdit.TimeDoorModSet.UserEditor);" ";
               Locate 5,50 : print "@N@[@0F@ 2@N@]  @0F@Modify Time    @08@: @0F@";DispYesNo(UserToEdit.TimeDoorModSet.AllowTimeModify);" ";
               Locate 6,50 : print "@N@[@0F@ 3@N@]  @0F@Delete Users   @08@: @0F@";DispYesNo(UserToEdit.TimeDoorModSet.DeleteUsers);" ";
               Locate 7,50 : print "@N@[@0F@ 4@N@]  @0F@WC Database    @08@: @0F@";DispYesNo(UserToEdit.TimeDoorModSet.WCUserDB);" ";
               Locate 8,50 : print "@N@[@0F@ 5@N@]  @0F@Configuration  @08@: @0F@";DispYesNo(UserToEdit.TimeDoorModSet.Configure);" ";
               Locate 9,50 : print "@N@[@0F@ Q@N@]  @0F@Quit To Editor"
            
               do
                  EditChoiceSys = ucase(CHR(readkey(100)))
                  if EditChoiceSys <> "" then
                     exit do
                  end if
               loop
               
               select case EditChoiceSys
                  case "1"
                     select case UserToEdit.TimeDoorModSet.UserEditor
                        case FALSE
                           UserToEdit.TimeDoorModSet.UserEditor = TRUE
                        case TRUE
                           UserToEdit.TimeDoorModSet.UserEditor = FALSE
                     end select
                     WriteUserDB(Looper, UserToEdit)
                  case "2"
                     select case UserToEdit.TimeDoorModSet.AllowTimeModify
                        case FALSE
                           UserToEdit.TimeDoorModSet.AllowTimeModify = TRUE
                        case TRUE
                           UserToEdit.TimeDoorModSet.AllowTimeModify = FALSE
                     end select
                     WriteUserDB(Looper, UserToEdit)
                  case "3"
                     select case UserToEdit.TimeDoorModSet.DeleteUsers
                        case FALSE
                           UserToEdit.TimeDoorModSet.DeleteUsers = TRUE
                        case TRUE
                           UserToEdit.TimeDoorModSet.DeleteUsers = FALSE
                     end select
                     WriteUserDB(Looper, UserToEdit)
                  case "4"
                     select case UserToEdit.TimeDoorModSet.WCUserDB
                        case FALSE
                           UserToEdit.TimeDoorModSet.WCUserDB = TRUE
                        case TRUE
                           UserToEdit.TimeDoorModSet.WCUserDB = FALSE
                     end select
                     WriteUserDB(Looper, UserToEdit)
                  case "5"
                     select case UserToEdit.TimeDoorModSet.Configure
                        case FALSE
                           UserToEdit.TimeDoorModSet.Configure = TRUE
                        case TRUE
                           UserToEdit.TimeDoorModSet.Configure = FALSE
                     end select
                     WriteUserDB(Looper, UserToEdit)
                  case "Q", Chr(13)
                     Locate 4,50 : print string(29, 32);
                     Locate 5,50 : print string(29, 32);
                     Locate 6,50 : print string(29, 32);
                     Locate 7,50 : print string(29, 32);
                     Locate 8,50 : print string(29, 32);
                     Locate 9,50 : print string(29, 32);
                     EndModSys = TRUE
                     
               end select
            loop
         
         case "G"
            select case UserToEdit.OverrideGamble
               case FALSE
                  UserToEdit.CantGamble = FALSE
                  UserToEdit.OverrideGamble = TRUE
               case TRUE
                  UserToEdit.OverrideGamble = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "H"
            select case UserToEdit.CantGamble
               case FALSE
                  UserToEdit.OverrideGamble = FALSE
                  UserToEdit.CantGamble = TRUE
               case TRUE
                  UserToEdit.CantGamble = FALSE
            end select
            WriteUserDB(Looper, UserToEdit)
         case "?"
            Cls
            DisplayFile "wc:\help\PSTUser.BBS"
            Print
            Pause
         
         case "N"
         
            WriteActivityLogEntry("      * [User Editor] Created new account")
         
            dim NAccount as UserDatabase
            dim TempUser as TUser
            dim TempUserId as integer
            dim EnterName as string * 25
            
            do
               cls
               Print "@0F@Add New User"
               print Bar(35,0,9)
               Print
               Print "@N@Enter Wildcat! User Name @08@: @0F@";
               
               EnterName = InputString(25)
               If Trim(EnterName) = "" then exit do
               
               if GetUserByName(EnterName, TempUser, TempUserId) then
         
                  NAccount.RecordID = TempUser.info.id
                  NAccount.BalanceMin = cf.DefaultUser.StartBalM
                  NAccount.BalanceK = cf.DefaultUser.StartBalK
                  NAccount.BalanceDL = cf.DefaultUser.StartBalDL
                  NAccount.MaxBalanceMin = cf.DefaultUser.MaxBalM
                  NAccount.MaxBalanceK = cf.DefaultUser.MaxBalK
                  NAccount.MaxBalanceDL = cf.DefaultUser.MaxBalDL
                  NAccount.MaxMinLeftOnline = cf.DefaultUser.MaxTimeLeft
                  NAccount.MinutesLost = 0
                  NAccount.MinutesWon = 0
                  NAccount.LockedOut = cf.DefaultUser.LockedOut
                  NAccount.NoDepositMin = cf.DefaultUser.NoDepMin
                  NAccount.NoDepositK = cf.DefaultUser.NoDepK
                  NAccount.NoDepositDL = cf.DefaultUser.NoDepDL
                  NAccount.TimeDoorMod = cf.DefaultUser.SysopAccess
                  NAccount.TimeDoorModSet.UserEditor = cf.DefaultUser.SysopAccessSet.UserEditor
                  NAccount.TimeDoorModSet.AllowTimeModify = cf.DefaultUser.SysopAccessSet.AllowTimeModify
                  NAccount.TimeDoorModSet.DeleteUsers = cf.DefaultUser.SysopAccessSet.DeleteUsers
                  NAccount.TimeDoorModSet.WCUserDB = cf.DefaultUser.SysopAccessSet.WCUserDB
                  NAccount.TimeDoorModSet.Configure = cf.DefaultUser.SysopAccessSet.Configure

                  inc(Accounts)
                  Looper = Accounts

                  open "wc:\data\pstime.dat" for random as #1  len=len(UserDatabase)
                     put #1, Accounts, NAccount
                  close #1
                  
                  exit do
               
               else
                  Print "Invalid name."
                  Pause
               end if
            loop
            
         case "S"
            dim CurrentSearch as integer
            dim NameToSearch as string * 26
            dim SearchFound as boolean
            dim CurRec as UserDatabase
            dim CurWCRec as tuser
            dim CurUserId as integer
            
            SearchFound = FALSE
            
            do
               Cls
               Print "@0F@Search User Database"
               print Bar(35,0,9)  
               Print
               Print "Enter user name to search for: ";
               
               NameToSearch = InputString(26)
               
               if GetUserByName(NameToSearch, CurWCRec, CurUserId) then
               
                  If Trim(NameToSearch) = "" then exit do
               
                  open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
                  for CurrentSearch = looper + 1 to Accounts
                     get #1, CurrentSearch, CurRec
                     if CurRec.RecordID = CurWCRec.info.id then 
                        SearchFound = TRUE
                        Looper = CurrentSearch
                        exit for
                     end if
                  next CurrentSearch
                  
                  If SearchFound then 
                     close #1
                     exit do
                  end if

                  for CurrentSearch = 1 to looper
                     get #1, CurrentSearch, CurRec
                     if CurRec.RecordID = CurWCRec.info.id then 
                        SearchFound = TRUE
                        Looper = CurrentSearch
                        exit for
                     end if
                  next CurrentSearch
                  
                  close #1
                  exit do
               else
                  exit do
               end if
            loop
            If SearchFound = FALSE and Trim(NameToSearch) <> "" then
               Cls
               Print "@0F@Not Found"
               print Bar(35,0,9)  
               Print "@0F@";trim(NameToSearch);"@N@ was not found in the Time Bank Database."
               print
               Pause
            end if
         case "K"
            WriteActivityLogEntry("      * [User Editor] Deleted/Restored account " + str(Looper) + ".")
            If td.TimeDoorModSet.DeleteUsers or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then
               UserToEdit.RecordID = -1 * UserToEdit.RecordID
               WriteUserDB(Looper, UserToEdit)
            end if
         case "]"
            if Looper < Accounts then
               inc(Looper)
            else
               Looper = 1
            end if
            
         case "["
            if Looper > 1 then
               dec(Looper)
            else
               Looper = Accounts
            end if
         
         case "U"
            If td.TimeDoorModSet.WCUserDB or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then 
               If UserToEdit.RecordID > 0 then
                  run "Sysop User Editor",Str(UserToEdit.RecordID)
               end if
            end if
            
         case CHR(13)
            if Looper < Accounts then
               inc(Looper)
            else
               Looper = 1
            end if
         
      end select
   
   loop
end sub

sub Bulletins
   WriteActivityLogEntry("      * [Sysop Menu] Entered Bulletin Settings")
   
   ReadBullConfig
   
   dim BulletinChoice as string * 1
   dim TempTopNumber as string * 5
   
   do while BulletinChoice <> "Q"
         
         Cls
         print "@N@PS-TimeBank Bulletin Settings               Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
         print Bar(60,0,9)
         Print
   
         print "@N@[@0F@ 1@N@]  @0F@Most Time Won          (ANSI) @08@: @0F@";trim(bull.MostTimeWonAnsi.Path)
         print "@N@[@0F@ 2@N@]  @0F@Most Time Lost         (ANSI) @08@: @0F@";trim(bull.MostTimeLostAnsi.Path)
         print "@N@[@0F@ 3@N@]  @0F@Most Time in Bank      (ANSI) @08@: @0F@";trim(bull.MostTimeInBankAnsi.Path)
         print "@N@[@0F@ 4@N@]  @0F@Most Kilobytes in Bank (ANSI) @08@: @0F@";trim(bull.MostKilobytesInBankAnsi.Path)
         print "@N@[@0F@ 5@N@]  @0F@Most Downloads in Bank (ANSI) @08@: @0F@";trim(bull.MostDownloadsInBankAnsi.Path)
         print
         print "@N@[@0F@ 6@N@]  @0F@Most Time Won          (HTML) @08@: @0F@";trim(bull.MostTimeWonHTML.Path)
         print "@N@[@0F@ 7@N@]  @0F@Most Time Lost         (HTML) @08@: @0F@";trim(bull.MostTimeLostHTML.Path)
         print "@N@[@0F@ 8@N@]  @0F@Most Time in Bank      (HTML) @08@: @0F@";trim(bull.MostTimeInBankHTML.Path)
         print "@N@[@0F@ 9@N@]  @0F@Most Kilobytes in Bank (HTML) @08@: @0F@";trim(bull.MostKilobytesInBankHTML.Path)
         print "@N@[@0F@ 0@N@]  @0F@Most Downloads in Bank (HTML) @08@: @0F@";trim(bull.MostDownloadsInBankHTML.Path)
         print
         print "@N@[@0F@ A@N@]  @0F@Bulletins Option in Time Bank @08@: @0F@";DispYesNo(bull.BullOps)
         print
         print "@N@[@0F@ H@N@]  @0F@Help on Bulletin Options"
         print "@N@[@0F@ Q@N@]  @0F@Quit Bulletins Setup"
         print 
   
         do
             BulletinChoice = ucase(CHR(readkey(100)))
             if BulletinChoice <> "" then
                exit do
             end if
   
           do while ReadChannel(0, msg)
              ProcessChannelMessage(msg)
           loop
   
         loop
   
         select case ucase(BulletinChoice)
            case "Q"
            
            case "A"
               select case bull.BullOps
                  case TRUE
                     bull.BullOps = FALSE
                  case FALSE
                     bull.BullOps = TRUE
               end select
               
            case "1"
               dim MostTimeWonAnsiChoice as string * 1
               
               MostTimeWonAnsiChoice = ""
               
               do while MostTimeWonAnsiChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time Won (ANSI) Bulletin   Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeWonAnsi.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeWonAnsi.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeWonAnsi.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeWonAnsi.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeWonAnsi.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeWonAnsiChoice = ucase(CHR(readkey(100)))
                      if MostTimeWonAnsiChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeWonAnsiChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeWonAnsi.Path)
                        bull.MostTimeWonAnsi.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeWonAnsi.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeWonAnsi.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeWonAnsi.ExcludeSysop
                           case TRUE
                              bull.MostTimeWonAnsi.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeWonAnsi.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeWonAnsi.Header)
                        bull.MostTimeWonAnsi.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeWonAnsi.Footer)
                        bull.MostTimeWonAnsi.Footer = trim(InputString(55))
   
                  end select
               loop
            
            case "2"
               dim MostTimeLostAnsiChoice as string * 1
               
               MostTimeLostAnsiChoice = ""
               
               do while MostTimeLostAnsiChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time Lost (ANSI) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeLostAnsi.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeLostAnsi.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeLostAnsi.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeLostAnsi.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeLostAnsi.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeLostAnsiChoice = ucase(CHR(readkey(100)))
                      if MostTimeLostAnsiChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeLostAnsiChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeLostAnsi.Path)
                        bull.MostTimeLostAnsi.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeLostAnsi.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeLostAnsi.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeLostAnsi.ExcludeSysop
                           case TRUE
                              bull.MostTimeLostAnsi.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeLostAnsi.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeLostAnsi.Header)
                        bull.MostTimeLostAnsi.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeLostAnsi.Footer)
                        bull.MostTimeLostAnsi.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "3"
               dim MostTimeInBankAnsiChoice as string * 1
               
               MostTimeInBankAnsiChoice = ""
               
               do while MostTimeInBankAnsiChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time In Bank (ANSI) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(63,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeInBankAnsi.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeInBankAnsi.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeInBankAnsi.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeInBankAnsi.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeInBankAnsi.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeInBankAnsiChoice = ucase(CHR(readkey(100)))
                      if MostTimeInBankAnsiChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeInBankAnsiChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeInBankAnsi.Path)
                        bull.MostTimeInBankAnsi.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeInBankAnsi.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeInBankAnsi.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeInBankAnsi.ExcludeSysop
                           case TRUE
                              bull.MostTimeInBankAnsi.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeInBankAnsi.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeInBankAnsi.Header)
                        bull.MostTimeInBankAnsi.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeInBankAnsi.Footer)
                        bull.MostTimeInBankAnsi.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "4"
               dim MostKilobytesInBankAnsiChoice as string * 1
               
               MostKilobytesInBankAnsiChoice = ""
               
               do while MostKilobytesInBankAnsiChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most K In Bank (ANSI) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostKilobytesInBankAnsi.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostKilobytesInBankAnsi.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostKilobytesInBankAnsi.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostKilobytesInBankAnsi.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostKilobytesInBankAnsi.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostKilobytesInBankAnsiChoice = ucase(CHR(readkey(100)))
                      if MostKilobytesInBankAnsiChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostKilobytesInBankAnsiChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostKilobytesInBankAnsi.Path)
                        bull.MostKilobytesInBankAnsi.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostKilobytesInBankAnsi.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostKilobytesInBankAnsi.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostKilobytesInBankAnsi.ExcludeSysop
                           case TRUE
                              bull.MostKilobytesInBankAnsi.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostKilobytesInBankAnsi.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostKilobytesInBankAnsi.Header)
                        bull.MostKilobytesInBankAnsi.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostKilobytesInBankAnsi.Footer)
                        bull.MostKilobytesInBankAnsi.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "5"
               dim MostDownloadsInBankAnsiChoice as string * 1
               
               MostDownloadsInBankAnsiChoice = ""
               
               do while MostDownloadsInBankAnsiChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Downloads In Bank (ANSI) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(68,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostDownloadsInBankAnsi.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostDownloadsInBankAnsi.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostDownloadsInBankAnsi.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostDownloadsInBankAnsi.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostDownloadsInBankAnsi.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostDownloadsInBankAnsiChoice = ucase(CHR(readkey(100)))
                      if MostDownloadsInBankAnsiChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostDownloadsInBankAnsiChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostDownloadsInBankAnsi.Path)
                        bull.MostDownloadsInBankAnsi.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostDownloadsInBankAnsi.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostDownloadsInBankAnsi.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostDownloadsInBankAnsi.ExcludeSysop
                           case TRUE
                              bull.MostDownloadsInBankAnsi.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostDownloadsInBankAnsi.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostDownloadsInBankAnsi.Header)
                        bull.MostDownloadsInBankAnsi.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostDownloadsInBankAnsi.Footer)
                        bull.MostDownloadsInBankAnsi.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "6"
               dim MostTimeWonHTMLChoice as string * 1
               
               MostTimeWonHTMLChoice = ""
               
               do while MostTimeWonHTMLChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time Won (HTML) Bulletin   Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeWonHTML.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeWonHTML.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeWonHTML.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeWonHTML.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeWonHTML.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeWonHTMLChoice = ucase(CHR(readkey(100)))
                      if MostTimeWonHTMLChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeWonHTMLChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeWonHTML.Path)
                        bull.MostTimeWonHTML.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeWonHTML.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeWonHTML.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeWonHTML.ExcludeSysop
                           case TRUE
                              bull.MostTimeWonHTML.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeWonHTML.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeWonHTML.Header)
                        bull.MostTimeWonHTML.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeWonHTML.Footer)
                        bull.MostTimeWonHTML.Footer = trim(InputString(55))
   
                  end select
               loop
            
            case "7"
               dim MostTimeLostHTMLChoice as string * 1
               
               MostTimeLostHTMLChoice = ""
               
               do while MostTimeLostHTMLChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time Lost (HTML) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeLostHTML.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeLostHTML.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeLostHTML.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeLostHTML.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeLostHTML.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeLostHTMLChoice = ucase(CHR(readkey(100)))
                      if MostTimeLostHTMLChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeLostHTMLChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeLostHTML.Path)
                        bull.MostTimeLostHTML.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeLostHTML.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeLostHTML.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeLostHTML.ExcludeSysop
                           case TRUE
                              bull.MostTimeLostHTML.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeLostHTML.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeLostHTML.Header)
                        bull.MostTimeLostHTML.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeLostHTML.Footer)
                        bull.MostTimeLostHTML.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "8"
               dim MostTimeInBankHTMLChoice as string * 1
               
               MostTimeInBankHTMLChoice = ""
               
               do while MostTimeInBankHTMLChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Time In Bank (HTML) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(63,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostTimeInBankHTML.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostTimeInBankHTML.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostTimeInBankHTML.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostTimeInBankHTML.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostTimeInBankHTML.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostTimeInBankHTMLChoice = ucase(CHR(readkey(100)))
                      if MostTimeInBankHTMLChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostTimeInBankHTMLChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostTimeInBankHTML.Path)
                        bull.MostTimeInBankHTML.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostTimeInBankHTML.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostTimeInBankHTML.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostTimeInBankHTML.ExcludeSysop
                           case TRUE
                              bull.MostTimeInBankHTML.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostTimeInBankHTML.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostTimeInBankHTML.Header)
                        bull.MostTimeInBankHTML.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostTimeInBankHTML.Footer)
                        bull.MostTimeInBankHTML.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "9"
               dim MostKilobytesInBankHTMLChoice as string * 1
               
               MostKilobytesInBankHTMLChoice = ""
               
               do while MostKilobytesInBankHTMLChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most K In Bank (HTML) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(60,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostKilobytesInBankHTML.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostKilobytesInBankHTML.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostKilobytesInBankHTML.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostKilobytesInBankHTML.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostKilobytesInBankHTML.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostKilobytesInBankHTMLChoice = ucase(CHR(readkey(100)))
                      if MostKilobytesInBankHTMLChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostKilobytesInBankHTMLChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostKilobytesInBankHTML.Path)
                        bull.MostKilobytesInBankHTML.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostKilobytesInBankHTML.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostKilobytesInBankHTML.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostKilobytesInBankHTML.ExcludeSysop
                           case TRUE
                              bull.MostKilobytesInBankHTML.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostKilobytesInBankHTML.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostKilobytesInBankHTML.Header)
                        bull.MostKilobytesInBankHTML.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostKilobytesInBankHTML.Footer)
                        bull.MostKilobytesInBankHTML.Footer = trim(InputString(55))
   
                  end select
               loop
   
            case "0"
               dim MostDownloadsInBankHTMLChoice as string * 1
               
               MostDownloadsInBankHTMLChoice = ""
               
               do while MostDownloadsInBankHTMLChoice <> "Q"
   
                  Cls
                  print "@N@PS-TimeBank Most Downloads In Bank (HTML) Bulletin  Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
                  print Bar(68,0,9)
                  Print
   
                  print "@N@[@0F@ 1@N@]  @0F@Path           @08@: @0F@";trim(bull.MostDownloadsInBankHTML.Path)
                  print "@N@[@0F@ 2@N@]  @0F@Highest Number @08@: @0F@";bull.MostDownloadsInBankHTML.TopNumber
                  print "@N@[@0F@ 3@N@]  @0F@Exclude Sysop? @08@: @0F@";DispYesNo(bull.MostDownloadsInBankHTML.ExcludeSysop)
                  print "@N@[@0F@ 4@N@]  @0F@Header Message @08@: @0F@";trim(bull.MostDownloadsInBankHTML.Header)
                  print "@N@[@0F@ 5@N@]  @0F@Footer Message @08@: @0F@";trim(bull.MostDownloadsInBankHTML.Footer)
                  print
                  print "@N@[@0F@ Q@N@]  @0F@Previous Menu"
   
                  do
                      MostDownloadsInBankHTMLChoice = ucase(CHR(readkey(100)))
                      if MostDownloadsInBankHTMLChoice <> "" then
                         exit do
                      end if
       
                    do while ReadChannel(0, msg)
                       ProcessChannelMessage(msg)
                    loop
           
                  loop
                  
                  select case MostDownloadsInBankHTMLChoice
                     case "Q"
                     
                     case "1"
                        locate 4, 23
                        print string(55, 32);
                        locate 4, 23
                        
                        SetInitialString(bull.MostDownloadsInBankHTML.Path)
                        bull.MostDownloadsInBankHTML.Path = trim(InputString(55))
   
                     case "2"
                        do
                           locate 5, 23
                           print string(55, 32);
                           locate 5, 23
                        
                           SetInitialString(str(bull.MostDownloadsInBankHTML.TopNumber))
                           TempTopNumber = trim(InputString(5))
                           
                           if Trim(TempTopNumber) = STR(VAL(TempTopNumber)) and VAL(TempTopNumber) > 0 then
                              bull.MostDownloadsInBankHTML.TopNumber = VAL(TempTopNumber)
                              exit do
                           end if
                        loop
                        
                     case "3"
                        select case bull.MostDownloadsInBankHTML.ExcludeSysop
                           case TRUE
                              bull.MostDownloadsInBankHTML.ExcludeSysop = FALSE
                           case FALSE
                              bull.MostDownloadsInBankHTML.ExcludeSysop = TRUE
                        end select
   
                     case "4"
                        locate 7, 23
                        print string(57, 32);
                        locate 7, 23
                        
                        SetInitialString(bull.MostDownloadsInBankHTML.Header)
                        bull.MostDownloadsInBankHTML.Header = trim(InputString(55))
                     
                     case "5"
                        locate 8, 23
                        print string(57, 32);
                        locate 8, 23
                        
                        SetInitialString(bull.MostDownloadsInBankHTML.Footer)
                        bull.MostDownloadsInBankHTML.Footer = trim(InputString(55))
   
                  end select
               loop
   
         end select
   loop   
   WriteBullConfig
end sub

sub PurchaseTimeOptions
   WriteActivityLogEntry("      * [Sysop Menu] Entered Purchage Time Settings")
   
   dim PurchaseChoice as string * 1
   
   do while PurchaseChoice <> "Q"
      Cls
      print "@N@PS-TimeBank Purchace Time Settings          Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print
    
      print "@N@[@0F@ 1@N@]  @0F@Enable Purchase Feature       @08@: @0F@";DispYesNo(cf.EnablePurchase)
      print "@N@[@0F@ 2@N@]  @0F@Cost Per Minute               @08@: @0F@";cf.CostPerMinute
      print "@N@[@0F@ 3@N@]  @0F@Minimum Minutes Purchasable   @08@: @0F@";cf.MinMinutes
      print "@N@[@0F@ 4@N@]  @0F@Purchase Divisibility Rule    @08@: @0F@";cf.MinuteDivisibility
      print
      print "@N@[@0F@ H@N@]  @0F@Help on Purchase Time Options"
      print "@N@[@0F@ Q@N@]  @0F@Quit Purchase Time Settings"
      print
    
      do
          PurchaseChoice = ucase(CHR(readkey(100)))
          if PurchaseChoice <> "" then
             exit do
          end if
    
        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop
      loop
    
      select case ucase(PurchaseChoice)
         case "1"
            cf.EnablePurchase = not cf.EnablePurchase
            WriteConfig
         case "2"
            dim TempCostPerMinute as string * 5
            Locate 5, 36
            Print "@0F@                     ";
            locate 5,36
            SetInitialString(str(cf.CostPerMinute))
            TempCostPerMinute = InputString(5)
            If TempCostPerMinute <> "" and Val(TempCostPerMinute) >= 1 then
               cf.CostPerMinute = Val(Trim(TempCostPerMinute))
               WriteConfig
            end if
         case "3"
            dim TempMinMinutes as string * 5
            Locate 6, 36
            Print "@0F@                     ";
            locate 6,36
            SetInitialString(str(cf.MinMinutes))
            TempMinMinutes = InputString(5)
            If TempMinMinutes <> "" and Val(TempMinMinutes) >= 1 then
               cf.MinMinutes = Val(Trim(TempMinMinutes))
               WriteConfig
            end if
         case "4"
            dim TempMinuteDivisibility as string * 5
            Locate 7, 36
            Print "@0F@                     ";
            locate 7,36
            SetInitialString(str(cf.MinuteDivisibility))
            TempMinuteDivisibility = InputString(5)
            If TempMinuteDivisibility <> "" and Val(TempMinuteDivisibility) >= 1 then
               cf.MinuteDivisibility = Val(Trim(TempMinuteDivisibility))
               WriteConfig
            end if
      end select
   loop
end sub

sub Configure

WriteActivityLogEntry("      * [Sysop Menu] Entered Configuration Manager")

dim ConfigChoice as string * 1

do while ConfigChoice <> "Q"
      Cls
      print "@N@PS-TimeBank Configuration Mananger          Time Left@08@:@0F@ @USER.TIMELEFTTODAY@"
      print Bar(60,0,9)
      Print

      print "@N@[@0F@ 1@N@]  @0F@Default User Profile"
      print "@N@[@0F@ 2@N@]  @0F@Default User Profiles By Security Level"
      print "@N@[@0F@ 3@N@]  @0F@Horse Race Settings"
      print "@N@[@0F@ 4@N@]  @0F@Blackjack Settings"
      print "@N@[@0F@ 5@N@]  @0F@Raffle Settings"
      print "@N@[@0F@ 6@N@]  @0F@Number Guess Settings"
      print
      print "@N@[@0F@ 7@N@]  @0F@Enable Statistics Menu      @08@: @0F@";DispYesNo(cf.EnableStats)
      print "@N@[@0F@ 8@N@]  @0F@Registration Code           @08@: @0F@";

      if GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then
         If Regged then
            print "Registered"
         else
            print "Unregistered"
         end if
      else
         print "@07@<Master Sysop Only>"
      end if    
      
      print "@N@[@0F@ 9@N@]  @0F@Time Bank has been run      @08@: @0F@";FormatNumber(cf.TimesRan);" Times"
      print "@N@[@0F@ B@N@]  @0F@Bulletin Options"
      print "@N@[@0F@ P@N@]  @0F@Purchace Time Options"      
      print
      print "@N@[@0F@ Q@N@]  @0F@Quit Configuration Manager"
      print 

      do
          ConfigChoice = ucase(CHR(readkey(100)))
          if ConfigChoice <> "" then
             exit do
          end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

      loop

      select case ucase(ConfigChoice)
         case "1"
            DefActSet
            
         case "2"
            DefActSetPro
         
         case "3"
            HorseRaceSettings

         case "4"
            CardGameSettings
            
         case "5"
            RaffleSettings
            
         case "6"
            NumberGuessSettings
                        
         case "7"
            select case cf.EnableStats
               case TRUE
                  cf.EnableStats = FALSE
               case FALSE
                  cf.EnableStats = TRUE
            end select
            WriteConfig
            
         case "8"
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then
               dim RegNum as string * 255
               Locate 12, 36
               Print "@0F@";string(43, 32);
               locate 12,36
               input RegNum
               If RegNum <> "" then
                  cf.RegCode = Trim(RegNum)
                  WriteConfig
               end if
               If NOT Regged then
                  locate 12, 37
                  print string(43,32);
                  locate 12, 37
                  Print "@84@INVALID REGISTRATION CODE!"
                  Delay 3
               else
                  locate 12, 37
                  print string(43,32);
                  locate 12, 37
                  Print "@8F@Thank you for registering!"
                  Delay 3
               end if
            end if

         case "9"
            dim TempTimes as string * 25
            Locate 13, 36
            Print "@0F@                     ";
            locate 13,36
            SetInitialString(str(cf.TimesRan))
            TempTimes = InputString(10)
            If TempTimes <> "" and Val(TempTimes) >= 0 then
               cf.TimesRan = Val(Trim(TempTimes))
               WriteConfig
            end if
            
         case "B"
            Bulletins
         case "P"
            PurchaseTimeOptions

         case "Q"
         


      
      end select
loop

end sub

sub SysopMenu

dim SysChoice as string *1

do

  displayfile "wc:\menu\pstsys.bbs"

    do
        SysChoice = ucase(CHR(readkey(100)))
        if SysChoice = "U" or SysChoice = "C" or SysChoice = "W" or SysChoice = "Q" or SysChoice = "!" or SysChoice = "M" then
           exit do
        end if

        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop
    
    loop
     
      select case ucase(SysChoice)
         case "U"
           If td.TimeDoorModSet.UserEditor or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then 
              UserEditor
           else
              cls
              print "@0F@User Editor"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
         case "C"
           If td.TimeDoorModSet.Configure or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then 
              Configure
           else
              cls
              print "@0F@Configuration"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
         case "W"
           If td.TimeDoorModSet.WCUserDB or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then 
              Run "Sysop User Editor"
           else
              cls
              print "@0F@Wildcat! User Database Edit"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   

           
         case "!"
           If td.TimeDoorModSet.DeleteUsers or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then
              Cls
              Print "@0F@WARNING: @N@This option will delete the @0F@PSTIME.DAT @N@file, erasing ALL"
              print "Time Bank accounts!"
              print
              print "Type @0F@YES @N@(In all CAPS) to continue: ";
              if InputString(3) = "YES" then 
                 kill "wc:\data\pstime.dat"
                 print "@N@All Time Bank user accounts have been deleted.  Exiting program."
                 print
                 WriteActivityLogEntry("      * [Sysop Menu] All user accounts deleted")
                 Pause
                 End
              end if
           else
              cls
              print "@0F@Delete User Accounts"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
              
         case "M"
           If td.TimeDoorModSet.AllowTimeModify or GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 then
              dim NewTime as string * 5
              NewTime = ""
              cls
              Print "@0F@Modify Your Time Left Online"
              print Bar(35,0,9)
              print
              if Regged then
                 print "@N@Your current time left online is@08@: @0F@@USER.TIMELEFTTODAY@"
                 do
                    print "@N@Enter new time left online @08@: @N@";           
                    NewTime = InputString(5)
                    If NewTime = "" then exit do
                    If VAL(NewTime) > 1 and VAL(NewTime) <= 1440 then exit do
                 loop
                 If VAL(NewTime) > 1 and VAL(NewTime) <= 1440 then ChangeUserTime(VAL(NewTime) + 1)
                 WriteActivityLogEntry("      * [Sysop Menu] Changed current time online to " + NewTime + " minutes.")
              else
                 Print "@04@UNREGISTERED COPY!"
                 Print "@0F@If you would register, this option wouuld be available..."
                 Print
                 Pause
              end if
           else
              cls
              print "@0F@Modify Time Online"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
            
         case "Q"
           exit do
      end select               
loop

end sub

sub WriteBulletins

   dim BullCounter as integer
   dim TempBull as UserDatabase
   dim TempBullUser as Tuser
   dim TempU as integer
   dim n as byte
   dim j as byte
   dim AllUser as byte
   dim UserBullArray() as TItem
   dim TempUserBull as UserDatabase
   
   redim TopTen(bull.MostTimeWonAnsi.TopNumber)
   redim UserBullArray(bull.MostTimeWonAnsi.TopNumber)
   n = 0
      
   open "wc:\data\pstime.dat" for random as #1 len = len(UserDatabase)
   
   if trim(bull.MostTimeWonAnsi.Path) <> "" then
      open trim(Bull.MostTimeWonAnsi.Path) for output as #2
         print #2, "@CLS@@0F@";Bull.MostTimeWonAnsi.Header
         print #2, "@09@";Bar(60,0,9)
         print #2, "@07@#  Name                          Minutes"

         for n = 1 to Bull.MostTimeWonAnsi.TopNumber
           get #1, n, TempUserBull
           if NOT GetUserById(TempUserBull.RecordID, TempBullUser, TempU) then
              UserBullArray(n).Name = "Unknown"    
           else
              UserBullArray(n).Name = TempBullUser.info.name
           end if
           UserBullArray(n).Score = TempUserBull.MinutesWon
           if eof(1) then exit for
         next n
         
         for AllUser = 1 to Bull.MostTimeWonAnsi.TopNumber
            
            BullItem = UserBullArray(AllUser)
            
            for n = 1 to Bull.MostTimeWonAnsi.TopNumber
              if BullItem.score > TopTen(n).score then
                for j = Bull.MostTimeWonAnsi.TopNumber - 1 to n step - 1
                  TopTen(j+1) = TopTen(j)
                next j
                TopTen(n) = BullItem
                exit for
              end if
            next n
            
         next AllUser
         
         for n = 1 to Bull.MostTimeWonAnsi.TopNumber
            if trim(TopTen(n).Name) = "" then
               Print #2, "@0F@";pad(str(n),len(str(Bull.MostTimeWonAnsi.TopNumber)));" @03@No One Yet!                   @07@--"
            else
               Print #2, "@0F@";pad(str(n),len(str(Bull.MostTimeWonAnsi.TopNumber)));" @0B@";pad(UpperLower(TopTen(n).Name), 30);"@0F@";Str(TopTen(n).score)
            end if
         next n
         
         print #2, "@09@";Bar(60,0,9)
         print #2, "@0F@";Bull.MostTimeWonAnsi.Footer
         
         if not Regged then 
            print #2, "@04@UNREGISTERED EVALUATION COPY - Ask your sysop to register PS-TimeBank"
            print #2, ""
         else
            print #2, ""
         end if
         print #2, "@07@Generated by PS-TimeBank 1.0 (c) 1999 Mike Christensen All Rights Reserved"
         print #2, ""
         print #2, "@PAUSE@"
         
      close #2
   end if
   

   close #1
end sub

sub PurchaseTime
   dim TempPurchase as string
   dim Cost as integer

   cls
   Print "@0F@Purchase Time"
   print Bar(35,0,9)
   print
   print "@N@You can purchase time online for only @0F@";cf.CostPerMinute;" Cents@N@ per minute.  This"
   print "amount will be added to your account balance."
   print
   print "@N@How many minutes do you wish to purchase? @08@: @0F@";
   
   TempPurchase = InputString(5)
   Cost = val(TempPurchase) * 5
   
   if val(TempPurchase) = 0 then exit sub

   if val(TempPurchase) >= cf.MinMinutes then
      if val(TempPurchase) mod cf.MinuteDivisibility = 0 then
         print
         print "@N@Total Cost @08@: @0F@";FormatNumber(Cost / 100, "$####.##-")
         if AskYesNo("@N@Do you wish to complete the purchase?",TRUE) then
            User.SubscriptionBalance = User.SubscriptionBalance + Cost
            UpdateUser(User)
            ChangeUserTime(GetMinutesRemaining + val(TempPurchase))
            print
            print
            print "@0F@Enjoy your time!"
            Print
            Pause
         end if
      else
         Print "@0F@You must purchase time in increments of ";cf.MinuteDivisibility;" minutes."
         print
         pause
      end if
   else
      Print "@0F@You must purchase at least ";cf.MinMinutes;" minutes."
      print
      pause
   end if
end sub

// *************************************************************
// **                                                         **
// ** End of Subs/Functions - Main Code Starts Now            **
// **                                                         **
// *************************************************************

ReadConfig
ReadDB
ReadBullConfig

if td.LockedOut and GetObjectFlags(OBJECTID_MASTER_SYSOP) = 0 then
   cls
   print "@0F@You Have Been Locked Out"
   print Bar(35,0,9)              
   Print "@N@The sysop has locked you out of this program."
   WriteActivityLogEntry("      * Denied access to PS-TimeBank (Locked Out)")
   print
   Pause
   End
end if

inc(cf.TimesRan)
WriteConfig
 
do

  SubText(1) = FormatNumber(td.BalanceMin)
  SubText(2) = FormatNumber(td.MaxBalanceMin)
  
  displayfile "wc:\menu\pstmain.bbs"

    do
        choice = ucase(CHR(readkey(100)))
        //if choice = "D" or choice = "W" or choice = "G" or choice = "S" or choice = "Q" then
        if choice <> "" then
           exit do
        end if

        if GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 and choice = "*" then
           exit do
        end if
        
        do while ReadChannel(0, msg)
           ProcessChannelMessage(msg)
        loop

    loop

      select case ucase(choice)
         case "D"
           If NOT td.NoDepositMin then 
              WriteActivityLogEntry("      * Option [D] Selected (Deposit Time)")
              BankTime
           else
              cls
              print "@0F@Deposit Time"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
         case "W"
           If NOT td.NoDepositMin then 
              WriteActivityLogEntry("      * Option [W] Selected (Withdraw Time)")
              WithdrawTime
           else
              cls
              print "@0F@Withdraw Time"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
         case "G"
           if NOT td.CantGamble then
              WriteActivityLogEntry("      * Option [G] Selected (Gamble Time)")
              GambleTime
           else
              cls
              print "@0F@Gambling"
              print Bar(35,0,9)              
              Print "@N@You are not aloud to use this feature."
              print
              Pause
           end if   
         case "S"
           if cf.EnableStats then
              WriteActivityLogEntry("      * Option [S] Selected (Stats)")
              Stats
           else
              cls
              print "@0F@Stats Option Disabled"
              print Bar(35,0,9)              
              Print "@N@The sysop has disabled the stats option..."
              print
              Pause
           end if
         case "P"
           If cf.EnablePurchase then 
              WriteActivityLogEntry("      * Option [P] Selected (Purchase Time)")
              PurchaseTime
           end if
         case "Q"
           dim BBSInfo as TMakewild
           cls
           Print "@0F@Thank you for using PS-TimeBank 1.0";chr(225);" By Mike Christensen"
           print "(c) 1999 All Rights Reserved"
           print
           print "@N@You are the @0F@";str(cf.TimesRan);Ordinal(str(cf.TimesRan));" @N@person to use this program."
           
           If NOT regged then
              WriteActivityLogEntry("      * Option [Q] Selected - Please register!")
              Print
              Print "@04@UNREGISTERED EVALUATION COPY..."
              Print "@07@Seven second delay, please help your sysop register this program."
              Delay 7
           else
              WriteActivityLogEntry("      * Option [Q] Selected (Quit)")
              Print
              Print "@N@Registered to @08@: @0F@@SYSTEM.BBSNAME@"
              Delay 1
           end if
           WriteBulletins
           end
         case "*"
            if GetObjectFlags(OBJECTID_MASTER_SYSOP) <> 0 or td.TimeDoorMod then
               WriteActivityLogEntry("      * Option [*] Selected (Sysop Menu)")
               SysopMenu
            end if
         case "A"
            cls
            print "@0F@About PS-TimeBank"
            print Bar(35,0,9)              
            print "@0F@PS-TimeBank 1.0 Full Release for Wildcat! Interactive Net Server"
            print "@07@(@0F@c@07@) 1999 Mike Christensen All Rights Reserved"
            print
            Print "@0F@Programmed By     @08@: @N@Mike Christensen"
            print "@0F@Registration Cost @08@: @N@$25"
            print
            Print "@0F@Support@08@-"
            print "   @0F@Telnet @08@: @N@bbs.piscessoft.com"
            print "   @0F@FTP    @08@: @N@ftp.piscessoft.com"
            print "   @0F@WWW    @08@: @N@www.piscessoft.com"
            print "   @0F@Email  @08@: @N@hiawatha@piscessoft.com"
            print "            hiawatha@piscessoft.com"
            print
            print "@N@PS-TimeBank is currently running on @0F@@SYSTEM.BBSNAME@"
            print
            Pause
         case "H"
            if bull.BullOps then
               print
            else
               cls
               print "@0F@High Scores Bulletins"
               print Bar(35,0,9)              
               Print "@N@The sysop has disabled the bulletins option..."
               print
               Pause
            end if
               
         
      end select               
loop
